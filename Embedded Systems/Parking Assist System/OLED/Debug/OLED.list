
OLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008668  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b8  080087f0  080087f0  000187f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008fa8  08008fa8  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  08008fa8  08008fa8  00018fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008fb0  08008fb0  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008fb0  08008fb0  00018fb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008fb4  08008fb4  00018fb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08008fb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020098  2**0
                  CONTENTS
 10 .bss          00000c10  20000098  20000098  00020098  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000ca8  20000ca8  00020098  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017781  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004074  00000000  00000000  00037849  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001268  00000000  00000000  0003b8c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001090  00000000  00000000  0003cb28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000252cf  00000000  00000000  0003dbb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a377  00000000  00000000  00062e87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc476  00000000  00000000  0007d1fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00149674  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004cc8  00000000  00000000  001496c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000098 	.word	0x20000098
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080087d8 	.word	0x080087d8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000009c 	.word	0x2000009c
 80001c4:	080087d8 	.word	0x080087d8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <MX_GPIO_Init>:
        * EXTI
     PC3   ------> I2S2_SD
     PB10   ------> I2S2_CK
*/
void MX_GPIO_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b08c      	sub	sp, #48	; 0x30
 80004d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d2:	f107 031c 	add.w	r3, r7, #28
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
 80004da:	605a      	str	r2, [r3, #4]
 80004dc:	609a      	str	r2, [r3, #8]
 80004de:	60da      	str	r2, [r3, #12]
 80004e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004e2:	2300      	movs	r3, #0
 80004e4:	61bb      	str	r3, [r7, #24]
 80004e6:	4b83      	ldr	r3, [pc, #524]	; (80006f4 <MX_GPIO_Init+0x228>)
 80004e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ea:	4a82      	ldr	r2, [pc, #520]	; (80006f4 <MX_GPIO_Init+0x228>)
 80004ec:	f043 0310 	orr.w	r3, r3, #16
 80004f0:	6313      	str	r3, [r2, #48]	; 0x30
 80004f2:	4b80      	ldr	r3, [pc, #512]	; (80006f4 <MX_GPIO_Init+0x228>)
 80004f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f6:	f003 0310 	and.w	r3, r3, #16
 80004fa:	61bb      	str	r3, [r7, #24]
 80004fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004fe:	2300      	movs	r3, #0
 8000500:	617b      	str	r3, [r7, #20]
 8000502:	4b7c      	ldr	r3, [pc, #496]	; (80006f4 <MX_GPIO_Init+0x228>)
 8000504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000506:	4a7b      	ldr	r2, [pc, #492]	; (80006f4 <MX_GPIO_Init+0x228>)
 8000508:	f043 0304 	orr.w	r3, r3, #4
 800050c:	6313      	str	r3, [r2, #48]	; 0x30
 800050e:	4b79      	ldr	r3, [pc, #484]	; (80006f4 <MX_GPIO_Init+0x228>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000512:	f003 0304 	and.w	r3, r3, #4
 8000516:	617b      	str	r3, [r7, #20]
 8000518:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800051a:	2300      	movs	r3, #0
 800051c:	613b      	str	r3, [r7, #16]
 800051e:	4b75      	ldr	r3, [pc, #468]	; (80006f4 <MX_GPIO_Init+0x228>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000522:	4a74      	ldr	r2, [pc, #464]	; (80006f4 <MX_GPIO_Init+0x228>)
 8000524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000528:	6313      	str	r3, [r2, #48]	; 0x30
 800052a:	4b72      	ldr	r3, [pc, #456]	; (80006f4 <MX_GPIO_Init+0x228>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000532:	613b      	str	r3, [r7, #16]
 8000534:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000536:	2300      	movs	r3, #0
 8000538:	60fb      	str	r3, [r7, #12]
 800053a:	4b6e      	ldr	r3, [pc, #440]	; (80006f4 <MX_GPIO_Init+0x228>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053e:	4a6d      	ldr	r2, [pc, #436]	; (80006f4 <MX_GPIO_Init+0x228>)
 8000540:	f043 0301 	orr.w	r3, r3, #1
 8000544:	6313      	str	r3, [r2, #48]	; 0x30
 8000546:	4b6b      	ldr	r3, [pc, #428]	; (80006f4 <MX_GPIO_Init+0x228>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054a:	f003 0301 	and.w	r3, r3, #1
 800054e:	60fb      	str	r3, [r7, #12]
 8000550:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000552:	2300      	movs	r3, #0
 8000554:	60bb      	str	r3, [r7, #8]
 8000556:	4b67      	ldr	r3, [pc, #412]	; (80006f4 <MX_GPIO_Init+0x228>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055a:	4a66      	ldr	r2, [pc, #408]	; (80006f4 <MX_GPIO_Init+0x228>)
 800055c:	f043 0302 	orr.w	r3, r3, #2
 8000560:	6313      	str	r3, [r2, #48]	; 0x30
 8000562:	4b64      	ldr	r3, [pc, #400]	; (80006f4 <MX_GPIO_Init+0x228>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000566:	f003 0302 	and.w	r3, r3, #2
 800056a:	60bb      	str	r3, [r7, #8]
 800056c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800056e:	2300      	movs	r3, #0
 8000570:	607b      	str	r3, [r7, #4]
 8000572:	4b60      	ldr	r3, [pc, #384]	; (80006f4 <MX_GPIO_Init+0x228>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000576:	4a5f      	ldr	r2, [pc, #380]	; (80006f4 <MX_GPIO_Init+0x228>)
 8000578:	f043 0308 	orr.w	r3, r3, #8
 800057c:	6313      	str	r3, [r2, #48]	; 0x30
 800057e:	4b5d      	ldr	r3, [pc, #372]	; (80006f4 <MX_GPIO_Init+0x228>)
 8000580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000582:	f003 0308 	and.w	r3, r3, #8
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800058a:	2200      	movs	r2, #0
 800058c:	2108      	movs	r1, #8
 800058e:	485a      	ldr	r0, [pc, #360]	; (80006f8 <MX_GPIO_Init+0x22c>)
 8000590:	f001 f99a 	bl	80018c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000594:	2201      	movs	r2, #1
 8000596:	2101      	movs	r1, #1
 8000598:	4858      	ldr	r0, [pc, #352]	; (80006fc <MX_GPIO_Init+0x230>)
 800059a:	f001 f995 	bl	80018c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_12_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800059e:	2200      	movs	r2, #0
 80005a0:	f24f 0110 	movw	r1, #61456	; 0xf010
 80005a4:	4856      	ldr	r0, [pc, #344]	; (8000700 <MX_GPIO_Init+0x234>)
 80005a6:	f001 f98f 	bl	80018c8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzz_GPIO_Port, Buzz_Pin, GPIO_PIN_RESET);
 80005aa:	2200      	movs	r2, #0
 80005ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005b0:	4854      	ldr	r0, [pc, #336]	; (8000704 <MX_GPIO_Init+0x238>)
 80005b2:	f001 f989 	bl	80018c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80005b6:	2308      	movs	r3, #8
 80005b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ba:	2301      	movs	r3, #1
 80005bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005be:	2300      	movs	r3, #0
 80005c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c2:	2300      	movs	r3, #0
 80005c4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80005c6:	f107 031c 	add.w	r3, r7, #28
 80005ca:	4619      	mov	r1, r3
 80005cc:	484a      	ldr	r0, [pc, #296]	; (80006f8 <MX_GPIO_Init+0x22c>)
 80005ce:	f000 ffc7 	bl	8001560 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80005d2:	2301      	movs	r3, #1
 80005d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d6:	2301      	movs	r3, #1
 80005d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005da:	2300      	movs	r3, #0
 80005dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005de:	2300      	movs	r3, #0
 80005e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80005e2:	f107 031c 	add.w	r3, r7, #28
 80005e6:	4619      	mov	r1, r3
 80005e8:	4844      	ldr	r0, [pc, #272]	; (80006fc <MX_GPIO_Init+0x230>)
 80005ea:	f000 ffb9 	bl	8001560 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80005ee:	2308      	movs	r3, #8
 80005f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005f2:	2302      	movs	r3, #2
 80005f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f6:	2300      	movs	r3, #0
 80005f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005fa:	2300      	movs	r3, #0
 80005fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80005fe:	2305      	movs	r3, #5
 8000600:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000602:	f107 031c 	add.w	r3, r7, #28
 8000606:	4619      	mov	r1, r3
 8000608:	483c      	ldr	r0, [pc, #240]	; (80006fc <MX_GPIO_Init+0x230>)
 800060a:	f000 ffa9 	bl	8001560 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800060e:	2301      	movs	r3, #1
 8000610:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000612:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000616:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000618:	2300      	movs	r3, #0
 800061a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800061c:	f107 031c 	add.w	r3, r7, #28
 8000620:	4619      	mov	r1, r3
 8000622:	4838      	ldr	r0, [pc, #224]	; (8000704 <MX_GPIO_Init+0x238>)
 8000624:	f000 ff9c 	bl	8001560 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000628:	2304      	movs	r3, #4
 800062a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800062c:	2300      	movs	r3, #0
 800062e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000630:	2300      	movs	r3, #0
 8000632:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000634:	f107 031c 	add.w	r3, r7, #28
 8000638:	4619      	mov	r1, r3
 800063a:	4833      	ldr	r0, [pc, #204]	; (8000708 <MX_GPIO_Init+0x23c>)
 800063c:	f000 ff90 	bl	8001560 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000640:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000644:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000646:	2302      	movs	r3, #2
 8000648:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064a:	2300      	movs	r3, #0
 800064c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064e:	2300      	movs	r3, #0
 8000650:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000652:	2305      	movs	r3, #5
 8000654:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000656:	f107 031c 	add.w	r3, r7, #28
 800065a:	4619      	mov	r1, r3
 800065c:	482a      	ldr	r0, [pc, #168]	; (8000708 <MX_GPIO_Init+0x23c>)
 800065e:	f000 ff7f 	bl	8001560 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LED_12_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000662:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000666:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000668:	2301      	movs	r3, #1
 800066a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066c:	2300      	movs	r3, #0
 800066e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000670:	2300      	movs	r3, #0
 8000672:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000674:	f107 031c 	add.w	r3, r7, #28
 8000678:	4619      	mov	r1, r3
 800067a:	4821      	ldr	r0, [pc, #132]	; (8000700 <MX_GPIO_Init+0x234>)
 800067c:	f000 ff70 	bl	8001560 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Buzz_Pin;
 8000680:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000684:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000686:	2301      	movs	r3, #1
 8000688:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068a:	2300      	movs	r3, #0
 800068c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800068e:	2300      	movs	r3, #0
 8000690:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Buzz_GPIO_Port, &GPIO_InitStruct);
 8000692:	f107 031c 	add.w	r3, r7, #28
 8000696:	4619      	mov	r1, r3
 8000698:	481a      	ldr	r0, [pc, #104]	; (8000704 <MX_GPIO_Init+0x238>)
 800069a:	f000 ff61 	bl	8001560 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Sensor_Pin;
 800069e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006a4:	2300      	movs	r3, #0
 80006a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a8:	2300      	movs	r3, #0
 80006aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Sensor_GPIO_Port, &GPIO_InitStruct);
 80006ac:	f107 031c 	add.w	r3, r7, #28
 80006b0:	4619      	mov	r1, r3
 80006b2:	4814      	ldr	r0, [pc, #80]	; (8000704 <MX_GPIO_Init+0x238>)
 80006b4:	f000 ff54 	bl	8001560 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80006b8:	2320      	movs	r3, #32
 80006ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006bc:	2300      	movs	r3, #0
 80006be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c0:	2300      	movs	r3, #0
 80006c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80006c4:	f107 031c 	add.w	r3, r7, #28
 80006c8:	4619      	mov	r1, r3
 80006ca:	480d      	ldr	r0, [pc, #52]	; (8000700 <MX_GPIO_Init+0x234>)
 80006cc:	f000 ff48 	bl	8001560 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80006d0:	2302      	movs	r3, #2
 80006d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80006d4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80006d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006da:	2300      	movs	r3, #0
 80006dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80006de:	f107 031c 	add.w	r3, r7, #28
 80006e2:	4619      	mov	r1, r3
 80006e4:	4804      	ldr	r0, [pc, #16]	; (80006f8 <MX_GPIO_Init+0x22c>)
 80006e6:	f000 ff3b 	bl	8001560 <HAL_GPIO_Init>

}
 80006ea:	bf00      	nop
 80006ec:	3730      	adds	r7, #48	; 0x30
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	40023800 	.word	0x40023800
 80006f8:	40021000 	.word	0x40021000
 80006fc:	40020800 	.word	0x40020800
 8000700:	40020c00 	.word	0x40020c00
 8000704:	40020000 	.word	0x40020000
 8000708:	40020400 	.word	0x40020400

0800070c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000710:	4b12      	ldr	r3, [pc, #72]	; (800075c <MX_I2C1_Init+0x50>)
 8000712:	4a13      	ldr	r2, [pc, #76]	; (8000760 <MX_I2C1_Init+0x54>)
 8000714:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000716:	4b11      	ldr	r3, [pc, #68]	; (800075c <MX_I2C1_Init+0x50>)
 8000718:	4a12      	ldr	r2, [pc, #72]	; (8000764 <MX_I2C1_Init+0x58>)
 800071a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800071c:	4b0f      	ldr	r3, [pc, #60]	; (800075c <MX_I2C1_Init+0x50>)
 800071e:	2200      	movs	r2, #0
 8000720:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000722:	4b0e      	ldr	r3, [pc, #56]	; (800075c <MX_I2C1_Init+0x50>)
 8000724:	2200      	movs	r2, #0
 8000726:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000728:	4b0c      	ldr	r3, [pc, #48]	; (800075c <MX_I2C1_Init+0x50>)
 800072a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800072e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000730:	4b0a      	ldr	r3, [pc, #40]	; (800075c <MX_I2C1_Init+0x50>)
 8000732:	2200      	movs	r2, #0
 8000734:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000736:	4b09      	ldr	r3, [pc, #36]	; (800075c <MX_I2C1_Init+0x50>)
 8000738:	2200      	movs	r2, #0
 800073a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800073c:	4b07      	ldr	r3, [pc, #28]	; (800075c <MX_I2C1_Init+0x50>)
 800073e:	2200      	movs	r2, #0
 8000740:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000742:	4b06      	ldr	r3, [pc, #24]	; (800075c <MX_I2C1_Init+0x50>)
 8000744:	2200      	movs	r2, #0
 8000746:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000748:	4804      	ldr	r0, [pc, #16]	; (800075c <MX_I2C1_Init+0x50>)
 800074a:	f002 fce1 	bl	8003110 <HAL_I2C_Init>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000754:	f000 f9ce 	bl	8000af4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000758:	bf00      	nop
 800075a:	bd80      	pop	{r7, pc}
 800075c:	200000b4 	.word	0x200000b4
 8000760:	40005400 	.word	0x40005400
 8000764:	00061a80 	.word	0x00061a80

08000768 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b08a      	sub	sp, #40	; 0x28
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000770:	f107 0314 	add.w	r3, r7, #20
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	605a      	str	r2, [r3, #4]
 800077a:	609a      	str	r2, [r3, #8]
 800077c:	60da      	str	r2, [r3, #12]
 800077e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a19      	ldr	r2, [pc, #100]	; (80007ec <HAL_I2C_MspInit+0x84>)
 8000786:	4293      	cmp	r3, r2
 8000788:	d12c      	bne.n	80007e4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	613b      	str	r3, [r7, #16]
 800078e:	4b18      	ldr	r3, [pc, #96]	; (80007f0 <HAL_I2C_MspInit+0x88>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a17      	ldr	r2, [pc, #92]	; (80007f0 <HAL_I2C_MspInit+0x88>)
 8000794:	f043 0302 	orr.w	r3, r3, #2
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b15      	ldr	r3, [pc, #84]	; (80007f0 <HAL_I2C_MspInit+0x88>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0302 	and.w	r3, r3, #2
 80007a2:	613b      	str	r3, [r7, #16]
 80007a4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80007a6:	f44f 7310 	mov.w	r3, #576	; 0x240
 80007aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007ac:	2312      	movs	r3, #18
 80007ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007b0:	2301      	movs	r3, #1
 80007b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b4:	2300      	movs	r3, #0
 80007b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007b8:	2304      	movs	r3, #4
 80007ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007bc:	f107 0314 	add.w	r3, r7, #20
 80007c0:	4619      	mov	r1, r3
 80007c2:	480c      	ldr	r0, [pc, #48]	; (80007f4 <HAL_I2C_MspInit+0x8c>)
 80007c4:	f000 fecc 	bl	8001560 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007c8:	2300      	movs	r3, #0
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	4b08      	ldr	r3, [pc, #32]	; (80007f0 <HAL_I2C_MspInit+0x88>)
 80007ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d0:	4a07      	ldr	r2, [pc, #28]	; (80007f0 <HAL_I2C_MspInit+0x88>)
 80007d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007d6:	6413      	str	r3, [r2, #64]	; 0x40
 80007d8:	4b05      	ldr	r3, [pc, #20]	; (80007f0 <HAL_I2C_MspInit+0x88>)
 80007da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007e0:	60fb      	str	r3, [r7, #12]
 80007e2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80007e4:	bf00      	nop
 80007e6:	3728      	adds	r7, #40	; 0x28
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	40005400 	.word	0x40005400
 80007f0:	40023800 	.word	0x40023800
 80007f4:	40020400 	.word	0x40020400

080007f8 <MX_I2S3_Init>:

I2S_HandleTypeDef hi2s3;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80007fc:	4b13      	ldr	r3, [pc, #76]	; (800084c <MX_I2S3_Init+0x54>)
 80007fe:	4a14      	ldr	r2, [pc, #80]	; (8000850 <MX_I2S3_Init+0x58>)
 8000800:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000802:	4b12      	ldr	r3, [pc, #72]	; (800084c <MX_I2S3_Init+0x54>)
 8000804:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000808:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800080a:	4b10      	ldr	r3, [pc, #64]	; (800084c <MX_I2S3_Init+0x54>)
 800080c:	2200      	movs	r2, #0
 800080e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000810:	4b0e      	ldr	r3, [pc, #56]	; (800084c <MX_I2S3_Init+0x54>)
 8000812:	2200      	movs	r2, #0
 8000814:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000816:	4b0d      	ldr	r3, [pc, #52]	; (800084c <MX_I2S3_Init+0x54>)
 8000818:	f44f 7200 	mov.w	r2, #512	; 0x200
 800081c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800081e:	4b0b      	ldr	r3, [pc, #44]	; (800084c <MX_I2S3_Init+0x54>)
 8000820:	4a0c      	ldr	r2, [pc, #48]	; (8000854 <MX_I2S3_Init+0x5c>)
 8000822:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000824:	4b09      	ldr	r3, [pc, #36]	; (800084c <MX_I2S3_Init+0x54>)
 8000826:	2200      	movs	r2, #0
 8000828:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800082a:	4b08      	ldr	r3, [pc, #32]	; (800084c <MX_I2S3_Init+0x54>)
 800082c:	2200      	movs	r2, #0
 800082e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000830:	4b06      	ldr	r3, [pc, #24]	; (800084c <MX_I2S3_Init+0x54>)
 8000832:	2200      	movs	r2, #0
 8000834:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000836:	4805      	ldr	r0, [pc, #20]	; (800084c <MX_I2S3_Init+0x54>)
 8000838:	f003 f8c6 	bl	80039c8 <HAL_I2S_Init>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000842:	f000 f957 	bl	8000af4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	20000108 	.word	0x20000108
 8000850:	40003c00 	.word	0x40003c00
 8000854:	00017700 	.word	0x00017700

08000858 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b08e      	sub	sp, #56	; 0x38
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000860:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	605a      	str	r2, [r3, #4]
 800086a:	609a      	str	r2, [r3, #8]
 800086c:	60da      	str	r2, [r3, #12]
 800086e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000870:	f107 0314 	add.w	r3, r7, #20
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	605a      	str	r2, [r3, #4]
 800087a:	609a      	str	r2, [r3, #8]
 800087c:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI3)
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	4a31      	ldr	r2, [pc, #196]	; (8000948 <HAL_I2S_MspInit+0xf0>)
 8000884:	4293      	cmp	r3, r2
 8000886:	d15a      	bne.n	800093e <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000888:	2301      	movs	r3, #1
 800088a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800088c:	23c0      	movs	r3, #192	; 0xc0
 800088e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000890:	2302      	movs	r3, #2
 8000892:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000894:	f107 0314 	add.w	r3, r7, #20
 8000898:	4618      	mov	r0, r3
 800089a:	f004 f9b9 	bl	8004c10 <HAL_RCCEx_PeriphCLKConfig>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 80008a4:	f000 f926 	bl	8000af4 <Error_Handler>
    }

    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80008a8:	2300      	movs	r3, #0
 80008aa:	613b      	str	r3, [r7, #16]
 80008ac:	4b27      	ldr	r3, [pc, #156]	; (800094c <HAL_I2S_MspInit+0xf4>)
 80008ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b0:	4a26      	ldr	r2, [pc, #152]	; (800094c <HAL_I2S_MspInit+0xf4>)
 80008b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008b6:	6413      	str	r3, [r2, #64]	; 0x40
 80008b8:	4b24      	ldr	r3, [pc, #144]	; (800094c <HAL_I2S_MspInit+0xf4>)
 80008ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80008c0:	613b      	str	r3, [r7, #16]
 80008c2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c4:	2300      	movs	r3, #0
 80008c6:	60fb      	str	r3, [r7, #12]
 80008c8:	4b20      	ldr	r3, [pc, #128]	; (800094c <HAL_I2S_MspInit+0xf4>)
 80008ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008cc:	4a1f      	ldr	r2, [pc, #124]	; (800094c <HAL_I2S_MspInit+0xf4>)
 80008ce:	f043 0301 	orr.w	r3, r3, #1
 80008d2:	6313      	str	r3, [r2, #48]	; 0x30
 80008d4:	4b1d      	ldr	r3, [pc, #116]	; (800094c <HAL_I2S_MspInit+0xf4>)
 80008d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d8:	f003 0301 	and.w	r3, r3, #1
 80008dc:	60fb      	str	r3, [r7, #12]
 80008de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e0:	2300      	movs	r3, #0
 80008e2:	60bb      	str	r3, [r7, #8]
 80008e4:	4b19      	ldr	r3, [pc, #100]	; (800094c <HAL_I2S_MspInit+0xf4>)
 80008e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e8:	4a18      	ldr	r2, [pc, #96]	; (800094c <HAL_I2S_MspInit+0xf4>)
 80008ea:	f043 0304 	orr.w	r3, r3, #4
 80008ee:	6313      	str	r3, [r2, #48]	; 0x30
 80008f0:	4b16      	ldr	r3, [pc, #88]	; (800094c <HAL_I2S_MspInit+0xf4>)
 80008f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f4:	f003 0304 	and.w	r3, r3, #4
 80008f8:	60bb      	str	r3, [r7, #8]
 80008fa:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80008fc:	2310      	movs	r3, #16
 80008fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000900:	2302      	movs	r3, #2
 8000902:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000908:	2300      	movs	r3, #0
 800090a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800090c:	2306      	movs	r3, #6
 800090e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000910:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000914:	4619      	mov	r1, r3
 8000916:	480e      	ldr	r0, [pc, #56]	; (8000950 <HAL_I2S_MspInit+0xf8>)
 8000918:	f000 fe22 	bl	8001560 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800091c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000922:	2302      	movs	r3, #2
 8000924:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092a:	2300      	movs	r3, #0
 800092c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800092e:	2306      	movs	r3, #6
 8000930:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000932:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000936:	4619      	mov	r1, r3
 8000938:	4806      	ldr	r0, [pc, #24]	; (8000954 <HAL_I2S_MspInit+0xfc>)
 800093a:	f000 fe11 	bl	8001560 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800093e:	bf00      	nop
 8000940:	3738      	adds	r7, #56	; 0x38
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40003c00 	.word	0x40003c00
 800094c:	40023800 	.word	0x40023800
 8000950:	40020000 	.word	0x40020000
 8000954:	40020800 	.word	0x40020800

08000958 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800095e:	f000 fc57 	bl	8001210 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000962:	f000 f85d 	bl	8000a20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000966:	f7ff fdb1 	bl	80004cc <MX_GPIO_Init>
  MX_I2C1_Init();
 800096a:	f7ff fecf 	bl	800070c <MX_I2C1_Init>
  MX_I2S3_Init();
 800096e:	f7ff ff43 	bl	80007f8 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000972:	f000 f8c5 	bl	8000b00 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000976:	f007 fae7 	bl	8007f48 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 800097a:	f000 f979 	bl	8000c70 <ssd1306_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800097e:	f007 fb09 	bl	8007f94 <MX_USB_HOST_Process>
	uint8_t y = 0;
 8000982:	2300      	movs	r3, #0
 8000984:	71fb      	strb	r3, [r7, #7]
	ssd1306_Fill(Black);
 8000986:	2000      	movs	r0, #0
 8000988:	f000 f9dc 	bl	8000d44 <ssd1306_Fill>

		if (HAL_GPIO_ReadPin (Sensor_GPIO_Port, Sensor_Pin)== 0 ) // Sensor Active
 800098c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000990:	481e      	ldr	r0, [pc, #120]	; (8000a0c <main+0xb4>)
 8000992:	f000 ff81 	bl	8001898 <HAL_GPIO_ReadPin>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d123      	bne.n	80009e4 <main+0x8c>
				{
					HAL_GPIO_WritePin(LED_12_GPIO_Port, LED_12_Pin, GPIO_PIN_SET);
 800099c:	2201      	movs	r2, #1
 800099e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009a2:	481b      	ldr	r0, [pc, #108]	; (8000a10 <main+0xb8>)
 80009a4:	f000 ff90 	bl	80018c8 <HAL_GPIO_WritePin>
					ssd1306_SetCursor(2, y);
 80009a8:	79fb      	ldrb	r3, [r7, #7]
 80009aa:	4619      	mov	r1, r3
 80009ac:	2002      	movs	r0, #2
 80009ae:	f000 fb17 	bl	8000fe0 <ssd1306_SetCursor>
					ssd1306_WriteString("!!!Warning!!!", Font_7x10, White);
 80009b2:	4a18      	ldr	r2, [pc, #96]	; (8000a14 <main+0xbc>)
 80009b4:	2301      	movs	r3, #1
 80009b6:	ca06      	ldmia	r2, {r1, r2}
 80009b8:	4817      	ldr	r0, [pc, #92]	; (8000a18 <main+0xc0>)
 80009ba:	f000 faeb 	bl	8000f94 <ssd1306_WriteString>
					ssd1306_UpdateScreen();
 80009be:	f000 f9e5 	bl	8000d8c <ssd1306_UpdateScreen>
					HAL_GPIO_WritePin(Buzz_GPIO_Port, Buzz_Pin, GPIO_PIN_SET);
 80009c2:	2201      	movs	r2, #1
 80009c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009c8:	4810      	ldr	r0, [pc, #64]	; (8000a0c <main+0xb4>)
 80009ca:	f000 ff7d 	bl	80018c8 <HAL_GPIO_WritePin>
					HAL_Delay(3000);
 80009ce:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80009d2:	f000 fc8f 	bl	80012f4 <HAL_Delay>
					HAL_GPIO_WritePin(Buzz_GPIO_Port, Buzz_Pin, GPIO_PIN_RESET);
 80009d6:	2200      	movs	r2, #0
 80009d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009dc:	480b      	ldr	r0, [pc, #44]	; (8000a0c <main+0xb4>)
 80009de:	f000 ff73 	bl	80018c8 <HAL_GPIO_WritePin>
 80009e2:	e7cc      	b.n	800097e <main+0x26>

						}
		else
				{
					HAL_GPIO_WritePin(LED_12_GPIO_Port, LED_12_Pin, GPIO_PIN_RESET);
 80009e4:	2200      	movs	r2, #0
 80009e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009ea:	4809      	ldr	r0, [pc, #36]	; (8000a10 <main+0xb8>)
 80009ec:	f000 ff6c 	bl	80018c8 <HAL_GPIO_WritePin>
					ssd1306_SetCursor(2, y);
 80009f0:	79fb      	ldrb	r3, [r7, #7]
 80009f2:	4619      	mov	r1, r3
 80009f4:	2002      	movs	r0, #2
 80009f6:	f000 faf3 	bl	8000fe0 <ssd1306_SetCursor>
					ssd1306_WriteString("           Go Back             ", Font_7x10, White);
 80009fa:	4a06      	ldr	r2, [pc, #24]	; (8000a14 <main+0xbc>)
 80009fc:	2301      	movs	r3, #1
 80009fe:	ca06      	ldmia	r2, {r1, r2}
 8000a00:	4806      	ldr	r0, [pc, #24]	; (8000a1c <main+0xc4>)
 8000a02:	f000 fac7 	bl	8000f94 <ssd1306_WriteString>
					ssd1306_UpdateScreen();
 8000a06:	f000 f9c1 	bl	8000d8c <ssd1306_UpdateScreen>
  {
 8000a0a:	e7b8      	b.n	800097e <main+0x26>
 8000a0c:	40020000 	.word	0x40020000
 8000a10:	40020c00 	.word	0x40020c00
 8000a14:	20000000 	.word	0x20000000
 8000a18:	080087f0 	.word	0x080087f0
 8000a1c:	08008800 	.word	0x08008800

08000a20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b094      	sub	sp, #80	; 0x50
 8000a24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a26:	f107 0320 	add.w	r3, r7, #32
 8000a2a:	2230      	movs	r2, #48	; 0x30
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f007 fdcc 	bl	80085cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a34:	f107 030c 	add.w	r3, r7, #12
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	60da      	str	r2, [r3, #12]
 8000a42:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a44:	2300      	movs	r3, #0
 8000a46:	60bb      	str	r3, [r7, #8]
 8000a48:	4b28      	ldr	r3, [pc, #160]	; (8000aec <SystemClock_Config+0xcc>)
 8000a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4c:	4a27      	ldr	r2, [pc, #156]	; (8000aec <SystemClock_Config+0xcc>)
 8000a4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a52:	6413      	str	r3, [r2, #64]	; 0x40
 8000a54:	4b25      	ldr	r3, [pc, #148]	; (8000aec <SystemClock_Config+0xcc>)
 8000a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a5c:	60bb      	str	r3, [r7, #8]
 8000a5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a60:	2300      	movs	r3, #0
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	4b22      	ldr	r3, [pc, #136]	; (8000af0 <SystemClock_Config+0xd0>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a21      	ldr	r2, [pc, #132]	; (8000af0 <SystemClock_Config+0xd0>)
 8000a6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a6e:	6013      	str	r3, [r2, #0]
 8000a70:	4b1f      	ldr	r3, [pc, #124]	; (8000af0 <SystemClock_Config+0xd0>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a78:	607b      	str	r3, [r7, #4]
 8000a7a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a84:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a86:	2302      	movs	r3, #2
 8000a88:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a8a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a90:	2308      	movs	r3, #8
 8000a92:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a94:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a98:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a9e:	2307      	movs	r3, #7
 8000aa0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aa2:	f107 0320 	add.w	r3, r7, #32
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f003 fc2e 	bl	8004308 <HAL_RCC_OscConfig>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000ab2:	f000 f81f 	bl	8000af4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ab6:	230f      	movs	r3, #15
 8000ab8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aba:	2302      	movs	r3, #2
 8000abc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ac2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ac6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ac8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000acc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ace:	f107 030c 	add.w	r3, r7, #12
 8000ad2:	2105      	movs	r1, #5
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f003 fe8f 	bl	80047f8 <HAL_RCC_ClockConfig>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000ae0:	f000 f808 	bl	8000af4 <Error_Handler>
  }
}
 8000ae4:	bf00      	nop
 8000ae6:	3750      	adds	r7, #80	; 0x50
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	40023800 	.word	0x40023800
 8000af0:	40007000 	.word	0x40007000

08000af4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000af8:	b672      	cpsid	i
}
 8000afa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000afc:	e7fe      	b.n	8000afc <Error_Handler+0x8>
	...

08000b00 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000b04:	4b17      	ldr	r3, [pc, #92]	; (8000b64 <MX_SPI1_Init+0x64>)
 8000b06:	4a18      	ldr	r2, [pc, #96]	; (8000b68 <MX_SPI1_Init+0x68>)
 8000b08:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b0a:	4b16      	ldr	r3, [pc, #88]	; (8000b64 <MX_SPI1_Init+0x64>)
 8000b0c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b10:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b12:	4b14      	ldr	r3, [pc, #80]	; (8000b64 <MX_SPI1_Init+0x64>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b18:	4b12      	ldr	r3, [pc, #72]	; (8000b64 <MX_SPI1_Init+0x64>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b1e:	4b11      	ldr	r3, [pc, #68]	; (8000b64 <MX_SPI1_Init+0x64>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b24:	4b0f      	ldr	r3, [pc, #60]	; (8000b64 <MX_SPI1_Init+0x64>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b2a:	4b0e      	ldr	r3, [pc, #56]	; (8000b64 <MX_SPI1_Init+0x64>)
 8000b2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b30:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b32:	4b0c      	ldr	r3, [pc, #48]	; (8000b64 <MX_SPI1_Init+0x64>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b38:	4b0a      	ldr	r3, [pc, #40]	; (8000b64 <MX_SPI1_Init+0x64>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b3e:	4b09      	ldr	r3, [pc, #36]	; (8000b64 <MX_SPI1_Init+0x64>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b44:	4b07      	ldr	r3, [pc, #28]	; (8000b64 <MX_SPI1_Init+0x64>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b4a:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <MX_SPI1_Init+0x64>)
 8000b4c:	220a      	movs	r2, #10
 8000b4e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b50:	4804      	ldr	r0, [pc, #16]	; (8000b64 <MX_SPI1_Init+0x64>)
 8000b52:	f004 f99d 	bl	8004e90 <HAL_SPI_Init>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b5c:	f7ff ffca 	bl	8000af4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b60:	bf00      	nop
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	20000150 	.word	0x20000150
 8000b68:	40013000 	.word	0x40013000

08000b6c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b08a      	sub	sp, #40	; 0x28
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b74:	f107 0314 	add.w	r3, r7, #20
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
 8000b80:	60da      	str	r2, [r3, #12]
 8000b82:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a19      	ldr	r2, [pc, #100]	; (8000bf0 <HAL_SPI_MspInit+0x84>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d12b      	bne.n	8000be6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	613b      	str	r3, [r7, #16]
 8000b92:	4b18      	ldr	r3, [pc, #96]	; (8000bf4 <HAL_SPI_MspInit+0x88>)
 8000b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b96:	4a17      	ldr	r2, [pc, #92]	; (8000bf4 <HAL_SPI_MspInit+0x88>)
 8000b98:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b9e:	4b15      	ldr	r3, [pc, #84]	; (8000bf4 <HAL_SPI_MspInit+0x88>)
 8000ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ba2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ba6:	613b      	str	r3, [r7, #16]
 8000ba8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	60fb      	str	r3, [r7, #12]
 8000bae:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <HAL_SPI_MspInit+0x88>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	4a10      	ldr	r2, [pc, #64]	; (8000bf4 <HAL_SPI_MspInit+0x88>)
 8000bb4:	f043 0301 	orr.w	r3, r3, #1
 8000bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bba:	4b0e      	ldr	r3, [pc, #56]	; (8000bf4 <HAL_SPI_MspInit+0x88>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	f003 0301 	and.w	r3, r3, #1
 8000bc2:	60fb      	str	r3, [r7, #12]
 8000bc4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000bc6:	23e0      	movs	r3, #224	; 0xe0
 8000bc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bca:	2302      	movs	r3, #2
 8000bcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bd6:	2305      	movs	r3, #5
 8000bd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bda:	f107 0314 	add.w	r3, r7, #20
 8000bde:	4619      	mov	r1, r3
 8000be0:	4805      	ldr	r0, [pc, #20]	; (8000bf8 <HAL_SPI_MspInit+0x8c>)
 8000be2:	f000 fcbd 	bl	8001560 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000be6:	bf00      	nop
 8000be8:	3728      	adds	r7, #40	; 0x28
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40013000 	.word	0x40013000
 8000bf4:	40023800 	.word	0x40023800
 8000bf8:	40020000 	.word	0x40020000

08000bfc <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8000c00:	bf00      	nop
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
	...

08000c0c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b086      	sub	sp, #24
 8000c10:	af04      	add	r7, sp, #16
 8000c12:	4603      	mov	r3, r0
 8000c14:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000c16:	f04f 33ff 	mov.w	r3, #4294967295
 8000c1a:	9302      	str	r3, [sp, #8]
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	9301      	str	r3, [sp, #4]
 8000c20:	1dfb      	adds	r3, r7, #7
 8000c22:	9300      	str	r3, [sp, #0]
 8000c24:	2301      	movs	r3, #1
 8000c26:	2200      	movs	r2, #0
 8000c28:	2178      	movs	r1, #120	; 0x78
 8000c2a:	4803      	ldr	r0, [pc, #12]	; (8000c38 <ssd1306_WriteCommand+0x2c>)
 8000c2c:	f002 fbb4 	bl	8003398 <HAL_I2C_Mem_Write>
}
 8000c30:	bf00      	nop
 8000c32:	3708      	adds	r7, #8
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	200000b4 	.word	0x200000b4

08000c3c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b086      	sub	sp, #24
 8000c40:	af04      	add	r7, sp, #16
 8000c42:	6078      	str	r0, [r7, #4]
 8000c44:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	b29b      	uxth	r3, r3
 8000c4a:	f04f 32ff 	mov.w	r2, #4294967295
 8000c4e:	9202      	str	r2, [sp, #8]
 8000c50:	9301      	str	r3, [sp, #4]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	9300      	str	r3, [sp, #0]
 8000c56:	2301      	movs	r3, #1
 8000c58:	2240      	movs	r2, #64	; 0x40
 8000c5a:	2178      	movs	r1, #120	; 0x78
 8000c5c:	4803      	ldr	r0, [pc, #12]	; (8000c6c <ssd1306_WriteData+0x30>)
 8000c5e:	f002 fb9b 	bl	8003398 <HAL_I2C_Mem_Write>
}
 8000c62:	bf00      	nop
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	200000b4 	.word	0x200000b4

08000c70 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000c74:	f7ff ffc2 	bl	8000bfc <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000c78:	2064      	movs	r0, #100	; 0x64
 8000c7a:	f000 fb3b 	bl	80012f4 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000c7e:	2000      	movs	r0, #0
 8000c80:	f000 f9da 	bl	8001038 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000c84:	2020      	movs	r0, #32
 8000c86:	f7ff ffc1 	bl	8000c0c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000c8a:	2000      	movs	r0, #0
 8000c8c:	f7ff ffbe 	bl	8000c0c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000c90:	20b0      	movs	r0, #176	; 0xb0
 8000c92:	f7ff ffbb 	bl	8000c0c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000c96:	20c8      	movs	r0, #200	; 0xc8
 8000c98:	f7ff ffb8 	bl	8000c0c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000c9c:	2000      	movs	r0, #0
 8000c9e:	f7ff ffb5 	bl	8000c0c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000ca2:	2010      	movs	r0, #16
 8000ca4:	f7ff ffb2 	bl	8000c0c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000ca8:	2040      	movs	r0, #64	; 0x40
 8000caa:	f7ff ffaf 	bl	8000c0c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8000cae:	20ff      	movs	r0, #255	; 0xff
 8000cb0:	f000 f9ae 	bl	8001010 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000cb4:	20a1      	movs	r0, #161	; 0xa1
 8000cb6:	f7ff ffa9 	bl	8000c0c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000cba:	20a6      	movs	r0, #166	; 0xa6
 8000cbc:	f7ff ffa6 	bl	8000c0c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000cc0:	20a8      	movs	r0, #168	; 0xa8
 8000cc2:	f7ff ffa3 	bl	8000c0c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8000cc6:	203f      	movs	r0, #63	; 0x3f
 8000cc8:	f7ff ffa0 	bl	8000c0c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000ccc:	20a4      	movs	r0, #164	; 0xa4
 8000cce:	f7ff ff9d 	bl	8000c0c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000cd2:	20d3      	movs	r0, #211	; 0xd3
 8000cd4:	f7ff ff9a 	bl	8000c0c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000cd8:	2000      	movs	r0, #0
 8000cda:	f7ff ff97 	bl	8000c0c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000cde:	20d5      	movs	r0, #213	; 0xd5
 8000ce0:	f7ff ff94 	bl	8000c0c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000ce4:	20f0      	movs	r0, #240	; 0xf0
 8000ce6:	f7ff ff91 	bl	8000c0c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000cea:	20d9      	movs	r0, #217	; 0xd9
 8000cec:	f7ff ff8e 	bl	8000c0c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000cf0:	2022      	movs	r0, #34	; 0x22
 8000cf2:	f7ff ff8b 	bl	8000c0c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000cf6:	20da      	movs	r0, #218	; 0xda
 8000cf8:	f7ff ff88 	bl	8000c0c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8000cfc:	2012      	movs	r0, #18
 8000cfe:	f7ff ff85 	bl	8000c0c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8000d02:	20db      	movs	r0, #219	; 0xdb
 8000d04:	f7ff ff82 	bl	8000c0c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000d08:	2020      	movs	r0, #32
 8000d0a:	f7ff ff7f 	bl	8000c0c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000d0e:	208d      	movs	r0, #141	; 0x8d
 8000d10:	f7ff ff7c 	bl	8000c0c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000d14:	2014      	movs	r0, #20
 8000d16:	f7ff ff79 	bl	8000c0c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8000d1a:	2001      	movs	r0, #1
 8000d1c:	f000 f98c 	bl	8001038 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8000d20:	2000      	movs	r0, #0
 8000d22:	f000 f80f 	bl	8000d44 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8000d26:	f000 f831 	bl	8000d8c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000d2a:	4b05      	ldr	r3, [pc, #20]	; (8000d40 <ssd1306_Init+0xd0>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000d30:	4b03      	ldr	r3, [pc, #12]	; (8000d40 <ssd1306_Init+0xd0>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8000d36:	4b02      	ldr	r3, [pc, #8]	; (8000d40 <ssd1306_Init+0xd0>)
 8000d38:	2201      	movs	r2, #1
 8000d3a:	711a      	strb	r2, [r3, #4]
}
 8000d3c:	bf00      	nop
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	200005a8 	.word	0x200005a8

08000d44 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8000d44:	b480      	push	{r7}
 8000d46:	b085      	sub	sp, #20
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000d4e:	2300      	movs	r3, #0
 8000d50:	60fb      	str	r3, [r7, #12]
 8000d52:	e00d      	b.n	8000d70 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000d54:	79fb      	ldrb	r3, [r7, #7]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d101      	bne.n	8000d5e <ssd1306_Fill+0x1a>
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	e000      	b.n	8000d60 <ssd1306_Fill+0x1c>
 8000d5e:	21ff      	movs	r1, #255	; 0xff
 8000d60:	4a09      	ldr	r2, [pc, #36]	; (8000d88 <ssd1306_Fill+0x44>)
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	4413      	add	r3, r2
 8000d66:	460a      	mov	r2, r1
 8000d68:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d76:	d3ed      	bcc.n	8000d54 <ssd1306_Fill+0x10>
    }
}
 8000d78:	bf00      	nop
 8000d7a:	bf00      	nop
 8000d7c:	3714      	adds	r7, #20
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	200001a8 	.word	0x200001a8

08000d8c <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000d92:	2300      	movs	r3, #0
 8000d94:	71fb      	strb	r3, [r7, #7]
 8000d96:	e016      	b.n	8000dc6 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000d98:	79fb      	ldrb	r3, [r7, #7]
 8000d9a:	3b50      	subs	r3, #80	; 0x50
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f7ff ff34 	bl	8000c0c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8000da4:	2000      	movs	r0, #0
 8000da6:	f7ff ff31 	bl	8000c0c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8000daa:	2010      	movs	r0, #16
 8000dac:	f7ff ff2e 	bl	8000c0c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000db0:	79fb      	ldrb	r3, [r7, #7]
 8000db2:	01db      	lsls	r3, r3, #7
 8000db4:	4a08      	ldr	r2, [pc, #32]	; (8000dd8 <ssd1306_UpdateScreen+0x4c>)
 8000db6:	4413      	add	r3, r2
 8000db8:	2180      	movs	r1, #128	; 0x80
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f7ff ff3e 	bl	8000c3c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000dc0:	79fb      	ldrb	r3, [r7, #7]
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	71fb      	strb	r3, [r7, #7]
 8000dc6:	79fb      	ldrb	r3, [r7, #7]
 8000dc8:	2b07      	cmp	r3, #7
 8000dca:	d9e5      	bls.n	8000d98 <ssd1306_UpdateScreen+0xc>
    }
}
 8000dcc:	bf00      	nop
 8000dce:	bf00      	nop
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	200001a8 	.word	0x200001a8

08000ddc <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	71fb      	strb	r3, [r7, #7]
 8000de6:	460b      	mov	r3, r1
 8000de8:	71bb      	strb	r3, [r7, #6]
 8000dea:	4613      	mov	r3, r2
 8000dec:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	db3d      	blt.n	8000e72 <ssd1306_DrawPixel+0x96>
 8000df6:	79bb      	ldrb	r3, [r7, #6]
 8000df8:	2b3f      	cmp	r3, #63	; 0x3f
 8000dfa:	d83a      	bhi.n	8000e72 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8000dfc:	797b      	ldrb	r3, [r7, #5]
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d11a      	bne.n	8000e38 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000e02:	79fa      	ldrb	r2, [r7, #7]
 8000e04:	79bb      	ldrb	r3, [r7, #6]
 8000e06:	08db      	lsrs	r3, r3, #3
 8000e08:	b2d8      	uxtb	r0, r3
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	01db      	lsls	r3, r3, #7
 8000e0e:	4413      	add	r3, r2
 8000e10:	4a1b      	ldr	r2, [pc, #108]	; (8000e80 <ssd1306_DrawPixel+0xa4>)
 8000e12:	5cd3      	ldrb	r3, [r2, r3]
 8000e14:	b25a      	sxtb	r2, r3
 8000e16:	79bb      	ldrb	r3, [r7, #6]
 8000e18:	f003 0307 	and.w	r3, r3, #7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e22:	b25b      	sxtb	r3, r3
 8000e24:	4313      	orrs	r3, r2
 8000e26:	b259      	sxtb	r1, r3
 8000e28:	79fa      	ldrb	r2, [r7, #7]
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	01db      	lsls	r3, r3, #7
 8000e2e:	4413      	add	r3, r2
 8000e30:	b2c9      	uxtb	r1, r1
 8000e32:	4a13      	ldr	r2, [pc, #76]	; (8000e80 <ssd1306_DrawPixel+0xa4>)
 8000e34:	54d1      	strb	r1, [r2, r3]
 8000e36:	e01d      	b.n	8000e74 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000e38:	79fa      	ldrb	r2, [r7, #7]
 8000e3a:	79bb      	ldrb	r3, [r7, #6]
 8000e3c:	08db      	lsrs	r3, r3, #3
 8000e3e:	b2d8      	uxtb	r0, r3
 8000e40:	4603      	mov	r3, r0
 8000e42:	01db      	lsls	r3, r3, #7
 8000e44:	4413      	add	r3, r2
 8000e46:	4a0e      	ldr	r2, [pc, #56]	; (8000e80 <ssd1306_DrawPixel+0xa4>)
 8000e48:	5cd3      	ldrb	r3, [r2, r3]
 8000e4a:	b25a      	sxtb	r2, r3
 8000e4c:	79bb      	ldrb	r3, [r7, #6]
 8000e4e:	f003 0307 	and.w	r3, r3, #7
 8000e52:	2101      	movs	r1, #1
 8000e54:	fa01 f303 	lsl.w	r3, r1, r3
 8000e58:	b25b      	sxtb	r3, r3
 8000e5a:	43db      	mvns	r3, r3
 8000e5c:	b25b      	sxtb	r3, r3
 8000e5e:	4013      	ands	r3, r2
 8000e60:	b259      	sxtb	r1, r3
 8000e62:	79fa      	ldrb	r2, [r7, #7]
 8000e64:	4603      	mov	r3, r0
 8000e66:	01db      	lsls	r3, r3, #7
 8000e68:	4413      	add	r3, r2
 8000e6a:	b2c9      	uxtb	r1, r1
 8000e6c:	4a04      	ldr	r2, [pc, #16]	; (8000e80 <ssd1306_DrawPixel+0xa4>)
 8000e6e:	54d1      	strb	r1, [r2, r3]
 8000e70:	e000      	b.n	8000e74 <ssd1306_DrawPixel+0x98>
        return;
 8000e72:	bf00      	nop
    }
}
 8000e74:	370c      	adds	r7, #12
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	200001a8 	.word	0x200001a8

08000e84 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8000e84:	b590      	push	{r4, r7, lr}
 8000e86:	b089      	sub	sp, #36	; 0x24
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	4604      	mov	r4, r0
 8000e8c:	1d38      	adds	r0, r7, #4
 8000e8e:	e880 0006 	stmia.w	r0, {r1, r2}
 8000e92:	461a      	mov	r2, r3
 8000e94:	4623      	mov	r3, r4
 8000e96:	73fb      	strb	r3, [r7, #15]
 8000e98:	4613      	mov	r3, r2
 8000e9a:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8000e9c:	7bfb      	ldrb	r3, [r7, #15]
 8000e9e:	2b1f      	cmp	r3, #31
 8000ea0:	d902      	bls.n	8000ea8 <ssd1306_WriteChar+0x24>
 8000ea2:	7bfb      	ldrb	r3, [r7, #15]
 8000ea4:	2b7e      	cmp	r3, #126	; 0x7e
 8000ea6:	d901      	bls.n	8000eac <ssd1306_WriteChar+0x28>
        return 0;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	e06d      	b.n	8000f88 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000eac:	4b38      	ldr	r3, [pc, #224]	; (8000f90 <ssd1306_WriteChar+0x10c>)
 8000eae:	881b      	ldrh	r3, [r3, #0]
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	793b      	ldrb	r3, [r7, #4]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	2b80      	cmp	r3, #128	; 0x80
 8000eb8:	dc06      	bgt.n	8000ec8 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8000eba:	4b35      	ldr	r3, [pc, #212]	; (8000f90 <ssd1306_WriteChar+0x10c>)
 8000ebc:	885b      	ldrh	r3, [r3, #2]
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	797b      	ldrb	r3, [r7, #5]
 8000ec2:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000ec4:	2b40      	cmp	r3, #64	; 0x40
 8000ec6:	dd01      	ble.n	8000ecc <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	e05d      	b.n	8000f88 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8000ecc:	2300      	movs	r3, #0
 8000ece:	61fb      	str	r3, [r7, #28]
 8000ed0:	e04c      	b.n	8000f6c <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8000ed2:	68ba      	ldr	r2, [r7, #8]
 8000ed4:	7bfb      	ldrb	r3, [r7, #15]
 8000ed6:	3b20      	subs	r3, #32
 8000ed8:	7979      	ldrb	r1, [r7, #5]
 8000eda:	fb01 f303 	mul.w	r3, r1, r3
 8000ede:	4619      	mov	r1, r3
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	440b      	add	r3, r1
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	4413      	add	r3, r2
 8000ee8:	881b      	ldrh	r3, [r3, #0]
 8000eea:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8000eec:	2300      	movs	r3, #0
 8000eee:	61bb      	str	r3, [r7, #24]
 8000ef0:	e034      	b.n	8000f5c <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8000ef2:	697a      	ldr	r2, [r7, #20]
 8000ef4:	69bb      	ldr	r3, [r7, #24]
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d012      	beq.n	8000f28 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000f02:	4b23      	ldr	r3, [pc, #140]	; (8000f90 <ssd1306_WriteChar+0x10c>)
 8000f04:	881b      	ldrh	r3, [r3, #0]
 8000f06:	b2da      	uxtb	r2, r3
 8000f08:	69bb      	ldr	r3, [r7, #24]
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	4413      	add	r3, r2
 8000f0e:	b2d8      	uxtb	r0, r3
 8000f10:	4b1f      	ldr	r3, [pc, #124]	; (8000f90 <ssd1306_WriteChar+0x10c>)
 8000f12:	885b      	ldrh	r3, [r3, #2]
 8000f14:	b2da      	uxtb	r2, r3
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	4413      	add	r3, r2
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	7bba      	ldrb	r2, [r7, #14]
 8000f20:	4619      	mov	r1, r3
 8000f22:	f7ff ff5b 	bl	8000ddc <ssd1306_DrawPixel>
 8000f26:	e016      	b.n	8000f56 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000f28:	4b19      	ldr	r3, [pc, #100]	; (8000f90 <ssd1306_WriteChar+0x10c>)
 8000f2a:	881b      	ldrh	r3, [r3, #0]
 8000f2c:	b2da      	uxtb	r2, r3
 8000f2e:	69bb      	ldr	r3, [r7, #24]
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	4413      	add	r3, r2
 8000f34:	b2d8      	uxtb	r0, r3
 8000f36:	4b16      	ldr	r3, [pc, #88]	; (8000f90 <ssd1306_WriteChar+0x10c>)
 8000f38:	885b      	ldrh	r3, [r3, #2]
 8000f3a:	b2da      	uxtb	r2, r3
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	4413      	add	r3, r2
 8000f42:	b2d9      	uxtb	r1, r3
 8000f44:	7bbb      	ldrb	r3, [r7, #14]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	bf0c      	ite	eq
 8000f4a:	2301      	moveq	r3, #1
 8000f4c:	2300      	movne	r3, #0
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	461a      	mov	r2, r3
 8000f52:	f7ff ff43 	bl	8000ddc <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8000f56:	69bb      	ldr	r3, [r7, #24]
 8000f58:	3301      	adds	r3, #1
 8000f5a:	61bb      	str	r3, [r7, #24]
 8000f5c:	793b      	ldrb	r3, [r7, #4]
 8000f5e:	461a      	mov	r2, r3
 8000f60:	69bb      	ldr	r3, [r7, #24]
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d3c5      	bcc.n	8000ef2 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	61fb      	str	r3, [r7, #28]
 8000f6c:	797b      	ldrb	r3, [r7, #5]
 8000f6e:	461a      	mov	r2, r3
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d3ad      	bcc.n	8000ed2 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8000f76:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <ssd1306_WriteChar+0x10c>)
 8000f78:	881a      	ldrh	r2, [r3, #0]
 8000f7a:	793b      	ldrb	r3, [r7, #4]
 8000f7c:	b29b      	uxth	r3, r3
 8000f7e:	4413      	add	r3, r2
 8000f80:	b29a      	uxth	r2, r3
 8000f82:	4b03      	ldr	r3, [pc, #12]	; (8000f90 <ssd1306_WriteChar+0x10c>)
 8000f84:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8000f86:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3724      	adds	r7, #36	; 0x24
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd90      	pop	{r4, r7, pc}
 8000f90:	200005a8 	.word	0x200005a8

08000f94 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	60f8      	str	r0, [r7, #12]
 8000f9c:	1d38      	adds	r0, r7, #4
 8000f9e:	e880 0006 	stmia.w	r0, {r1, r2}
 8000fa2:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8000fa4:	e012      	b.n	8000fcc <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	7818      	ldrb	r0, [r3, #0]
 8000faa:	78fb      	ldrb	r3, [r7, #3]
 8000fac:	1d3a      	adds	r2, r7, #4
 8000fae:	ca06      	ldmia	r2, {r1, r2}
 8000fb0:	f7ff ff68 	bl	8000e84 <ssd1306_WriteChar>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	d002      	beq.n	8000fc6 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	e008      	b.n	8000fd8 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d1e8      	bne.n	8000fa6 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	781b      	ldrb	r3, [r3, #0]
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3710      	adds	r7, #16
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	460a      	mov	r2, r1
 8000fea:	71fb      	strb	r3, [r7, #7]
 8000fec:	4613      	mov	r3, r2
 8000fee:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8000ff0:	79fb      	ldrb	r3, [r7, #7]
 8000ff2:	b29a      	uxth	r2, r3
 8000ff4:	4b05      	ldr	r3, [pc, #20]	; (800100c <ssd1306_SetCursor+0x2c>)
 8000ff6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8000ff8:	79bb      	ldrb	r3, [r7, #6]
 8000ffa:	b29a      	uxth	r2, r3
 8000ffc:	4b03      	ldr	r3, [pc, #12]	; (800100c <ssd1306_SetCursor+0x2c>)
 8000ffe:	805a      	strh	r2, [r3, #2]
}
 8001000:	bf00      	nop
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	200005a8 	.word	0x200005a8

08001010 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800101a:	2381      	movs	r3, #129	; 0x81
 800101c:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800101e:	7bfb      	ldrb	r3, [r7, #15]
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff fdf3 	bl	8000c0c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001026:	79fb      	ldrb	r3, [r7, #7]
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff fdef 	bl	8000c0c <ssd1306_WriteCommand>
}
 800102e:	bf00      	nop
 8001030:	3710      	adds	r7, #16
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
	...

08001038 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d005      	beq.n	8001054 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001048:	23af      	movs	r3, #175	; 0xaf
 800104a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 800104c:	4b08      	ldr	r3, [pc, #32]	; (8001070 <ssd1306_SetDisplayOn+0x38>)
 800104e:	2201      	movs	r2, #1
 8001050:	715a      	strb	r2, [r3, #5]
 8001052:	e004      	b.n	800105e <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001054:	23ae      	movs	r3, #174	; 0xae
 8001056:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001058:	4b05      	ldr	r3, [pc, #20]	; (8001070 <ssd1306_SetDisplayOn+0x38>)
 800105a:	2200      	movs	r2, #0
 800105c:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800105e:	7bfb      	ldrb	r3, [r7, #15]
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff fdd3 	bl	8000c0c <ssd1306_WriteCommand>
}
 8001066:	bf00      	nop
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	200005a8 	.word	0x200005a8

08001074 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	607b      	str	r3, [r7, #4]
 800107e:	4b10      	ldr	r3, [pc, #64]	; (80010c0 <HAL_MspInit+0x4c>)
 8001080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001082:	4a0f      	ldr	r2, [pc, #60]	; (80010c0 <HAL_MspInit+0x4c>)
 8001084:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001088:	6453      	str	r3, [r2, #68]	; 0x44
 800108a:	4b0d      	ldr	r3, [pc, #52]	; (80010c0 <HAL_MspInit+0x4c>)
 800108c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001092:	607b      	str	r3, [r7, #4]
 8001094:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	603b      	str	r3, [r7, #0]
 800109a:	4b09      	ldr	r3, [pc, #36]	; (80010c0 <HAL_MspInit+0x4c>)
 800109c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109e:	4a08      	ldr	r2, [pc, #32]	; (80010c0 <HAL_MspInit+0x4c>)
 80010a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010a4:	6413      	str	r3, [r2, #64]	; 0x40
 80010a6:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <HAL_MspInit+0x4c>)
 80010a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ae:	603b      	str	r3, [r7, #0]
 80010b0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80010b2:	2007      	movs	r0, #7
 80010b4:	f000 fa12 	bl	80014dc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010b8:	bf00      	nop
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	40023800 	.word	0x40023800

080010c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010c8:	e7fe      	b.n	80010c8 <NMI_Handler+0x4>

080010ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ca:	b480      	push	{r7}
 80010cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ce:	e7fe      	b.n	80010ce <HardFault_Handler+0x4>

080010d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010d4:	e7fe      	b.n	80010d4 <MemManage_Handler+0x4>

080010d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010d6:	b480      	push	{r7}
 80010d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010da:	e7fe      	b.n	80010da <BusFault_Handler+0x4>

080010dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010e0:	e7fe      	b.n	80010e0 <UsageFault_Handler+0x4>

080010e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010e2:	b480      	push	{r7}
 80010e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010e6:	bf00      	nop
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr

080010f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr

080010fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010fe:	b480      	push	{r7}
 8001100:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001102:	bf00      	nop
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001110:	f000 f8d0 	bl	80012b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001114:	bf00      	nop
 8001116:	bd80      	pop	{r7, pc}

08001118 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800111c:	4802      	ldr	r0, [pc, #8]	; (8001128 <OTG_FS_IRQHandler+0x10>)
 800111e:	f000 fe57 	bl	8001dd0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	20000994 	.word	0x20000994

0800112c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b086      	sub	sp, #24
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001134:	4a14      	ldr	r2, [pc, #80]	; (8001188 <_sbrk+0x5c>)
 8001136:	4b15      	ldr	r3, [pc, #84]	; (800118c <_sbrk+0x60>)
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001140:	4b13      	ldr	r3, [pc, #76]	; (8001190 <_sbrk+0x64>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d102      	bne.n	800114e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001148:	4b11      	ldr	r3, [pc, #68]	; (8001190 <_sbrk+0x64>)
 800114a:	4a12      	ldr	r2, [pc, #72]	; (8001194 <_sbrk+0x68>)
 800114c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800114e:	4b10      	ldr	r3, [pc, #64]	; (8001190 <_sbrk+0x64>)
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4413      	add	r3, r2
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	429a      	cmp	r2, r3
 800115a:	d207      	bcs.n	800116c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800115c:	f007 f9fc 	bl	8008558 <__errno>
 8001160:	4603      	mov	r3, r0
 8001162:	220c      	movs	r2, #12
 8001164:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001166:	f04f 33ff 	mov.w	r3, #4294967295
 800116a:	e009      	b.n	8001180 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800116c:	4b08      	ldr	r3, [pc, #32]	; (8001190 <_sbrk+0x64>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001172:	4b07      	ldr	r3, [pc, #28]	; (8001190 <_sbrk+0x64>)
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4413      	add	r3, r2
 800117a:	4a05      	ldr	r2, [pc, #20]	; (8001190 <_sbrk+0x64>)
 800117c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800117e:	68fb      	ldr	r3, [r7, #12]
}
 8001180:	4618      	mov	r0, r3
 8001182:	3718      	adds	r7, #24
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	20020000 	.word	0x20020000
 800118c:	00000400 	.word	0x00000400
 8001190:	200005b0 	.word	0x200005b0
 8001194:	20000ca8 	.word	0x20000ca8

08001198 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800119c:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <SystemInit+0x20>)
 800119e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011a2:	4a05      	ldr	r2, [pc, #20]	; (80011b8 <SystemInit+0x20>)
 80011a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011ac:	bf00      	nop
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	e000ed00 	.word	0xe000ed00

080011bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80011bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011c0:	480d      	ldr	r0, [pc, #52]	; (80011f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011c2:	490e      	ldr	r1, [pc, #56]	; (80011fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011c4:	4a0e      	ldr	r2, [pc, #56]	; (8001200 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011c8:	e002      	b.n	80011d0 <LoopCopyDataInit>

080011ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ce:	3304      	adds	r3, #4

080011d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011d4:	d3f9      	bcc.n	80011ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011d6:	4a0b      	ldr	r2, [pc, #44]	; (8001204 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011d8:	4c0b      	ldr	r4, [pc, #44]	; (8001208 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011dc:	e001      	b.n	80011e2 <LoopFillZerobss>

080011de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011e0:	3204      	adds	r2, #4

080011e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011e4:	d3fb      	bcc.n	80011de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011e6:	f7ff ffd7 	bl	8001198 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011ea:	f007 f9bb 	bl	8008564 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011ee:	f7ff fbb3 	bl	8000958 <main>
  bx  lr    
 80011f2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80011f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011fc:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8001200:	08008fb8 	.word	0x08008fb8
  ldr r2, =_sbss
 8001204:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8001208:	20000ca8 	.word	0x20000ca8

0800120c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800120c:	e7fe      	b.n	800120c <ADC_IRQHandler>
	...

08001210 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001214:	4b0e      	ldr	r3, [pc, #56]	; (8001250 <HAL_Init+0x40>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a0d      	ldr	r2, [pc, #52]	; (8001250 <HAL_Init+0x40>)
 800121a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800121e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001220:	4b0b      	ldr	r3, [pc, #44]	; (8001250 <HAL_Init+0x40>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a0a      	ldr	r2, [pc, #40]	; (8001250 <HAL_Init+0x40>)
 8001226:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800122a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800122c:	4b08      	ldr	r3, [pc, #32]	; (8001250 <HAL_Init+0x40>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a07      	ldr	r2, [pc, #28]	; (8001250 <HAL_Init+0x40>)
 8001232:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001236:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001238:	2003      	movs	r0, #3
 800123a:	f000 f94f 	bl	80014dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800123e:	2000      	movs	r0, #0
 8001240:	f000 f808 	bl	8001254 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001244:	f7ff ff16 	bl	8001074 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001248:	2300      	movs	r3, #0
}
 800124a:	4618      	mov	r0, r3
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40023c00 	.word	0x40023c00

08001254 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800125c:	4b12      	ldr	r3, [pc, #72]	; (80012a8 <HAL_InitTick+0x54>)
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	4b12      	ldr	r3, [pc, #72]	; (80012ac <HAL_InitTick+0x58>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	4619      	mov	r1, r3
 8001266:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800126a:	fbb3 f3f1 	udiv	r3, r3, r1
 800126e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001272:	4618      	mov	r0, r3
 8001274:	f000 f967 	bl	8001546 <HAL_SYSTICK_Config>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e00e      	b.n	80012a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2b0f      	cmp	r3, #15
 8001286:	d80a      	bhi.n	800129e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001288:	2200      	movs	r2, #0
 800128a:	6879      	ldr	r1, [r7, #4]
 800128c:	f04f 30ff 	mov.w	r0, #4294967295
 8001290:	f000 f92f 	bl	80014f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001294:	4a06      	ldr	r2, [pc, #24]	; (80012b0 <HAL_InitTick+0x5c>)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800129a:	2300      	movs	r3, #0
 800129c:	e000      	b.n	80012a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	20000008 	.word	0x20000008
 80012ac:	20000010 	.word	0x20000010
 80012b0:	2000000c 	.word	0x2000000c

080012b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012b8:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <HAL_IncTick+0x20>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	461a      	mov	r2, r3
 80012be:	4b06      	ldr	r3, [pc, #24]	; (80012d8 <HAL_IncTick+0x24>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4413      	add	r3, r2
 80012c4:	4a04      	ldr	r2, [pc, #16]	; (80012d8 <HAL_IncTick+0x24>)
 80012c6:	6013      	str	r3, [r2, #0]
}
 80012c8:	bf00      	nop
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	20000010 	.word	0x20000010
 80012d8:	200005b4 	.word	0x200005b4

080012dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  return uwTick;
 80012e0:	4b03      	ldr	r3, [pc, #12]	; (80012f0 <HAL_GetTick+0x14>)
 80012e2:	681b      	ldr	r3, [r3, #0]
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	200005b4 	.word	0x200005b4

080012f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012fc:	f7ff ffee 	bl	80012dc <HAL_GetTick>
 8001300:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800130c:	d005      	beq.n	800131a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800130e:	4b0a      	ldr	r3, [pc, #40]	; (8001338 <HAL_Delay+0x44>)
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	461a      	mov	r2, r3
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	4413      	add	r3, r2
 8001318:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800131a:	bf00      	nop
 800131c:	f7ff ffde 	bl	80012dc <HAL_GetTick>
 8001320:	4602      	mov	r2, r0
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	68fa      	ldr	r2, [r7, #12]
 8001328:	429a      	cmp	r2, r3
 800132a:	d8f7      	bhi.n	800131c <HAL_Delay+0x28>
  {
  }
}
 800132c:	bf00      	nop
 800132e:	bf00      	nop
 8001330:	3710      	adds	r7, #16
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	20000010 	.word	0x20000010

0800133c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800133c:	b480      	push	{r7}
 800133e:	b085      	sub	sp, #20
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f003 0307 	and.w	r3, r3, #7
 800134a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800134c:	4b0c      	ldr	r3, [pc, #48]	; (8001380 <__NVIC_SetPriorityGrouping+0x44>)
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001352:	68ba      	ldr	r2, [r7, #8]
 8001354:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001358:	4013      	ands	r3, r2
 800135a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001364:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001368:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800136c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800136e:	4a04      	ldr	r2, [pc, #16]	; (8001380 <__NVIC_SetPriorityGrouping+0x44>)
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	60d3      	str	r3, [r2, #12]
}
 8001374:	bf00      	nop
 8001376:	3714      	adds	r7, #20
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	e000ed00 	.word	0xe000ed00

08001384 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001388:	4b04      	ldr	r3, [pc, #16]	; (800139c <__NVIC_GetPriorityGrouping+0x18>)
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	0a1b      	lsrs	r3, r3, #8
 800138e:	f003 0307 	and.w	r3, r3, #7
}
 8001392:	4618      	mov	r0, r3
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr
 800139c:	e000ed00 	.word	0xe000ed00

080013a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	db0b      	blt.n	80013ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013b2:	79fb      	ldrb	r3, [r7, #7]
 80013b4:	f003 021f 	and.w	r2, r3, #31
 80013b8:	4907      	ldr	r1, [pc, #28]	; (80013d8 <__NVIC_EnableIRQ+0x38>)
 80013ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013be:	095b      	lsrs	r3, r3, #5
 80013c0:	2001      	movs	r0, #1
 80013c2:	fa00 f202 	lsl.w	r2, r0, r2
 80013c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013ca:	bf00      	nop
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	e000e100 	.word	0xe000e100

080013dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	6039      	str	r1, [r7, #0]
 80013e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	db0a      	blt.n	8001406 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	b2da      	uxtb	r2, r3
 80013f4:	490c      	ldr	r1, [pc, #48]	; (8001428 <__NVIC_SetPriority+0x4c>)
 80013f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fa:	0112      	lsls	r2, r2, #4
 80013fc:	b2d2      	uxtb	r2, r2
 80013fe:	440b      	add	r3, r1
 8001400:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001404:	e00a      	b.n	800141c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	b2da      	uxtb	r2, r3
 800140a:	4908      	ldr	r1, [pc, #32]	; (800142c <__NVIC_SetPriority+0x50>)
 800140c:	79fb      	ldrb	r3, [r7, #7]
 800140e:	f003 030f 	and.w	r3, r3, #15
 8001412:	3b04      	subs	r3, #4
 8001414:	0112      	lsls	r2, r2, #4
 8001416:	b2d2      	uxtb	r2, r2
 8001418:	440b      	add	r3, r1
 800141a:	761a      	strb	r2, [r3, #24]
}
 800141c:	bf00      	nop
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr
 8001428:	e000e100 	.word	0xe000e100
 800142c:	e000ed00 	.word	0xe000ed00

08001430 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001430:	b480      	push	{r7}
 8001432:	b089      	sub	sp, #36	; 0x24
 8001434:	af00      	add	r7, sp, #0
 8001436:	60f8      	str	r0, [r7, #12]
 8001438:	60b9      	str	r1, [r7, #8]
 800143a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	f003 0307 	and.w	r3, r3, #7
 8001442:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	f1c3 0307 	rsb	r3, r3, #7
 800144a:	2b04      	cmp	r3, #4
 800144c:	bf28      	it	cs
 800144e:	2304      	movcs	r3, #4
 8001450:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	3304      	adds	r3, #4
 8001456:	2b06      	cmp	r3, #6
 8001458:	d902      	bls.n	8001460 <NVIC_EncodePriority+0x30>
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	3b03      	subs	r3, #3
 800145e:	e000      	b.n	8001462 <NVIC_EncodePriority+0x32>
 8001460:	2300      	movs	r3, #0
 8001462:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001464:	f04f 32ff 	mov.w	r2, #4294967295
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	fa02 f303 	lsl.w	r3, r2, r3
 800146e:	43da      	mvns	r2, r3
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	401a      	ands	r2, r3
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001478:	f04f 31ff 	mov.w	r1, #4294967295
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	fa01 f303 	lsl.w	r3, r1, r3
 8001482:	43d9      	mvns	r1, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001488:	4313      	orrs	r3, r2
         );
}
 800148a:	4618      	mov	r0, r3
 800148c:	3724      	adds	r7, #36	; 0x24
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
	...

08001498 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	3b01      	subs	r3, #1
 80014a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014a8:	d301      	bcc.n	80014ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014aa:	2301      	movs	r3, #1
 80014ac:	e00f      	b.n	80014ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014ae:	4a0a      	ldr	r2, [pc, #40]	; (80014d8 <SysTick_Config+0x40>)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	3b01      	subs	r3, #1
 80014b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014b6:	210f      	movs	r1, #15
 80014b8:	f04f 30ff 	mov.w	r0, #4294967295
 80014bc:	f7ff ff8e 	bl	80013dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014c0:	4b05      	ldr	r3, [pc, #20]	; (80014d8 <SysTick_Config+0x40>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014c6:	4b04      	ldr	r3, [pc, #16]	; (80014d8 <SysTick_Config+0x40>)
 80014c8:	2207      	movs	r2, #7
 80014ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014cc:	2300      	movs	r3, #0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	e000e010 	.word	0xe000e010

080014dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f7ff ff29 	bl	800133c <__NVIC_SetPriorityGrouping>
}
 80014ea:	bf00      	nop
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b086      	sub	sp, #24
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	4603      	mov	r3, r0
 80014fa:	60b9      	str	r1, [r7, #8]
 80014fc:	607a      	str	r2, [r7, #4]
 80014fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001500:	2300      	movs	r3, #0
 8001502:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001504:	f7ff ff3e 	bl	8001384 <__NVIC_GetPriorityGrouping>
 8001508:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	68b9      	ldr	r1, [r7, #8]
 800150e:	6978      	ldr	r0, [r7, #20]
 8001510:	f7ff ff8e 	bl	8001430 <NVIC_EncodePriority>
 8001514:	4602      	mov	r2, r0
 8001516:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800151a:	4611      	mov	r1, r2
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff ff5d 	bl	80013dc <__NVIC_SetPriority>
}
 8001522:	bf00      	nop
 8001524:	3718      	adds	r7, #24
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b082      	sub	sp, #8
 800152e:	af00      	add	r7, sp, #0
 8001530:	4603      	mov	r3, r0
 8001532:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001534:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff ff31 	bl	80013a0 <__NVIC_EnableIRQ>
}
 800153e:	bf00      	nop
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	b082      	sub	sp, #8
 800154a:	af00      	add	r7, sp, #0
 800154c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f7ff ffa2 	bl	8001498 <SysTick_Config>
 8001554:	4603      	mov	r3, r0
}
 8001556:	4618      	mov	r0, r3
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
	...

08001560 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001560:	b480      	push	{r7}
 8001562:	b089      	sub	sp, #36	; 0x24
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800156a:	2300      	movs	r3, #0
 800156c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800156e:	2300      	movs	r3, #0
 8001570:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001572:	2300      	movs	r3, #0
 8001574:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001576:	2300      	movs	r3, #0
 8001578:	61fb      	str	r3, [r7, #28]
 800157a:	e16b      	b.n	8001854 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800157c:	2201      	movs	r2, #1
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	697a      	ldr	r2, [r7, #20]
 800158c:	4013      	ands	r3, r2
 800158e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001590:	693a      	ldr	r2, [r7, #16]
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	429a      	cmp	r2, r3
 8001596:	f040 815a 	bne.w	800184e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f003 0303 	and.w	r3, r3, #3
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d005      	beq.n	80015b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d130      	bne.n	8001614 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	005b      	lsls	r3, r3, #1
 80015bc:	2203      	movs	r2, #3
 80015be:	fa02 f303 	lsl.w	r3, r2, r3
 80015c2:	43db      	mvns	r3, r3
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	4013      	ands	r3, r2
 80015c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	68da      	ldr	r2, [r3, #12]
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	fa02 f303 	lsl.w	r3, r2, r3
 80015d6:	69ba      	ldr	r2, [r7, #24]
 80015d8:	4313      	orrs	r3, r2
 80015da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	69ba      	ldr	r2, [r7, #24]
 80015e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015e8:	2201      	movs	r2, #1
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	43db      	mvns	r3, r3
 80015f2:	69ba      	ldr	r2, [r7, #24]
 80015f4:	4013      	ands	r3, r2
 80015f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	091b      	lsrs	r3, r3, #4
 80015fe:	f003 0201 	and.w	r2, r3, #1
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	fa02 f303 	lsl.w	r3, r2, r3
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	4313      	orrs	r3, r2
 800160c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f003 0303 	and.w	r3, r3, #3
 800161c:	2b03      	cmp	r3, #3
 800161e:	d017      	beq.n	8001650 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	2203      	movs	r2, #3
 800162c:	fa02 f303 	lsl.w	r3, r2, r3
 8001630:	43db      	mvns	r3, r3
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	4013      	ands	r3, r2
 8001636:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	689a      	ldr	r2, [r3, #8]
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	005b      	lsls	r3, r3, #1
 8001640:	fa02 f303 	lsl.w	r3, r2, r3
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	4313      	orrs	r3, r2
 8001648:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f003 0303 	and.w	r3, r3, #3
 8001658:	2b02      	cmp	r3, #2
 800165a:	d123      	bne.n	80016a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	08da      	lsrs	r2, r3, #3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	3208      	adds	r2, #8
 8001664:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001668:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	f003 0307 	and.w	r3, r3, #7
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	220f      	movs	r2, #15
 8001674:	fa02 f303 	lsl.w	r3, r2, r3
 8001678:	43db      	mvns	r3, r3
 800167a:	69ba      	ldr	r2, [r7, #24]
 800167c:	4013      	ands	r3, r2
 800167e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	691a      	ldr	r2, [r3, #16]
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	f003 0307 	and.w	r3, r3, #7
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	4313      	orrs	r3, r2
 8001694:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	08da      	lsrs	r2, r3, #3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	3208      	adds	r2, #8
 800169e:	69b9      	ldr	r1, [r7, #24]
 80016a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	2203      	movs	r2, #3
 80016b0:	fa02 f303 	lsl.w	r3, r2, r3
 80016b4:	43db      	mvns	r3, r3
 80016b6:	69ba      	ldr	r2, [r7, #24]
 80016b8:	4013      	ands	r3, r2
 80016ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f003 0203 	and.w	r2, r3, #3
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	4313      	orrs	r3, r2
 80016d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	f000 80b4 	beq.w	800184e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	60fb      	str	r3, [r7, #12]
 80016ea:	4b60      	ldr	r3, [pc, #384]	; (800186c <HAL_GPIO_Init+0x30c>)
 80016ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ee:	4a5f      	ldr	r2, [pc, #380]	; (800186c <HAL_GPIO_Init+0x30c>)
 80016f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016f4:	6453      	str	r3, [r2, #68]	; 0x44
 80016f6:	4b5d      	ldr	r3, [pc, #372]	; (800186c <HAL_GPIO_Init+0x30c>)
 80016f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016fe:	60fb      	str	r3, [r7, #12]
 8001700:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001702:	4a5b      	ldr	r2, [pc, #364]	; (8001870 <HAL_GPIO_Init+0x310>)
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	089b      	lsrs	r3, r3, #2
 8001708:	3302      	adds	r3, #2
 800170a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800170e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	f003 0303 	and.w	r3, r3, #3
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	220f      	movs	r2, #15
 800171a:	fa02 f303 	lsl.w	r3, r2, r3
 800171e:	43db      	mvns	r3, r3
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	4013      	ands	r3, r2
 8001724:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4a52      	ldr	r2, [pc, #328]	; (8001874 <HAL_GPIO_Init+0x314>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d02b      	beq.n	8001786 <HAL_GPIO_Init+0x226>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4a51      	ldr	r2, [pc, #324]	; (8001878 <HAL_GPIO_Init+0x318>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d025      	beq.n	8001782 <HAL_GPIO_Init+0x222>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4a50      	ldr	r2, [pc, #320]	; (800187c <HAL_GPIO_Init+0x31c>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d01f      	beq.n	800177e <HAL_GPIO_Init+0x21e>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a4f      	ldr	r2, [pc, #316]	; (8001880 <HAL_GPIO_Init+0x320>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d019      	beq.n	800177a <HAL_GPIO_Init+0x21a>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4a4e      	ldr	r2, [pc, #312]	; (8001884 <HAL_GPIO_Init+0x324>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d013      	beq.n	8001776 <HAL_GPIO_Init+0x216>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4a4d      	ldr	r2, [pc, #308]	; (8001888 <HAL_GPIO_Init+0x328>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d00d      	beq.n	8001772 <HAL_GPIO_Init+0x212>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a4c      	ldr	r2, [pc, #304]	; (800188c <HAL_GPIO_Init+0x32c>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d007      	beq.n	800176e <HAL_GPIO_Init+0x20e>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4a4b      	ldr	r2, [pc, #300]	; (8001890 <HAL_GPIO_Init+0x330>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d101      	bne.n	800176a <HAL_GPIO_Init+0x20a>
 8001766:	2307      	movs	r3, #7
 8001768:	e00e      	b.n	8001788 <HAL_GPIO_Init+0x228>
 800176a:	2308      	movs	r3, #8
 800176c:	e00c      	b.n	8001788 <HAL_GPIO_Init+0x228>
 800176e:	2306      	movs	r3, #6
 8001770:	e00a      	b.n	8001788 <HAL_GPIO_Init+0x228>
 8001772:	2305      	movs	r3, #5
 8001774:	e008      	b.n	8001788 <HAL_GPIO_Init+0x228>
 8001776:	2304      	movs	r3, #4
 8001778:	e006      	b.n	8001788 <HAL_GPIO_Init+0x228>
 800177a:	2303      	movs	r3, #3
 800177c:	e004      	b.n	8001788 <HAL_GPIO_Init+0x228>
 800177e:	2302      	movs	r3, #2
 8001780:	e002      	b.n	8001788 <HAL_GPIO_Init+0x228>
 8001782:	2301      	movs	r3, #1
 8001784:	e000      	b.n	8001788 <HAL_GPIO_Init+0x228>
 8001786:	2300      	movs	r3, #0
 8001788:	69fa      	ldr	r2, [r7, #28]
 800178a:	f002 0203 	and.w	r2, r2, #3
 800178e:	0092      	lsls	r2, r2, #2
 8001790:	4093      	lsls	r3, r2
 8001792:	69ba      	ldr	r2, [r7, #24]
 8001794:	4313      	orrs	r3, r2
 8001796:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001798:	4935      	ldr	r1, [pc, #212]	; (8001870 <HAL_GPIO_Init+0x310>)
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	089b      	lsrs	r3, r3, #2
 800179e:	3302      	adds	r3, #2
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017a6:	4b3b      	ldr	r3, [pc, #236]	; (8001894 <HAL_GPIO_Init+0x334>)
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	43db      	mvns	r3, r3
 80017b0:	69ba      	ldr	r2, [r7, #24]
 80017b2:	4013      	ands	r3, r2
 80017b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d003      	beq.n	80017ca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80017c2:	69ba      	ldr	r2, [r7, #24]
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017ca:	4a32      	ldr	r2, [pc, #200]	; (8001894 <HAL_GPIO_Init+0x334>)
 80017cc:	69bb      	ldr	r3, [r7, #24]
 80017ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017d0:	4b30      	ldr	r3, [pc, #192]	; (8001894 <HAL_GPIO_Init+0x334>)
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	43db      	mvns	r3, r3
 80017da:	69ba      	ldr	r2, [r7, #24]
 80017dc:	4013      	ands	r3, r2
 80017de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d003      	beq.n	80017f4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017f4:	4a27      	ldr	r2, [pc, #156]	; (8001894 <HAL_GPIO_Init+0x334>)
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017fa:	4b26      	ldr	r3, [pc, #152]	; (8001894 <HAL_GPIO_Init+0x334>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	43db      	mvns	r3, r3
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	4013      	ands	r3, r2
 8001808:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d003      	beq.n	800181e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	4313      	orrs	r3, r2
 800181c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800181e:	4a1d      	ldr	r2, [pc, #116]	; (8001894 <HAL_GPIO_Init+0x334>)
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001824:	4b1b      	ldr	r3, [pc, #108]	; (8001894 <HAL_GPIO_Init+0x334>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	43db      	mvns	r3, r3
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	4013      	ands	r3, r2
 8001832:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800183c:	2b00      	cmp	r3, #0
 800183e:	d003      	beq.n	8001848 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	4313      	orrs	r3, r2
 8001846:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001848:	4a12      	ldr	r2, [pc, #72]	; (8001894 <HAL_GPIO_Init+0x334>)
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	3301      	adds	r3, #1
 8001852:	61fb      	str	r3, [r7, #28]
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	2b0f      	cmp	r3, #15
 8001858:	f67f ae90 	bls.w	800157c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800185c:	bf00      	nop
 800185e:	bf00      	nop
 8001860:	3724      	adds	r7, #36	; 0x24
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	40023800 	.word	0x40023800
 8001870:	40013800 	.word	0x40013800
 8001874:	40020000 	.word	0x40020000
 8001878:	40020400 	.word	0x40020400
 800187c:	40020800 	.word	0x40020800
 8001880:	40020c00 	.word	0x40020c00
 8001884:	40021000 	.word	0x40021000
 8001888:	40021400 	.word	0x40021400
 800188c:	40021800 	.word	0x40021800
 8001890:	40021c00 	.word	0x40021c00
 8001894:	40013c00 	.word	0x40013c00

08001898 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001898:	b480      	push	{r7}
 800189a:	b085      	sub	sp, #20
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	460b      	mov	r3, r1
 80018a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	691a      	ldr	r2, [r3, #16]
 80018a8:	887b      	ldrh	r3, [r7, #2]
 80018aa:	4013      	ands	r3, r2
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d002      	beq.n	80018b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80018b0:	2301      	movs	r3, #1
 80018b2:	73fb      	strb	r3, [r7, #15]
 80018b4:	e001      	b.n	80018ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80018b6:	2300      	movs	r3, #0
 80018b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80018ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3714      	adds	r7, #20
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	460b      	mov	r3, r1
 80018d2:	807b      	strh	r3, [r7, #2]
 80018d4:	4613      	mov	r3, r2
 80018d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018d8:	787b      	ldrb	r3, [r7, #1]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d003      	beq.n	80018e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018de:	887a      	ldrh	r2, [r7, #2]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018e4:	e003      	b.n	80018ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018e6:	887b      	ldrh	r3, [r7, #2]
 80018e8:	041a      	lsls	r2, r3, #16
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	619a      	str	r2, [r3, #24]
}
 80018ee:	bf00      	nop
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr

080018fa <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80018fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018fc:	b08f      	sub	sp, #60	; 0x3c
 80018fe:	af0a      	add	r7, sp, #40	; 0x28
 8001900:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d101      	bne.n	800190c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e054      	b.n	80019b6 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001918:	b2db      	uxtb	r3, r3
 800191a:	2b00      	cmp	r3, #0
 800191c:	d106      	bne.n	800192c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2200      	movs	r2, #0
 8001922:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f006 fb6c 	bl	8008004 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2203      	movs	r2, #3
 8001930:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800193c:	2b00      	cmp	r3, #0
 800193e:	d102      	bne.n	8001946 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2200      	movs	r2, #0
 8001944:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4618      	mov	r0, r3
 800194c:	f003 fb9b 	bl	8005086 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	603b      	str	r3, [r7, #0]
 8001956:	687e      	ldr	r6, [r7, #4]
 8001958:	466d      	mov	r5, sp
 800195a:	f106 0410 	add.w	r4, r6, #16
 800195e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001960:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001962:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001964:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001966:	e894 0003 	ldmia.w	r4, {r0, r1}
 800196a:	e885 0003 	stmia.w	r5, {r0, r1}
 800196e:	1d33      	adds	r3, r6, #4
 8001970:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001972:	6838      	ldr	r0, [r7, #0]
 8001974:	f003 fb15 	bl	8004fa2 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2101      	movs	r1, #1
 800197e:	4618      	mov	r0, r3
 8001980:	f003 fb92 	bl	80050a8 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	603b      	str	r3, [r7, #0]
 800198a:	687e      	ldr	r6, [r7, #4]
 800198c:	466d      	mov	r5, sp
 800198e:	f106 0410 	add.w	r4, r6, #16
 8001992:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001994:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001996:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001998:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800199a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800199e:	e885 0003 	stmia.w	r5, {r0, r1}
 80019a2:	1d33      	adds	r3, r6, #4
 80019a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019a6:	6838      	ldr	r0, [r7, #0]
 80019a8:	f003 fd1a 	bl	80053e0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2201      	movs	r2, #1
 80019b0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3714      	adds	r7, #20
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080019be <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80019be:	b590      	push	{r4, r7, lr}
 80019c0:	b089      	sub	sp, #36	; 0x24
 80019c2:	af04      	add	r7, sp, #16
 80019c4:	6078      	str	r0, [r7, #4]
 80019c6:	4608      	mov	r0, r1
 80019c8:	4611      	mov	r1, r2
 80019ca:	461a      	mov	r2, r3
 80019cc:	4603      	mov	r3, r0
 80019ce:	70fb      	strb	r3, [r7, #3]
 80019d0:	460b      	mov	r3, r1
 80019d2:	70bb      	strb	r3, [r7, #2]
 80019d4:	4613      	mov	r3, r2
 80019d6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d101      	bne.n	80019e6 <HAL_HCD_HC_Init+0x28>
 80019e2:	2302      	movs	r3, #2
 80019e4:	e076      	b.n	8001ad4 <HAL_HCD_HC_Init+0x116>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2201      	movs	r2, #1
 80019ea:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80019ee:	78fb      	ldrb	r3, [r7, #3]
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	212c      	movs	r1, #44	; 0x2c
 80019f4:	fb01 f303 	mul.w	r3, r1, r3
 80019f8:	4413      	add	r3, r2
 80019fa:	333d      	adds	r3, #61	; 0x3d
 80019fc:	2200      	movs	r2, #0
 80019fe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001a00:	78fb      	ldrb	r3, [r7, #3]
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	212c      	movs	r1, #44	; 0x2c
 8001a06:	fb01 f303 	mul.w	r3, r1, r3
 8001a0a:	4413      	add	r3, r2
 8001a0c:	3338      	adds	r3, #56	; 0x38
 8001a0e:	787a      	ldrb	r2, [r7, #1]
 8001a10:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001a12:	78fb      	ldrb	r3, [r7, #3]
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	212c      	movs	r1, #44	; 0x2c
 8001a18:	fb01 f303 	mul.w	r3, r1, r3
 8001a1c:	4413      	add	r3, r2
 8001a1e:	3340      	adds	r3, #64	; 0x40
 8001a20:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001a22:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001a24:	78fb      	ldrb	r3, [r7, #3]
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	212c      	movs	r1, #44	; 0x2c
 8001a2a:	fb01 f303 	mul.w	r3, r1, r3
 8001a2e:	4413      	add	r3, r2
 8001a30:	3339      	adds	r3, #57	; 0x39
 8001a32:	78fa      	ldrb	r2, [r7, #3]
 8001a34:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001a36:	78fb      	ldrb	r3, [r7, #3]
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	212c      	movs	r1, #44	; 0x2c
 8001a3c:	fb01 f303 	mul.w	r3, r1, r3
 8001a40:	4413      	add	r3, r2
 8001a42:	333f      	adds	r3, #63	; 0x3f
 8001a44:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001a48:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001a4a:	78fb      	ldrb	r3, [r7, #3]
 8001a4c:	78ba      	ldrb	r2, [r7, #2]
 8001a4e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001a52:	b2d0      	uxtb	r0, r2
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	212c      	movs	r1, #44	; 0x2c
 8001a58:	fb01 f303 	mul.w	r3, r1, r3
 8001a5c:	4413      	add	r3, r2
 8001a5e:	333a      	adds	r3, #58	; 0x3a
 8001a60:	4602      	mov	r2, r0
 8001a62:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001a64:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	da09      	bge.n	8001a80 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001a6c:	78fb      	ldrb	r3, [r7, #3]
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	212c      	movs	r1, #44	; 0x2c
 8001a72:	fb01 f303 	mul.w	r3, r1, r3
 8001a76:	4413      	add	r3, r2
 8001a78:	333b      	adds	r3, #59	; 0x3b
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	701a      	strb	r2, [r3, #0]
 8001a7e:	e008      	b.n	8001a92 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001a80:	78fb      	ldrb	r3, [r7, #3]
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	212c      	movs	r1, #44	; 0x2c
 8001a86:	fb01 f303 	mul.w	r3, r1, r3
 8001a8a:	4413      	add	r3, r2
 8001a8c:	333b      	adds	r3, #59	; 0x3b
 8001a8e:	2200      	movs	r2, #0
 8001a90:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001a92:	78fb      	ldrb	r3, [r7, #3]
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	212c      	movs	r1, #44	; 0x2c
 8001a98:	fb01 f303 	mul.w	r3, r1, r3
 8001a9c:	4413      	add	r3, r2
 8001a9e:	333c      	adds	r3, #60	; 0x3c
 8001aa0:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001aa4:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6818      	ldr	r0, [r3, #0]
 8001aaa:	787c      	ldrb	r4, [r7, #1]
 8001aac:	78ba      	ldrb	r2, [r7, #2]
 8001aae:	78f9      	ldrb	r1, [r7, #3]
 8001ab0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001ab2:	9302      	str	r3, [sp, #8]
 8001ab4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001ab8:	9301      	str	r3, [sp, #4]
 8001aba:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001abe:	9300      	str	r3, [sp, #0]
 8001ac0:	4623      	mov	r3, r4
 8001ac2:	f003 fe13 	bl	80056ec <USB_HC_Init>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2200      	movs	r2, #0
 8001ace:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001ad2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3714      	adds	r7, #20
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd90      	pop	{r4, r7, pc}

08001adc <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d101      	bne.n	8001afa <HAL_HCD_HC_Halt+0x1e>
 8001af6:	2302      	movs	r3, #2
 8001af8:	e00f      	b.n	8001b1a <HAL_HCD_HC_Halt+0x3e>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2201      	movs	r2, #1
 8001afe:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	78fa      	ldrb	r2, [r7, #3]
 8001b08:	4611      	mov	r1, r2
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f004 f863 	bl	8005bd6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2200      	movs	r2, #0
 8001b14:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3710      	adds	r7, #16
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
	...

08001b24 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	4608      	mov	r0, r1
 8001b2e:	4611      	mov	r1, r2
 8001b30:	461a      	mov	r2, r3
 8001b32:	4603      	mov	r3, r0
 8001b34:	70fb      	strb	r3, [r7, #3]
 8001b36:	460b      	mov	r3, r1
 8001b38:	70bb      	strb	r3, [r7, #2]
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001b3e:	78fb      	ldrb	r3, [r7, #3]
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	212c      	movs	r1, #44	; 0x2c
 8001b44:	fb01 f303 	mul.w	r3, r1, r3
 8001b48:	4413      	add	r3, r2
 8001b4a:	333b      	adds	r3, #59	; 0x3b
 8001b4c:	78ba      	ldrb	r2, [r7, #2]
 8001b4e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001b50:	78fb      	ldrb	r3, [r7, #3]
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	212c      	movs	r1, #44	; 0x2c
 8001b56:	fb01 f303 	mul.w	r3, r1, r3
 8001b5a:	4413      	add	r3, r2
 8001b5c:	333f      	adds	r3, #63	; 0x3f
 8001b5e:	787a      	ldrb	r2, [r7, #1]
 8001b60:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001b62:	7c3b      	ldrb	r3, [r7, #16]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d112      	bne.n	8001b8e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001b68:	78fb      	ldrb	r3, [r7, #3]
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	212c      	movs	r1, #44	; 0x2c
 8001b6e:	fb01 f303 	mul.w	r3, r1, r3
 8001b72:	4413      	add	r3, r2
 8001b74:	3342      	adds	r3, #66	; 0x42
 8001b76:	2203      	movs	r2, #3
 8001b78:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001b7a:	78fb      	ldrb	r3, [r7, #3]
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	212c      	movs	r1, #44	; 0x2c
 8001b80:	fb01 f303 	mul.w	r3, r1, r3
 8001b84:	4413      	add	r3, r2
 8001b86:	333d      	adds	r3, #61	; 0x3d
 8001b88:	7f3a      	ldrb	r2, [r7, #28]
 8001b8a:	701a      	strb	r2, [r3, #0]
 8001b8c:	e008      	b.n	8001ba0 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b8e:	78fb      	ldrb	r3, [r7, #3]
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	212c      	movs	r1, #44	; 0x2c
 8001b94:	fb01 f303 	mul.w	r3, r1, r3
 8001b98:	4413      	add	r3, r2
 8001b9a:	3342      	adds	r3, #66	; 0x42
 8001b9c:	2202      	movs	r2, #2
 8001b9e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001ba0:	787b      	ldrb	r3, [r7, #1]
 8001ba2:	2b03      	cmp	r3, #3
 8001ba4:	f200 80c6 	bhi.w	8001d34 <HAL_HCD_HC_SubmitRequest+0x210>
 8001ba8:	a201      	add	r2, pc, #4	; (adr r2, 8001bb0 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bae:	bf00      	nop
 8001bb0:	08001bc1 	.word	0x08001bc1
 8001bb4:	08001d21 	.word	0x08001d21
 8001bb8:	08001c25 	.word	0x08001c25
 8001bbc:	08001ca3 	.word	0x08001ca3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001bc0:	7c3b      	ldrb	r3, [r7, #16]
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	f040 80b8 	bne.w	8001d38 <HAL_HCD_HC_SubmitRequest+0x214>
 8001bc8:	78bb      	ldrb	r3, [r7, #2]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	f040 80b4 	bne.w	8001d38 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001bd0:	8b3b      	ldrh	r3, [r7, #24]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d108      	bne.n	8001be8 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001bd6:	78fb      	ldrb	r3, [r7, #3]
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	212c      	movs	r1, #44	; 0x2c
 8001bdc:	fb01 f303 	mul.w	r3, r1, r3
 8001be0:	4413      	add	r3, r2
 8001be2:	3355      	adds	r3, #85	; 0x55
 8001be4:	2201      	movs	r2, #1
 8001be6:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001be8:	78fb      	ldrb	r3, [r7, #3]
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	212c      	movs	r1, #44	; 0x2c
 8001bee:	fb01 f303 	mul.w	r3, r1, r3
 8001bf2:	4413      	add	r3, r2
 8001bf4:	3355      	adds	r3, #85	; 0x55
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d109      	bne.n	8001c10 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001bfc:	78fb      	ldrb	r3, [r7, #3]
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	212c      	movs	r1, #44	; 0x2c
 8001c02:	fb01 f303 	mul.w	r3, r1, r3
 8001c06:	4413      	add	r3, r2
 8001c08:	3342      	adds	r3, #66	; 0x42
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001c0e:	e093      	b.n	8001d38 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c10:	78fb      	ldrb	r3, [r7, #3]
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	212c      	movs	r1, #44	; 0x2c
 8001c16:	fb01 f303 	mul.w	r3, r1, r3
 8001c1a:	4413      	add	r3, r2
 8001c1c:	3342      	adds	r3, #66	; 0x42
 8001c1e:	2202      	movs	r2, #2
 8001c20:	701a      	strb	r2, [r3, #0]
      break;
 8001c22:	e089      	b.n	8001d38 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001c24:	78bb      	ldrb	r3, [r7, #2]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d11d      	bne.n	8001c66 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001c2a:	78fb      	ldrb	r3, [r7, #3]
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	212c      	movs	r1, #44	; 0x2c
 8001c30:	fb01 f303 	mul.w	r3, r1, r3
 8001c34:	4413      	add	r3, r2
 8001c36:	3355      	adds	r3, #85	; 0x55
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d109      	bne.n	8001c52 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c3e:	78fb      	ldrb	r3, [r7, #3]
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	212c      	movs	r1, #44	; 0x2c
 8001c44:	fb01 f303 	mul.w	r3, r1, r3
 8001c48:	4413      	add	r3, r2
 8001c4a:	3342      	adds	r3, #66	; 0x42
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001c50:	e073      	b.n	8001d3a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c52:	78fb      	ldrb	r3, [r7, #3]
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	212c      	movs	r1, #44	; 0x2c
 8001c58:	fb01 f303 	mul.w	r3, r1, r3
 8001c5c:	4413      	add	r3, r2
 8001c5e:	3342      	adds	r3, #66	; 0x42
 8001c60:	2202      	movs	r2, #2
 8001c62:	701a      	strb	r2, [r3, #0]
      break;
 8001c64:	e069      	b.n	8001d3a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001c66:	78fb      	ldrb	r3, [r7, #3]
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	212c      	movs	r1, #44	; 0x2c
 8001c6c:	fb01 f303 	mul.w	r3, r1, r3
 8001c70:	4413      	add	r3, r2
 8001c72:	3354      	adds	r3, #84	; 0x54
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d109      	bne.n	8001c8e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c7a:	78fb      	ldrb	r3, [r7, #3]
 8001c7c:	687a      	ldr	r2, [r7, #4]
 8001c7e:	212c      	movs	r1, #44	; 0x2c
 8001c80:	fb01 f303 	mul.w	r3, r1, r3
 8001c84:	4413      	add	r3, r2
 8001c86:	3342      	adds	r3, #66	; 0x42
 8001c88:	2200      	movs	r2, #0
 8001c8a:	701a      	strb	r2, [r3, #0]
      break;
 8001c8c:	e055      	b.n	8001d3a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c8e:	78fb      	ldrb	r3, [r7, #3]
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	212c      	movs	r1, #44	; 0x2c
 8001c94:	fb01 f303 	mul.w	r3, r1, r3
 8001c98:	4413      	add	r3, r2
 8001c9a:	3342      	adds	r3, #66	; 0x42
 8001c9c:	2202      	movs	r2, #2
 8001c9e:	701a      	strb	r2, [r3, #0]
      break;
 8001ca0:	e04b      	b.n	8001d3a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001ca2:	78bb      	ldrb	r3, [r7, #2]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d11d      	bne.n	8001ce4 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001ca8:	78fb      	ldrb	r3, [r7, #3]
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	212c      	movs	r1, #44	; 0x2c
 8001cae:	fb01 f303 	mul.w	r3, r1, r3
 8001cb2:	4413      	add	r3, r2
 8001cb4:	3355      	adds	r3, #85	; 0x55
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d109      	bne.n	8001cd0 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001cbc:	78fb      	ldrb	r3, [r7, #3]
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	212c      	movs	r1, #44	; 0x2c
 8001cc2:	fb01 f303 	mul.w	r3, r1, r3
 8001cc6:	4413      	add	r3, r2
 8001cc8:	3342      	adds	r3, #66	; 0x42
 8001cca:	2200      	movs	r2, #0
 8001ccc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001cce:	e034      	b.n	8001d3a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001cd0:	78fb      	ldrb	r3, [r7, #3]
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	212c      	movs	r1, #44	; 0x2c
 8001cd6:	fb01 f303 	mul.w	r3, r1, r3
 8001cda:	4413      	add	r3, r2
 8001cdc:	3342      	adds	r3, #66	; 0x42
 8001cde:	2202      	movs	r2, #2
 8001ce0:	701a      	strb	r2, [r3, #0]
      break;
 8001ce2:	e02a      	b.n	8001d3a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001ce4:	78fb      	ldrb	r3, [r7, #3]
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	212c      	movs	r1, #44	; 0x2c
 8001cea:	fb01 f303 	mul.w	r3, r1, r3
 8001cee:	4413      	add	r3, r2
 8001cf0:	3354      	adds	r3, #84	; 0x54
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d109      	bne.n	8001d0c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001cf8:	78fb      	ldrb	r3, [r7, #3]
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	212c      	movs	r1, #44	; 0x2c
 8001cfe:	fb01 f303 	mul.w	r3, r1, r3
 8001d02:	4413      	add	r3, r2
 8001d04:	3342      	adds	r3, #66	; 0x42
 8001d06:	2200      	movs	r2, #0
 8001d08:	701a      	strb	r2, [r3, #0]
      break;
 8001d0a:	e016      	b.n	8001d3a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d0c:	78fb      	ldrb	r3, [r7, #3]
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	212c      	movs	r1, #44	; 0x2c
 8001d12:	fb01 f303 	mul.w	r3, r1, r3
 8001d16:	4413      	add	r3, r2
 8001d18:	3342      	adds	r3, #66	; 0x42
 8001d1a:	2202      	movs	r2, #2
 8001d1c:	701a      	strb	r2, [r3, #0]
      break;
 8001d1e:	e00c      	b.n	8001d3a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d20:	78fb      	ldrb	r3, [r7, #3]
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	212c      	movs	r1, #44	; 0x2c
 8001d26:	fb01 f303 	mul.w	r3, r1, r3
 8001d2a:	4413      	add	r3, r2
 8001d2c:	3342      	adds	r3, #66	; 0x42
 8001d2e:	2200      	movs	r2, #0
 8001d30:	701a      	strb	r2, [r3, #0]
      break;
 8001d32:	e002      	b.n	8001d3a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001d34:	bf00      	nop
 8001d36:	e000      	b.n	8001d3a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001d38:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001d3a:	78fb      	ldrb	r3, [r7, #3]
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	212c      	movs	r1, #44	; 0x2c
 8001d40:	fb01 f303 	mul.w	r3, r1, r3
 8001d44:	4413      	add	r3, r2
 8001d46:	3344      	adds	r3, #68	; 0x44
 8001d48:	697a      	ldr	r2, [r7, #20]
 8001d4a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001d4c:	78fb      	ldrb	r3, [r7, #3]
 8001d4e:	8b3a      	ldrh	r2, [r7, #24]
 8001d50:	6879      	ldr	r1, [r7, #4]
 8001d52:	202c      	movs	r0, #44	; 0x2c
 8001d54:	fb00 f303 	mul.w	r3, r0, r3
 8001d58:	440b      	add	r3, r1
 8001d5a:	334c      	adds	r3, #76	; 0x4c
 8001d5c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001d5e:	78fb      	ldrb	r3, [r7, #3]
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	212c      	movs	r1, #44	; 0x2c
 8001d64:	fb01 f303 	mul.w	r3, r1, r3
 8001d68:	4413      	add	r3, r2
 8001d6a:	3360      	adds	r3, #96	; 0x60
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001d70:	78fb      	ldrb	r3, [r7, #3]
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	212c      	movs	r1, #44	; 0x2c
 8001d76:	fb01 f303 	mul.w	r3, r1, r3
 8001d7a:	4413      	add	r3, r2
 8001d7c:	3350      	adds	r3, #80	; 0x50
 8001d7e:	2200      	movs	r2, #0
 8001d80:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001d82:	78fb      	ldrb	r3, [r7, #3]
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	212c      	movs	r1, #44	; 0x2c
 8001d88:	fb01 f303 	mul.w	r3, r1, r3
 8001d8c:	4413      	add	r3, r2
 8001d8e:	3339      	adds	r3, #57	; 0x39
 8001d90:	78fa      	ldrb	r2, [r7, #3]
 8001d92:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001d94:	78fb      	ldrb	r3, [r7, #3]
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	212c      	movs	r1, #44	; 0x2c
 8001d9a:	fb01 f303 	mul.w	r3, r1, r3
 8001d9e:	4413      	add	r3, r2
 8001da0:	3361      	adds	r3, #97	; 0x61
 8001da2:	2200      	movs	r2, #0
 8001da4:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6818      	ldr	r0, [r3, #0]
 8001daa:	78fb      	ldrb	r3, [r7, #3]
 8001dac:	222c      	movs	r2, #44	; 0x2c
 8001dae:	fb02 f303 	mul.w	r3, r2, r3
 8001db2:	3338      	adds	r3, #56	; 0x38
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	18d1      	adds	r1, r2, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	691b      	ldr	r3, [r3, #16]
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	f003 fdb6 	bl	8005930 <USB_HC_StartXfer>
 8001dc4:	4603      	mov	r3, r0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop

08001dd0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f003 fab7 	bl	800535a <USB_GetMode>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	f040 80f6 	bne.w	8001fe0 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f003 fa9b 	bl	8005334 <USB_ReadInterrupts>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	f000 80ec 	beq.w	8001fde <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f003 fa92 	bl	8005334 <USB_ReadInterrupts>
 8001e10:	4603      	mov	r3, r0
 8001e12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e16:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001e1a:	d104      	bne.n	8001e26 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001e24:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f003 fa82 	bl	8005334 <USB_ReadInterrupts>
 8001e30:	4603      	mov	r3, r0
 8001e32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e3a:	d104      	bne.n	8001e46 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001e44:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f003 fa72 	bl	8005334 <USB_ReadInterrupts>
 8001e50:	4603      	mov	r3, r0
 8001e52:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e56:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001e5a:	d104      	bne.n	8001e66 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001e64:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f003 fa62 	bl	8005334 <USB_ReadInterrupts>
 8001e70:	4603      	mov	r3, r0
 8001e72:	f003 0302 	and.w	r3, r3, #2
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d103      	bne.n	8001e82 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2202      	movs	r2, #2
 8001e80:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f003 fa54 	bl	8005334 <USB_ReadInterrupts>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e96:	d11c      	bne.n	8001ed2 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001ea0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d10f      	bne.n	8001ed2 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001eb2:	2110      	movs	r1, #16
 8001eb4:	6938      	ldr	r0, [r7, #16]
 8001eb6:	f003 f943 	bl	8005140 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001eba:	6938      	ldr	r0, [r7, #16]
 8001ebc:	f003 f974 	bl	80051a8 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2101      	movs	r1, #1
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f003 fb4a 	bl	8005560 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f006 f917 	bl	8008100 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f003 fa2c 	bl	8005334 <USB_ReadInterrupts>
 8001edc:	4603      	mov	r3, r0
 8001ede:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ee2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ee6:	d102      	bne.n	8001eee <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f001 f89e 	bl	800302a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f003 fa1e 	bl	8005334 <USB_ReadInterrupts>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	f003 0308 	and.w	r3, r3, #8
 8001efe:	2b08      	cmp	r3, #8
 8001f00:	d106      	bne.n	8001f10 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f006 f8e0 	bl	80080c8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2208      	movs	r2, #8
 8001f0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4618      	mov	r0, r3
 8001f16:	f003 fa0d 	bl	8005334 <USB_ReadInterrupts>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	f003 0310 	and.w	r3, r3, #16
 8001f20:	2b10      	cmp	r3, #16
 8001f22:	d101      	bne.n	8001f28 <HAL_HCD_IRQHandler+0x158>
 8001f24:	2301      	movs	r3, #1
 8001f26:	e000      	b.n	8001f2a <HAL_HCD_IRQHandler+0x15a>
 8001f28:	2300      	movs	r3, #0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d012      	beq.n	8001f54 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	699a      	ldr	r2, [r3, #24]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f022 0210 	bic.w	r2, r2, #16
 8001f3c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f000 ffa1 	bl	8002e86 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	699a      	ldr	r2, [r3, #24]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f042 0210 	orr.w	r2, r2, #16
 8001f52:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f003 f9eb 	bl	8005334 <USB_ReadInterrupts>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f68:	d13a      	bne.n	8001fe0 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f003 fe20 	bl	8005bb4 <USB_HC_ReadInterrupt>
 8001f74:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001f76:	2300      	movs	r3, #0
 8001f78:	617b      	str	r3, [r7, #20]
 8001f7a:	e025      	b.n	8001fc8 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	f003 030f 	and.w	r3, r3, #15
 8001f82:	68ba      	ldr	r2, [r7, #8]
 8001f84:	fa22 f303 	lsr.w	r3, r2, r3
 8001f88:	f003 0301 	and.w	r3, r3, #1
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d018      	beq.n	8001fc2 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	015a      	lsls	r2, r3, #5
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	4413      	add	r3, r2
 8001f98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fa2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fa6:	d106      	bne.n	8001fb6 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	4619      	mov	r1, r3
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f000 f8ab 	bl	800210a <HCD_HC_IN_IRQHandler>
 8001fb4:	e005      	b.n	8001fc2 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	4619      	mov	r1, r3
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f000 fbf9 	bl	80027b4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	617b      	str	r3, [r7, #20]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	697a      	ldr	r2, [r7, #20]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d3d4      	bcc.n	8001f7c <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fda:	615a      	str	r2, [r3, #20]
 8001fdc:	e000      	b.n	8001fe0 <HAL_HCD_IRQHandler+0x210>
      return;
 8001fde:	bf00      	nop
    }
  }
}
 8001fe0:	3718      	adds	r7, #24
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b082      	sub	sp, #8
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d101      	bne.n	8001ffc <HAL_HCD_Start+0x16>
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	e013      	b.n	8002024 <HAL_HCD_Start+0x3e>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2101      	movs	r1, #1
 800200a:	4618      	mov	r0, r3
 800200c:	f003 fb0c 	bl	8005628 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4618      	mov	r0, r3
 8002016:	f003 f825 	bl	8005064 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002022:	2300      	movs	r3, #0
}
 8002024:	4618      	mov	r0, r3
 8002026:	3708      	adds	r7, #8
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}

0800202c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800203a:	2b01      	cmp	r3, #1
 800203c:	d101      	bne.n	8002042 <HAL_HCD_Stop+0x16>
 800203e:	2302      	movs	r3, #2
 8002040:	e00d      	b.n	800205e <HAL_HCD_Stop+0x32>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2201      	movs	r2, #1
 8002046:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4618      	mov	r0, r3
 8002050:	f003 fefa 	bl	8005e48 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002066:	b580      	push	{r7, lr}
 8002068:	b082      	sub	sp, #8
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4618      	mov	r0, r3
 8002074:	f003 faae 	bl	80055d4 <USB_ResetPort>
 8002078:	4603      	mov	r3, r0
}
 800207a:	4618      	mov	r0, r3
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002082:	b480      	push	{r7}
 8002084:	b083      	sub	sp, #12
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
 800208a:	460b      	mov	r3, r1
 800208c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800208e:	78fb      	ldrb	r3, [r7, #3]
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	212c      	movs	r1, #44	; 0x2c
 8002094:	fb01 f303 	mul.w	r3, r1, r3
 8002098:	4413      	add	r3, r2
 800209a:	3360      	adds	r3, #96	; 0x60
 800209c:	781b      	ldrb	r3, [r3, #0]
}
 800209e:	4618      	mov	r0, r3
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr

080020aa <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80020aa:	b480      	push	{r7}
 80020ac:	b083      	sub	sp, #12
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
 80020b2:	460b      	mov	r3, r1
 80020b4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80020b6:	78fb      	ldrb	r3, [r7, #3]
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	212c      	movs	r1, #44	; 0x2c
 80020bc:	fb01 f303 	mul.w	r3, r1, r3
 80020c0:	4413      	add	r3, r2
 80020c2:	3350      	adds	r3, #80	; 0x50
 80020c4:	681b      	ldr	r3, [r3, #0]
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr

080020d2 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80020d2:	b580      	push	{r7, lr}
 80020d4:	b082      	sub	sp, #8
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4618      	mov	r0, r3
 80020e0:	f003 faf2 	bl	80056c8 <USB_GetCurrentFrame>
 80020e4:	4603      	mov	r3, r0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3708      	adds	r7, #8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}

080020ee <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b082      	sub	sp, #8
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f003 facd 	bl	800569a <USB_GetHostSpeed>
 8002100:	4603      	mov	r3, r0
}
 8002102:	4618      	mov	r0, r3
 8002104:	3708      	adds	r7, #8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}

0800210a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800210a:	b580      	push	{r7, lr}
 800210c:	b086      	sub	sp, #24
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
 8002112:	460b      	mov	r3, r1
 8002114:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002120:	78fb      	ldrb	r3, [r7, #3]
 8002122:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	015a      	lsls	r2, r3, #5
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	4413      	add	r3, r2
 800212c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	f003 0304 	and.w	r3, r3, #4
 8002136:	2b04      	cmp	r3, #4
 8002138:	d11a      	bne.n	8002170 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	015a      	lsls	r2, r3, #5
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	4413      	add	r3, r2
 8002142:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002146:	461a      	mov	r2, r3
 8002148:	2304      	movs	r3, #4
 800214a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	212c      	movs	r1, #44	; 0x2c
 8002152:	fb01 f303 	mul.w	r3, r1, r3
 8002156:	4413      	add	r3, r2
 8002158:	3361      	adds	r3, #97	; 0x61
 800215a:	2206      	movs	r2, #6
 800215c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	68fa      	ldr	r2, [r7, #12]
 8002164:	b2d2      	uxtb	r2, r2
 8002166:	4611      	mov	r1, r2
 8002168:	4618      	mov	r0, r3
 800216a:	f003 fd34 	bl	8005bd6 <USB_HC_Halt>
 800216e:	e0af      	b.n	80022d0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	015a      	lsls	r2, r3, #5
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	4413      	add	r3, r2
 8002178:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002182:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002186:	d11b      	bne.n	80021c0 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	015a      	lsls	r2, r3, #5
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	4413      	add	r3, r2
 8002190:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002194:	461a      	mov	r2, r3
 8002196:	f44f 7380 	mov.w	r3, #256	; 0x100
 800219a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	212c      	movs	r1, #44	; 0x2c
 80021a2:	fb01 f303 	mul.w	r3, r1, r3
 80021a6:	4413      	add	r3, r2
 80021a8:	3361      	adds	r3, #97	; 0x61
 80021aa:	2207      	movs	r2, #7
 80021ac:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	68fa      	ldr	r2, [r7, #12]
 80021b4:	b2d2      	uxtb	r2, r2
 80021b6:	4611      	mov	r1, r2
 80021b8:	4618      	mov	r0, r3
 80021ba:	f003 fd0c 	bl	8005bd6 <USB_HC_Halt>
 80021be:	e087      	b.n	80022d0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	015a      	lsls	r2, r3, #5
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	4413      	add	r3, r2
 80021c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	f003 0320 	and.w	r3, r3, #32
 80021d2:	2b20      	cmp	r3, #32
 80021d4:	d109      	bne.n	80021ea <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	015a      	lsls	r2, r3, #5
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	4413      	add	r3, r2
 80021de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021e2:	461a      	mov	r2, r3
 80021e4:	2320      	movs	r3, #32
 80021e6:	6093      	str	r3, [r2, #8]
 80021e8:	e072      	b.n	80022d0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	015a      	lsls	r2, r3, #5
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	4413      	add	r3, r2
 80021f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	f003 0308 	and.w	r3, r3, #8
 80021fc:	2b08      	cmp	r3, #8
 80021fe:	d11a      	bne.n	8002236 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	015a      	lsls	r2, r3, #5
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	4413      	add	r3, r2
 8002208:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800220c:	461a      	mov	r2, r3
 800220e:	2308      	movs	r3, #8
 8002210:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	212c      	movs	r1, #44	; 0x2c
 8002218:	fb01 f303 	mul.w	r3, r1, r3
 800221c:	4413      	add	r3, r2
 800221e:	3361      	adds	r3, #97	; 0x61
 8002220:	2205      	movs	r2, #5
 8002222:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	68fa      	ldr	r2, [r7, #12]
 800222a:	b2d2      	uxtb	r2, r2
 800222c:	4611      	mov	r1, r2
 800222e:	4618      	mov	r0, r3
 8002230:	f003 fcd1 	bl	8005bd6 <USB_HC_Halt>
 8002234:	e04c      	b.n	80022d0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	015a      	lsls	r2, r3, #5
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	4413      	add	r3, r2
 800223e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002248:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800224c:	d11b      	bne.n	8002286 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	015a      	lsls	r2, r3, #5
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	4413      	add	r3, r2
 8002256:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800225a:	461a      	mov	r2, r3
 800225c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002260:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	212c      	movs	r1, #44	; 0x2c
 8002268:	fb01 f303 	mul.w	r3, r1, r3
 800226c:	4413      	add	r3, r2
 800226e:	3361      	adds	r3, #97	; 0x61
 8002270:	2208      	movs	r2, #8
 8002272:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	68fa      	ldr	r2, [r7, #12]
 800227a:	b2d2      	uxtb	r2, r2
 800227c:	4611      	mov	r1, r2
 800227e:	4618      	mov	r0, r3
 8002280:	f003 fca9 	bl	8005bd6 <USB_HC_Halt>
 8002284:	e024      	b.n	80022d0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	015a      	lsls	r2, r3, #5
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	4413      	add	r3, r2
 800228e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002298:	2b80      	cmp	r3, #128	; 0x80
 800229a:	d119      	bne.n	80022d0 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	015a      	lsls	r2, r3, #5
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	4413      	add	r3, r2
 80022a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022a8:	461a      	mov	r2, r3
 80022aa:	2380      	movs	r3, #128	; 0x80
 80022ac:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	212c      	movs	r1, #44	; 0x2c
 80022b4:	fb01 f303 	mul.w	r3, r1, r3
 80022b8:	4413      	add	r3, r2
 80022ba:	3361      	adds	r3, #97	; 0x61
 80022bc:	2206      	movs	r2, #6
 80022be:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	68fa      	ldr	r2, [r7, #12]
 80022c6:	b2d2      	uxtb	r2, r2
 80022c8:	4611      	mov	r1, r2
 80022ca:	4618      	mov	r0, r3
 80022cc:	f003 fc83 	bl	8005bd6 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	015a      	lsls	r2, r3, #5
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	4413      	add	r3, r2
 80022d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022e6:	d112      	bne.n	800230e <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	68fa      	ldr	r2, [r7, #12]
 80022ee:	b2d2      	uxtb	r2, r2
 80022f0:	4611      	mov	r1, r2
 80022f2:	4618      	mov	r0, r3
 80022f4:	f003 fc6f 	bl	8005bd6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	015a      	lsls	r2, r3, #5
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	4413      	add	r3, r2
 8002300:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002304:	461a      	mov	r2, r3
 8002306:	f44f 7300 	mov.w	r3, #512	; 0x200
 800230a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800230c:	e24e      	b.n	80027ac <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	015a      	lsls	r2, r3, #5
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	4413      	add	r3, r2
 8002316:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	f003 0301 	and.w	r3, r3, #1
 8002320:	2b01      	cmp	r3, #1
 8002322:	f040 80df 	bne.w	80024e4 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d019      	beq.n	8002362 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	212c      	movs	r1, #44	; 0x2c
 8002334:	fb01 f303 	mul.w	r3, r1, r3
 8002338:	4413      	add	r3, r2
 800233a:	3348      	adds	r3, #72	; 0x48
 800233c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	0159      	lsls	r1, r3, #5
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	440b      	add	r3, r1
 8002346:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800234a:	691b      	ldr	r3, [r3, #16]
 800234c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002350:	1ad2      	subs	r2, r2, r3
 8002352:	6879      	ldr	r1, [r7, #4]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	202c      	movs	r0, #44	; 0x2c
 8002358:	fb00 f303 	mul.w	r3, r0, r3
 800235c:	440b      	add	r3, r1
 800235e:	3350      	adds	r3, #80	; 0x50
 8002360:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	212c      	movs	r1, #44	; 0x2c
 8002368:	fb01 f303 	mul.w	r3, r1, r3
 800236c:	4413      	add	r3, r2
 800236e:	3361      	adds	r3, #97	; 0x61
 8002370:	2201      	movs	r2, #1
 8002372:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	212c      	movs	r1, #44	; 0x2c
 800237a:	fb01 f303 	mul.w	r3, r1, r3
 800237e:	4413      	add	r3, r2
 8002380:	335c      	adds	r3, #92	; 0x5c
 8002382:	2200      	movs	r2, #0
 8002384:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	015a      	lsls	r2, r3, #5
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	4413      	add	r3, r2
 800238e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002392:	461a      	mov	r2, r3
 8002394:	2301      	movs	r3, #1
 8002396:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	212c      	movs	r1, #44	; 0x2c
 800239e:	fb01 f303 	mul.w	r3, r1, r3
 80023a2:	4413      	add	r3, r2
 80023a4:	333f      	adds	r3, #63	; 0x3f
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d009      	beq.n	80023c0 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	212c      	movs	r1, #44	; 0x2c
 80023b2:	fb01 f303 	mul.w	r3, r1, r3
 80023b6:	4413      	add	r3, r2
 80023b8:	333f      	adds	r3, #63	; 0x3f
 80023ba:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d111      	bne.n	80023e4 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	68fa      	ldr	r2, [r7, #12]
 80023c6:	b2d2      	uxtb	r2, r2
 80023c8:	4611      	mov	r1, r2
 80023ca:	4618      	mov	r0, r3
 80023cc:	f003 fc03 	bl	8005bd6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	015a      	lsls	r2, r3, #5
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	4413      	add	r3, r2
 80023d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023dc:	461a      	mov	r2, r3
 80023de:	2310      	movs	r3, #16
 80023e0:	6093      	str	r3, [r2, #8]
 80023e2:	e03a      	b.n	800245a <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	212c      	movs	r1, #44	; 0x2c
 80023ea:	fb01 f303 	mul.w	r3, r1, r3
 80023ee:	4413      	add	r3, r2
 80023f0:	333f      	adds	r3, #63	; 0x3f
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	2b03      	cmp	r3, #3
 80023f6:	d009      	beq.n	800240c <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	212c      	movs	r1, #44	; 0x2c
 80023fe:	fb01 f303 	mul.w	r3, r1, r3
 8002402:	4413      	add	r3, r2
 8002404:	333f      	adds	r3, #63	; 0x3f
 8002406:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002408:	2b01      	cmp	r3, #1
 800240a:	d126      	bne.n	800245a <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	015a      	lsls	r2, r3, #5
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	4413      	add	r3, r2
 8002414:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	68fa      	ldr	r2, [r7, #12]
 800241c:	0151      	lsls	r1, r2, #5
 800241e:	693a      	ldr	r2, [r7, #16]
 8002420:	440a      	add	r2, r1
 8002422:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002426:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800242a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	212c      	movs	r1, #44	; 0x2c
 8002432:	fb01 f303 	mul.w	r3, r1, r3
 8002436:	4413      	add	r3, r2
 8002438:	3360      	adds	r3, #96	; 0x60
 800243a:	2201      	movs	r2, #1
 800243c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	b2d9      	uxtb	r1, r3
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	202c      	movs	r0, #44	; 0x2c
 8002448:	fb00 f303 	mul.w	r3, r0, r3
 800244c:	4413      	add	r3, r2
 800244e:	3360      	adds	r3, #96	; 0x60
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	461a      	mov	r2, r3
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	f005 fe61 	bl	800811c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	691b      	ldr	r3, [r3, #16]
 800245e:	2b01      	cmp	r3, #1
 8002460:	d12b      	bne.n	80024ba <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	212c      	movs	r1, #44	; 0x2c
 8002468:	fb01 f303 	mul.w	r3, r1, r3
 800246c:	4413      	add	r3, r2
 800246e:	3348      	adds	r3, #72	; 0x48
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	6879      	ldr	r1, [r7, #4]
 8002474:	68fa      	ldr	r2, [r7, #12]
 8002476:	202c      	movs	r0, #44	; 0x2c
 8002478:	fb00 f202 	mul.w	r2, r0, r2
 800247c:	440a      	add	r2, r1
 800247e:	3240      	adds	r2, #64	; 0x40
 8002480:	8812      	ldrh	r2, [r2, #0]
 8002482:	fbb3 f3f2 	udiv	r3, r3, r2
 8002486:	f003 0301 	and.w	r3, r3, #1
 800248a:	2b00      	cmp	r3, #0
 800248c:	f000 818e 	beq.w	80027ac <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	212c      	movs	r1, #44	; 0x2c
 8002496:	fb01 f303 	mul.w	r3, r1, r3
 800249a:	4413      	add	r3, r2
 800249c:	3354      	adds	r3, #84	; 0x54
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	f083 0301 	eor.w	r3, r3, #1
 80024a4:	b2d8      	uxtb	r0, r3
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	212c      	movs	r1, #44	; 0x2c
 80024ac:	fb01 f303 	mul.w	r3, r1, r3
 80024b0:	4413      	add	r3, r2
 80024b2:	3354      	adds	r3, #84	; 0x54
 80024b4:	4602      	mov	r2, r0
 80024b6:	701a      	strb	r2, [r3, #0]
}
 80024b8:	e178      	b.n	80027ac <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	212c      	movs	r1, #44	; 0x2c
 80024c0:	fb01 f303 	mul.w	r3, r1, r3
 80024c4:	4413      	add	r3, r2
 80024c6:	3354      	adds	r3, #84	; 0x54
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	f083 0301 	eor.w	r3, r3, #1
 80024ce:	b2d8      	uxtb	r0, r3
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	212c      	movs	r1, #44	; 0x2c
 80024d6:	fb01 f303 	mul.w	r3, r1, r3
 80024da:	4413      	add	r3, r2
 80024dc:	3354      	adds	r3, #84	; 0x54
 80024de:	4602      	mov	r2, r0
 80024e0:	701a      	strb	r2, [r3, #0]
}
 80024e2:	e163      	b.n	80027ac <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	015a      	lsls	r2, r3, #5
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	4413      	add	r3, r2
 80024ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f003 0302 	and.w	r3, r3, #2
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	f040 80f6 	bne.w	80026e8 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	212c      	movs	r1, #44	; 0x2c
 8002502:	fb01 f303 	mul.w	r3, r1, r3
 8002506:	4413      	add	r3, r2
 8002508:	3361      	adds	r3, #97	; 0x61
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	2b01      	cmp	r3, #1
 800250e:	d109      	bne.n	8002524 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	212c      	movs	r1, #44	; 0x2c
 8002516:	fb01 f303 	mul.w	r3, r1, r3
 800251a:	4413      	add	r3, r2
 800251c:	3360      	adds	r3, #96	; 0x60
 800251e:	2201      	movs	r2, #1
 8002520:	701a      	strb	r2, [r3, #0]
 8002522:	e0c9      	b.n	80026b8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	212c      	movs	r1, #44	; 0x2c
 800252a:	fb01 f303 	mul.w	r3, r1, r3
 800252e:	4413      	add	r3, r2
 8002530:	3361      	adds	r3, #97	; 0x61
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	2b05      	cmp	r3, #5
 8002536:	d109      	bne.n	800254c <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	212c      	movs	r1, #44	; 0x2c
 800253e:	fb01 f303 	mul.w	r3, r1, r3
 8002542:	4413      	add	r3, r2
 8002544:	3360      	adds	r3, #96	; 0x60
 8002546:	2205      	movs	r2, #5
 8002548:	701a      	strb	r2, [r3, #0]
 800254a:	e0b5      	b.n	80026b8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	212c      	movs	r1, #44	; 0x2c
 8002552:	fb01 f303 	mul.w	r3, r1, r3
 8002556:	4413      	add	r3, r2
 8002558:	3361      	adds	r3, #97	; 0x61
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	2b06      	cmp	r3, #6
 800255e:	d009      	beq.n	8002574 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	212c      	movs	r1, #44	; 0x2c
 8002566:	fb01 f303 	mul.w	r3, r1, r3
 800256a:	4413      	add	r3, r2
 800256c:	3361      	adds	r3, #97	; 0x61
 800256e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002570:	2b08      	cmp	r3, #8
 8002572:	d150      	bne.n	8002616 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	212c      	movs	r1, #44	; 0x2c
 800257a:	fb01 f303 	mul.w	r3, r1, r3
 800257e:	4413      	add	r3, r2
 8002580:	335c      	adds	r3, #92	; 0x5c
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	1c5a      	adds	r2, r3, #1
 8002586:	6879      	ldr	r1, [r7, #4]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	202c      	movs	r0, #44	; 0x2c
 800258c:	fb00 f303 	mul.w	r3, r0, r3
 8002590:	440b      	add	r3, r1
 8002592:	335c      	adds	r3, #92	; 0x5c
 8002594:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	212c      	movs	r1, #44	; 0x2c
 800259c:	fb01 f303 	mul.w	r3, r1, r3
 80025a0:	4413      	add	r3, r2
 80025a2:	335c      	adds	r3, #92	; 0x5c
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d912      	bls.n	80025d0 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	212c      	movs	r1, #44	; 0x2c
 80025b0:	fb01 f303 	mul.w	r3, r1, r3
 80025b4:	4413      	add	r3, r2
 80025b6:	335c      	adds	r3, #92	; 0x5c
 80025b8:	2200      	movs	r2, #0
 80025ba:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	212c      	movs	r1, #44	; 0x2c
 80025c2:	fb01 f303 	mul.w	r3, r1, r3
 80025c6:	4413      	add	r3, r2
 80025c8:	3360      	adds	r3, #96	; 0x60
 80025ca:	2204      	movs	r2, #4
 80025cc:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80025ce:	e073      	b.n	80026b8 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	212c      	movs	r1, #44	; 0x2c
 80025d6:	fb01 f303 	mul.w	r3, r1, r3
 80025da:	4413      	add	r3, r2
 80025dc:	3360      	adds	r3, #96	; 0x60
 80025de:	2202      	movs	r2, #2
 80025e0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	015a      	lsls	r2, r3, #5
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	4413      	add	r3, r2
 80025ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80025f8:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002600:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	015a      	lsls	r2, r3, #5
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	4413      	add	r3, r2
 800260a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800260e:	461a      	mov	r2, r3
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002614:	e050      	b.n	80026b8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	212c      	movs	r1, #44	; 0x2c
 800261c:	fb01 f303 	mul.w	r3, r1, r3
 8002620:	4413      	add	r3, r2
 8002622:	3361      	adds	r3, #97	; 0x61
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	2b03      	cmp	r3, #3
 8002628:	d122      	bne.n	8002670 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	212c      	movs	r1, #44	; 0x2c
 8002630:	fb01 f303 	mul.w	r3, r1, r3
 8002634:	4413      	add	r3, r2
 8002636:	3360      	adds	r3, #96	; 0x60
 8002638:	2202      	movs	r2, #2
 800263a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	015a      	lsls	r2, r3, #5
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	4413      	add	r3, r2
 8002644:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002652:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800265a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	015a      	lsls	r2, r3, #5
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	4413      	add	r3, r2
 8002664:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002668:	461a      	mov	r2, r3
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	6013      	str	r3, [r2, #0]
 800266e:	e023      	b.n	80026b8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	212c      	movs	r1, #44	; 0x2c
 8002676:	fb01 f303 	mul.w	r3, r1, r3
 800267a:	4413      	add	r3, r2
 800267c:	3361      	adds	r3, #97	; 0x61
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	2b07      	cmp	r3, #7
 8002682:	d119      	bne.n	80026b8 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	212c      	movs	r1, #44	; 0x2c
 800268a:	fb01 f303 	mul.w	r3, r1, r3
 800268e:	4413      	add	r3, r2
 8002690:	335c      	adds	r3, #92	; 0x5c
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	1c5a      	adds	r2, r3, #1
 8002696:	6879      	ldr	r1, [r7, #4]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	202c      	movs	r0, #44	; 0x2c
 800269c:	fb00 f303 	mul.w	r3, r0, r3
 80026a0:	440b      	add	r3, r1
 80026a2:	335c      	adds	r3, #92	; 0x5c
 80026a4:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	212c      	movs	r1, #44	; 0x2c
 80026ac:	fb01 f303 	mul.w	r3, r1, r3
 80026b0:	4413      	add	r3, r2
 80026b2:	3360      	adds	r3, #96	; 0x60
 80026b4:	2204      	movs	r2, #4
 80026b6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	015a      	lsls	r2, r3, #5
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	4413      	add	r3, r2
 80026c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026c4:	461a      	mov	r2, r3
 80026c6:	2302      	movs	r3, #2
 80026c8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	b2d9      	uxtb	r1, r3
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	202c      	movs	r0, #44	; 0x2c
 80026d4:	fb00 f303 	mul.w	r3, r0, r3
 80026d8:	4413      	add	r3, r2
 80026da:	3360      	adds	r3, #96	; 0x60
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	461a      	mov	r2, r3
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f005 fd1b 	bl	800811c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80026e6:	e061      	b.n	80027ac <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	015a      	lsls	r2, r3, #5
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	4413      	add	r3, r2
 80026f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f003 0310 	and.w	r3, r3, #16
 80026fa:	2b10      	cmp	r3, #16
 80026fc:	d156      	bne.n	80027ac <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	212c      	movs	r1, #44	; 0x2c
 8002704:	fb01 f303 	mul.w	r3, r1, r3
 8002708:	4413      	add	r3, r2
 800270a:	333f      	adds	r3, #63	; 0x3f
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	2b03      	cmp	r3, #3
 8002710:	d111      	bne.n	8002736 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	212c      	movs	r1, #44	; 0x2c
 8002718:	fb01 f303 	mul.w	r3, r1, r3
 800271c:	4413      	add	r3, r2
 800271e:	335c      	adds	r3, #92	; 0x5c
 8002720:	2200      	movs	r2, #0
 8002722:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	68fa      	ldr	r2, [r7, #12]
 800272a:	b2d2      	uxtb	r2, r2
 800272c:	4611      	mov	r1, r2
 800272e:	4618      	mov	r0, r3
 8002730:	f003 fa51 	bl	8005bd6 <USB_HC_Halt>
 8002734:	e031      	b.n	800279a <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	212c      	movs	r1, #44	; 0x2c
 800273c:	fb01 f303 	mul.w	r3, r1, r3
 8002740:	4413      	add	r3, r2
 8002742:	333f      	adds	r3, #63	; 0x3f
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d009      	beq.n	800275e <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	212c      	movs	r1, #44	; 0x2c
 8002750:	fb01 f303 	mul.w	r3, r1, r3
 8002754:	4413      	add	r3, r2
 8002756:	333f      	adds	r3, #63	; 0x3f
 8002758:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800275a:	2b02      	cmp	r3, #2
 800275c:	d11d      	bne.n	800279a <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	212c      	movs	r1, #44	; 0x2c
 8002764:	fb01 f303 	mul.w	r3, r1, r3
 8002768:	4413      	add	r3, r2
 800276a:	335c      	adds	r3, #92	; 0x5c
 800276c:	2200      	movs	r2, #0
 800276e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	691b      	ldr	r3, [r3, #16]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d110      	bne.n	800279a <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	212c      	movs	r1, #44	; 0x2c
 800277e:	fb01 f303 	mul.w	r3, r1, r3
 8002782:	4413      	add	r3, r2
 8002784:	3361      	adds	r3, #97	; 0x61
 8002786:	2203      	movs	r2, #3
 8002788:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	68fa      	ldr	r2, [r7, #12]
 8002790:	b2d2      	uxtb	r2, r2
 8002792:	4611      	mov	r1, r2
 8002794:	4618      	mov	r0, r3
 8002796:	f003 fa1e 	bl	8005bd6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	015a      	lsls	r2, r3, #5
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	4413      	add	r3, r2
 80027a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027a6:	461a      	mov	r2, r3
 80027a8:	2310      	movs	r3, #16
 80027aa:	6093      	str	r3, [r2, #8]
}
 80027ac:	bf00      	nop
 80027ae:	3718      	adds	r7, #24
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b088      	sub	sp, #32
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	460b      	mov	r3, r1
 80027be:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80027ca:	78fb      	ldrb	r3, [r7, #3]
 80027cc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	015a      	lsls	r2, r3, #5
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	4413      	add	r3, r2
 80027d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	f003 0304 	and.w	r3, r3, #4
 80027e0:	2b04      	cmp	r3, #4
 80027e2:	d11a      	bne.n	800281a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	015a      	lsls	r2, r3, #5
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	4413      	add	r3, r2
 80027ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027f0:	461a      	mov	r2, r3
 80027f2:	2304      	movs	r3, #4
 80027f4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	212c      	movs	r1, #44	; 0x2c
 80027fc:	fb01 f303 	mul.w	r3, r1, r3
 8002800:	4413      	add	r3, r2
 8002802:	3361      	adds	r3, #97	; 0x61
 8002804:	2206      	movs	r2, #6
 8002806:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	697a      	ldr	r2, [r7, #20]
 800280e:	b2d2      	uxtb	r2, r2
 8002810:	4611      	mov	r1, r2
 8002812:	4618      	mov	r0, r3
 8002814:	f003 f9df 	bl	8005bd6 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002818:	e331      	b.n	8002e7e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	015a      	lsls	r2, r3, #5
 800281e:	69bb      	ldr	r3, [r7, #24]
 8002820:	4413      	add	r3, r2
 8002822:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f003 0320 	and.w	r3, r3, #32
 800282c:	2b20      	cmp	r3, #32
 800282e:	d12e      	bne.n	800288e <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	015a      	lsls	r2, r3, #5
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	4413      	add	r3, r2
 8002838:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800283c:	461a      	mov	r2, r3
 800283e:	2320      	movs	r3, #32
 8002840:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	212c      	movs	r1, #44	; 0x2c
 8002848:	fb01 f303 	mul.w	r3, r1, r3
 800284c:	4413      	add	r3, r2
 800284e:	333d      	adds	r3, #61	; 0x3d
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	2b01      	cmp	r3, #1
 8002854:	f040 8313 	bne.w	8002e7e <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	212c      	movs	r1, #44	; 0x2c
 800285e:	fb01 f303 	mul.w	r3, r1, r3
 8002862:	4413      	add	r3, r2
 8002864:	333d      	adds	r3, #61	; 0x3d
 8002866:	2200      	movs	r2, #0
 8002868:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	212c      	movs	r1, #44	; 0x2c
 8002870:	fb01 f303 	mul.w	r3, r1, r3
 8002874:	4413      	add	r3, r2
 8002876:	3360      	adds	r3, #96	; 0x60
 8002878:	2202      	movs	r2, #2
 800287a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	697a      	ldr	r2, [r7, #20]
 8002882:	b2d2      	uxtb	r2, r2
 8002884:	4611      	mov	r1, r2
 8002886:	4618      	mov	r0, r3
 8002888:	f003 f9a5 	bl	8005bd6 <USB_HC_Halt>
}
 800288c:	e2f7      	b.n	8002e7e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	015a      	lsls	r2, r3, #5
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	4413      	add	r3, r2
 8002896:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028a4:	d112      	bne.n	80028cc <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	015a      	lsls	r2, r3, #5
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	4413      	add	r3, r2
 80028ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028b2:	461a      	mov	r2, r3
 80028b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028b8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	697a      	ldr	r2, [r7, #20]
 80028c0:	b2d2      	uxtb	r2, r2
 80028c2:	4611      	mov	r1, r2
 80028c4:	4618      	mov	r0, r3
 80028c6:	f003 f986 	bl	8005bd6 <USB_HC_Halt>
}
 80028ca:	e2d8      	b.n	8002e7e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	015a      	lsls	r2, r3, #5
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	4413      	add	r3, r2
 80028d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f003 0301 	and.w	r3, r3, #1
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d140      	bne.n	8002964 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	212c      	movs	r1, #44	; 0x2c
 80028e8:	fb01 f303 	mul.w	r3, r1, r3
 80028ec:	4413      	add	r3, r2
 80028ee:	335c      	adds	r3, #92	; 0x5c
 80028f0:	2200      	movs	r2, #0
 80028f2:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	015a      	lsls	r2, r3, #5
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	4413      	add	r3, r2
 80028fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002906:	2b40      	cmp	r3, #64	; 0x40
 8002908:	d111      	bne.n	800292e <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	212c      	movs	r1, #44	; 0x2c
 8002910:	fb01 f303 	mul.w	r3, r1, r3
 8002914:	4413      	add	r3, r2
 8002916:	333d      	adds	r3, #61	; 0x3d
 8002918:	2201      	movs	r2, #1
 800291a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	015a      	lsls	r2, r3, #5
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	4413      	add	r3, r2
 8002924:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002928:	461a      	mov	r2, r3
 800292a:	2340      	movs	r3, #64	; 0x40
 800292c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	015a      	lsls	r2, r3, #5
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	4413      	add	r3, r2
 8002936:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800293a:	461a      	mov	r2, r3
 800293c:	2301      	movs	r3, #1
 800293e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	212c      	movs	r1, #44	; 0x2c
 8002946:	fb01 f303 	mul.w	r3, r1, r3
 800294a:	4413      	add	r3, r2
 800294c:	3361      	adds	r3, #97	; 0x61
 800294e:	2201      	movs	r2, #1
 8002950:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	697a      	ldr	r2, [r7, #20]
 8002958:	b2d2      	uxtb	r2, r2
 800295a:	4611      	mov	r1, r2
 800295c:	4618      	mov	r0, r3
 800295e:	f003 f93a 	bl	8005bd6 <USB_HC_Halt>
}
 8002962:	e28c      	b.n	8002e7e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	015a      	lsls	r2, r3, #5
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	4413      	add	r3, r2
 800296c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002976:	2b40      	cmp	r3, #64	; 0x40
 8002978:	d12c      	bne.n	80029d4 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	212c      	movs	r1, #44	; 0x2c
 8002980:	fb01 f303 	mul.w	r3, r1, r3
 8002984:	4413      	add	r3, r2
 8002986:	3361      	adds	r3, #97	; 0x61
 8002988:	2204      	movs	r2, #4
 800298a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	212c      	movs	r1, #44	; 0x2c
 8002992:	fb01 f303 	mul.w	r3, r1, r3
 8002996:	4413      	add	r3, r2
 8002998:	333d      	adds	r3, #61	; 0x3d
 800299a:	2201      	movs	r2, #1
 800299c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	212c      	movs	r1, #44	; 0x2c
 80029a4:	fb01 f303 	mul.w	r3, r1, r3
 80029a8:	4413      	add	r3, r2
 80029aa:	335c      	adds	r3, #92	; 0x5c
 80029ac:	2200      	movs	r2, #0
 80029ae:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	697a      	ldr	r2, [r7, #20]
 80029b6:	b2d2      	uxtb	r2, r2
 80029b8:	4611      	mov	r1, r2
 80029ba:	4618      	mov	r0, r3
 80029bc:	f003 f90b 	bl	8005bd6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	015a      	lsls	r2, r3, #5
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	4413      	add	r3, r2
 80029c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029cc:	461a      	mov	r2, r3
 80029ce:	2340      	movs	r3, #64	; 0x40
 80029d0:	6093      	str	r3, [r2, #8]
}
 80029d2:	e254      	b.n	8002e7e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	015a      	lsls	r2, r3, #5
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	4413      	add	r3, r2
 80029dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f003 0308 	and.w	r3, r3, #8
 80029e6:	2b08      	cmp	r3, #8
 80029e8:	d11a      	bne.n	8002a20 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	015a      	lsls	r2, r3, #5
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	4413      	add	r3, r2
 80029f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029f6:	461a      	mov	r2, r3
 80029f8:	2308      	movs	r3, #8
 80029fa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	212c      	movs	r1, #44	; 0x2c
 8002a02:	fb01 f303 	mul.w	r3, r1, r3
 8002a06:	4413      	add	r3, r2
 8002a08:	3361      	adds	r3, #97	; 0x61
 8002a0a:	2205      	movs	r2, #5
 8002a0c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	697a      	ldr	r2, [r7, #20]
 8002a14:	b2d2      	uxtb	r2, r2
 8002a16:	4611      	mov	r1, r2
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f003 f8dc 	bl	8005bd6 <USB_HC_Halt>
}
 8002a1e:	e22e      	b.n	8002e7e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	015a      	lsls	r2, r3, #5
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	4413      	add	r3, r2
 8002a28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f003 0310 	and.w	r3, r3, #16
 8002a32:	2b10      	cmp	r3, #16
 8002a34:	d140      	bne.n	8002ab8 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	212c      	movs	r1, #44	; 0x2c
 8002a3c:	fb01 f303 	mul.w	r3, r1, r3
 8002a40:	4413      	add	r3, r2
 8002a42:	335c      	adds	r3, #92	; 0x5c
 8002a44:	2200      	movs	r2, #0
 8002a46:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	212c      	movs	r1, #44	; 0x2c
 8002a4e:	fb01 f303 	mul.w	r3, r1, r3
 8002a52:	4413      	add	r3, r2
 8002a54:	3361      	adds	r3, #97	; 0x61
 8002a56:	2203      	movs	r2, #3
 8002a58:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	212c      	movs	r1, #44	; 0x2c
 8002a60:	fb01 f303 	mul.w	r3, r1, r3
 8002a64:	4413      	add	r3, r2
 8002a66:	333d      	adds	r3, #61	; 0x3d
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d112      	bne.n	8002a94 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	212c      	movs	r1, #44	; 0x2c
 8002a74:	fb01 f303 	mul.w	r3, r1, r3
 8002a78:	4413      	add	r3, r2
 8002a7a:	333c      	adds	r3, #60	; 0x3c
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d108      	bne.n	8002a94 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	212c      	movs	r1, #44	; 0x2c
 8002a88:	fb01 f303 	mul.w	r3, r1, r3
 8002a8c:	4413      	add	r3, r2
 8002a8e:	333d      	adds	r3, #61	; 0x3d
 8002a90:	2201      	movs	r2, #1
 8002a92:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	697a      	ldr	r2, [r7, #20]
 8002a9a:	b2d2      	uxtb	r2, r2
 8002a9c:	4611      	mov	r1, r2
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f003 f899 	bl	8005bd6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	015a      	lsls	r2, r3, #5
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	4413      	add	r3, r2
 8002aac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	2310      	movs	r3, #16
 8002ab4:	6093      	str	r3, [r2, #8]
}
 8002ab6:	e1e2      	b.n	8002e7e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	015a      	lsls	r2, r3, #5
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	4413      	add	r3, r2
 8002ac0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aca:	2b80      	cmp	r3, #128	; 0x80
 8002acc:	d164      	bne.n	8002b98 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d111      	bne.n	8002afa <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	212c      	movs	r1, #44	; 0x2c
 8002adc:	fb01 f303 	mul.w	r3, r1, r3
 8002ae0:	4413      	add	r3, r2
 8002ae2:	3361      	adds	r3, #97	; 0x61
 8002ae4:	2206      	movs	r2, #6
 8002ae6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	697a      	ldr	r2, [r7, #20]
 8002aee:	b2d2      	uxtb	r2, r2
 8002af0:	4611      	mov	r1, r2
 8002af2:	4618      	mov	r0, r3
 8002af4:	f003 f86f 	bl	8005bd6 <USB_HC_Halt>
 8002af8:	e044      	b.n	8002b84 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	212c      	movs	r1, #44	; 0x2c
 8002b00:	fb01 f303 	mul.w	r3, r1, r3
 8002b04:	4413      	add	r3, r2
 8002b06:	335c      	adds	r3, #92	; 0x5c
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	1c5a      	adds	r2, r3, #1
 8002b0c:	6879      	ldr	r1, [r7, #4]
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	202c      	movs	r0, #44	; 0x2c
 8002b12:	fb00 f303 	mul.w	r3, r0, r3
 8002b16:	440b      	add	r3, r1
 8002b18:	335c      	adds	r3, #92	; 0x5c
 8002b1a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	212c      	movs	r1, #44	; 0x2c
 8002b22:	fb01 f303 	mul.w	r3, r1, r3
 8002b26:	4413      	add	r3, r2
 8002b28:	335c      	adds	r3, #92	; 0x5c
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d920      	bls.n	8002b72 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	212c      	movs	r1, #44	; 0x2c
 8002b36:	fb01 f303 	mul.w	r3, r1, r3
 8002b3a:	4413      	add	r3, r2
 8002b3c:	335c      	adds	r3, #92	; 0x5c
 8002b3e:	2200      	movs	r2, #0
 8002b40:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	212c      	movs	r1, #44	; 0x2c
 8002b48:	fb01 f303 	mul.w	r3, r1, r3
 8002b4c:	4413      	add	r3, r2
 8002b4e:	3360      	adds	r3, #96	; 0x60
 8002b50:	2204      	movs	r2, #4
 8002b52:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	b2d9      	uxtb	r1, r3
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	202c      	movs	r0, #44	; 0x2c
 8002b5e:	fb00 f303 	mul.w	r3, r0, r3
 8002b62:	4413      	add	r3, r2
 8002b64:	3360      	adds	r3, #96	; 0x60
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	461a      	mov	r2, r3
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f005 fad6 	bl	800811c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002b70:	e008      	b.n	8002b84 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	212c      	movs	r1, #44	; 0x2c
 8002b78:	fb01 f303 	mul.w	r3, r1, r3
 8002b7c:	4413      	add	r3, r2
 8002b7e:	3360      	adds	r3, #96	; 0x60
 8002b80:	2202      	movs	r2, #2
 8002b82:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	015a      	lsls	r2, r3, #5
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b90:	461a      	mov	r2, r3
 8002b92:	2380      	movs	r3, #128	; 0x80
 8002b94:	6093      	str	r3, [r2, #8]
}
 8002b96:	e172      	b.n	8002e7e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	015a      	lsls	r2, r3, #5
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	4413      	add	r3, r2
 8002ba0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002baa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bae:	d11b      	bne.n	8002be8 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	212c      	movs	r1, #44	; 0x2c
 8002bb6:	fb01 f303 	mul.w	r3, r1, r3
 8002bba:	4413      	add	r3, r2
 8002bbc:	3361      	adds	r3, #97	; 0x61
 8002bbe:	2208      	movs	r2, #8
 8002bc0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	697a      	ldr	r2, [r7, #20]
 8002bc8:	b2d2      	uxtb	r2, r2
 8002bca:	4611      	mov	r1, r2
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f003 f802 	bl	8005bd6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	015a      	lsls	r2, r3, #5
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	4413      	add	r3, r2
 8002bda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bde:	461a      	mov	r2, r3
 8002be0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002be4:	6093      	str	r3, [r2, #8]
}
 8002be6:	e14a      	b.n	8002e7e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	015a      	lsls	r2, r3, #5
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	4413      	add	r3, r2
 8002bf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	f003 0302 	and.w	r3, r3, #2
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	f040 813f 	bne.w	8002e7e <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	212c      	movs	r1, #44	; 0x2c
 8002c06:	fb01 f303 	mul.w	r3, r1, r3
 8002c0a:	4413      	add	r3, r2
 8002c0c:	3361      	adds	r3, #97	; 0x61
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d17d      	bne.n	8002d10 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	212c      	movs	r1, #44	; 0x2c
 8002c1a:	fb01 f303 	mul.w	r3, r1, r3
 8002c1e:	4413      	add	r3, r2
 8002c20:	3360      	adds	r3, #96	; 0x60
 8002c22:	2201      	movs	r2, #1
 8002c24:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	212c      	movs	r1, #44	; 0x2c
 8002c2c:	fb01 f303 	mul.w	r3, r1, r3
 8002c30:	4413      	add	r3, r2
 8002c32:	333f      	adds	r3, #63	; 0x3f
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d00a      	beq.n	8002c50 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	212c      	movs	r1, #44	; 0x2c
 8002c40:	fb01 f303 	mul.w	r3, r1, r3
 8002c44:	4413      	add	r3, r2
 8002c46:	333f      	adds	r3, #63	; 0x3f
 8002c48:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002c4a:	2b03      	cmp	r3, #3
 8002c4c:	f040 8100 	bne.w	8002e50 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	691b      	ldr	r3, [r3, #16]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d113      	bne.n	8002c80 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	212c      	movs	r1, #44	; 0x2c
 8002c5e:	fb01 f303 	mul.w	r3, r1, r3
 8002c62:	4413      	add	r3, r2
 8002c64:	3355      	adds	r3, #85	; 0x55
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	f083 0301 	eor.w	r3, r3, #1
 8002c6c:	b2d8      	uxtb	r0, r3
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	212c      	movs	r1, #44	; 0x2c
 8002c74:	fb01 f303 	mul.w	r3, r1, r3
 8002c78:	4413      	add	r3, r2
 8002c7a:	3355      	adds	r3, #85	; 0x55
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	691b      	ldr	r3, [r3, #16]
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	f040 80e3 	bne.w	8002e50 <HCD_HC_OUT_IRQHandler+0x69c>
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	212c      	movs	r1, #44	; 0x2c
 8002c90:	fb01 f303 	mul.w	r3, r1, r3
 8002c94:	4413      	add	r3, r2
 8002c96:	334c      	adds	r3, #76	; 0x4c
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	f000 80d8 	beq.w	8002e50 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	212c      	movs	r1, #44	; 0x2c
 8002ca6:	fb01 f303 	mul.w	r3, r1, r3
 8002caa:	4413      	add	r3, r2
 8002cac:	334c      	adds	r3, #76	; 0x4c
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	6879      	ldr	r1, [r7, #4]
 8002cb2:	697a      	ldr	r2, [r7, #20]
 8002cb4:	202c      	movs	r0, #44	; 0x2c
 8002cb6:	fb00 f202 	mul.w	r2, r0, r2
 8002cba:	440a      	add	r2, r1
 8002cbc:	3240      	adds	r2, #64	; 0x40
 8002cbe:	8812      	ldrh	r2, [r2, #0]
 8002cc0:	4413      	add	r3, r2
 8002cc2:	3b01      	subs	r3, #1
 8002cc4:	6879      	ldr	r1, [r7, #4]
 8002cc6:	697a      	ldr	r2, [r7, #20]
 8002cc8:	202c      	movs	r0, #44	; 0x2c
 8002cca:	fb00 f202 	mul.w	r2, r0, r2
 8002cce:	440a      	add	r2, r1
 8002cd0:	3240      	adds	r2, #64	; 0x40
 8002cd2:	8812      	ldrh	r2, [r2, #0]
 8002cd4:	fbb3 f3f2 	udiv	r3, r3, r2
 8002cd8:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	f003 0301 	and.w	r3, r3, #1
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	f000 80b5 	beq.w	8002e50 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	212c      	movs	r1, #44	; 0x2c
 8002cec:	fb01 f303 	mul.w	r3, r1, r3
 8002cf0:	4413      	add	r3, r2
 8002cf2:	3355      	adds	r3, #85	; 0x55
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	f083 0301 	eor.w	r3, r3, #1
 8002cfa:	b2d8      	uxtb	r0, r3
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	212c      	movs	r1, #44	; 0x2c
 8002d02:	fb01 f303 	mul.w	r3, r1, r3
 8002d06:	4413      	add	r3, r2
 8002d08:	3355      	adds	r3, #85	; 0x55
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	701a      	strb	r2, [r3, #0]
 8002d0e:	e09f      	b.n	8002e50 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	212c      	movs	r1, #44	; 0x2c
 8002d16:	fb01 f303 	mul.w	r3, r1, r3
 8002d1a:	4413      	add	r3, r2
 8002d1c:	3361      	adds	r3, #97	; 0x61
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	2b03      	cmp	r3, #3
 8002d22:	d109      	bne.n	8002d38 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	212c      	movs	r1, #44	; 0x2c
 8002d2a:	fb01 f303 	mul.w	r3, r1, r3
 8002d2e:	4413      	add	r3, r2
 8002d30:	3360      	adds	r3, #96	; 0x60
 8002d32:	2202      	movs	r2, #2
 8002d34:	701a      	strb	r2, [r3, #0]
 8002d36:	e08b      	b.n	8002e50 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	212c      	movs	r1, #44	; 0x2c
 8002d3e:	fb01 f303 	mul.w	r3, r1, r3
 8002d42:	4413      	add	r3, r2
 8002d44:	3361      	adds	r3, #97	; 0x61
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	2b04      	cmp	r3, #4
 8002d4a:	d109      	bne.n	8002d60 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	212c      	movs	r1, #44	; 0x2c
 8002d52:	fb01 f303 	mul.w	r3, r1, r3
 8002d56:	4413      	add	r3, r2
 8002d58:	3360      	adds	r3, #96	; 0x60
 8002d5a:	2202      	movs	r2, #2
 8002d5c:	701a      	strb	r2, [r3, #0]
 8002d5e:	e077      	b.n	8002e50 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	212c      	movs	r1, #44	; 0x2c
 8002d66:	fb01 f303 	mul.w	r3, r1, r3
 8002d6a:	4413      	add	r3, r2
 8002d6c:	3361      	adds	r3, #97	; 0x61
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	2b05      	cmp	r3, #5
 8002d72:	d109      	bne.n	8002d88 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	212c      	movs	r1, #44	; 0x2c
 8002d7a:	fb01 f303 	mul.w	r3, r1, r3
 8002d7e:	4413      	add	r3, r2
 8002d80:	3360      	adds	r3, #96	; 0x60
 8002d82:	2205      	movs	r2, #5
 8002d84:	701a      	strb	r2, [r3, #0]
 8002d86:	e063      	b.n	8002e50 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	212c      	movs	r1, #44	; 0x2c
 8002d8e:	fb01 f303 	mul.w	r3, r1, r3
 8002d92:	4413      	add	r3, r2
 8002d94:	3361      	adds	r3, #97	; 0x61
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	2b06      	cmp	r3, #6
 8002d9a:	d009      	beq.n	8002db0 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	212c      	movs	r1, #44	; 0x2c
 8002da2:	fb01 f303 	mul.w	r3, r1, r3
 8002da6:	4413      	add	r3, r2
 8002da8:	3361      	adds	r3, #97	; 0x61
 8002daa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002dac:	2b08      	cmp	r3, #8
 8002dae:	d14f      	bne.n	8002e50 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	212c      	movs	r1, #44	; 0x2c
 8002db6:	fb01 f303 	mul.w	r3, r1, r3
 8002dba:	4413      	add	r3, r2
 8002dbc:	335c      	adds	r3, #92	; 0x5c
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	1c5a      	adds	r2, r3, #1
 8002dc2:	6879      	ldr	r1, [r7, #4]
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	202c      	movs	r0, #44	; 0x2c
 8002dc8:	fb00 f303 	mul.w	r3, r0, r3
 8002dcc:	440b      	add	r3, r1
 8002dce:	335c      	adds	r3, #92	; 0x5c
 8002dd0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	212c      	movs	r1, #44	; 0x2c
 8002dd8:	fb01 f303 	mul.w	r3, r1, r3
 8002ddc:	4413      	add	r3, r2
 8002dde:	335c      	adds	r3, #92	; 0x5c
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d912      	bls.n	8002e0c <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	212c      	movs	r1, #44	; 0x2c
 8002dec:	fb01 f303 	mul.w	r3, r1, r3
 8002df0:	4413      	add	r3, r2
 8002df2:	335c      	adds	r3, #92	; 0x5c
 8002df4:	2200      	movs	r2, #0
 8002df6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	212c      	movs	r1, #44	; 0x2c
 8002dfe:	fb01 f303 	mul.w	r3, r1, r3
 8002e02:	4413      	add	r3, r2
 8002e04:	3360      	adds	r3, #96	; 0x60
 8002e06:	2204      	movs	r2, #4
 8002e08:	701a      	strb	r2, [r3, #0]
 8002e0a:	e021      	b.n	8002e50 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	212c      	movs	r1, #44	; 0x2c
 8002e12:	fb01 f303 	mul.w	r3, r1, r3
 8002e16:	4413      	add	r3, r2
 8002e18:	3360      	adds	r3, #96	; 0x60
 8002e1a:	2202      	movs	r2, #2
 8002e1c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	015a      	lsls	r2, r3, #5
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	4413      	add	r3, r2
 8002e26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e34:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e3c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	015a      	lsls	r2, r3, #5
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	4413      	add	r3, r2
 8002e46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	015a      	lsls	r2, r3, #5
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	4413      	add	r3, r2
 8002e58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	2302      	movs	r3, #2
 8002e60:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	b2d9      	uxtb	r1, r3
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	202c      	movs	r0, #44	; 0x2c
 8002e6c:	fb00 f303 	mul.w	r3, r0, r3
 8002e70:	4413      	add	r3, r2
 8002e72:	3360      	adds	r3, #96	; 0x60
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	461a      	mov	r2, r3
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f005 f94f 	bl	800811c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002e7e:	bf00      	nop
 8002e80:	3720      	adds	r7, #32
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}

08002e86 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002e86:	b580      	push	{r7, lr}
 8002e88:	b08a      	sub	sp, #40	; 0x28
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e96:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	6a1b      	ldr	r3, [r3, #32]
 8002e9e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	f003 030f 	and.w	r3, r3, #15
 8002ea6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	0c5b      	lsrs	r3, r3, #17
 8002eac:	f003 030f 	and.w	r3, r3, #15
 8002eb0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	091b      	lsrs	r3, r3, #4
 8002eb6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002eba:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d004      	beq.n	8002ecc <HCD_RXQLVL_IRQHandler+0x46>
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	2b05      	cmp	r3, #5
 8002ec6:	f000 80a9 	beq.w	800301c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002eca:	e0aa      	b.n	8003022 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	f000 80a6 	beq.w	8003020 <HCD_RXQLVL_IRQHandler+0x19a>
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	212c      	movs	r1, #44	; 0x2c
 8002eda:	fb01 f303 	mul.w	r3, r1, r3
 8002ede:	4413      	add	r3, r2
 8002ee0:	3344      	adds	r3, #68	; 0x44
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	f000 809b 	beq.w	8003020 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	212c      	movs	r1, #44	; 0x2c
 8002ef0:	fb01 f303 	mul.w	r3, r1, r3
 8002ef4:	4413      	add	r3, r2
 8002ef6:	3350      	adds	r3, #80	; 0x50
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	441a      	add	r2, r3
 8002efe:	6879      	ldr	r1, [r7, #4]
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	202c      	movs	r0, #44	; 0x2c
 8002f04:	fb00 f303 	mul.w	r3, r0, r3
 8002f08:	440b      	add	r3, r1
 8002f0a:	334c      	adds	r3, #76	; 0x4c
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d87a      	bhi.n	8003008 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6818      	ldr	r0, [r3, #0]
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	212c      	movs	r1, #44	; 0x2c
 8002f1c:	fb01 f303 	mul.w	r3, r1, r3
 8002f20:	4413      	add	r3, r2
 8002f22:	3344      	adds	r3, #68	; 0x44
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	693a      	ldr	r2, [r7, #16]
 8002f28:	b292      	uxth	r2, r2
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	f002 f9aa 	bl	8005284 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	212c      	movs	r1, #44	; 0x2c
 8002f36:	fb01 f303 	mul.w	r3, r1, r3
 8002f3a:	4413      	add	r3, r2
 8002f3c:	3344      	adds	r3, #68	; 0x44
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	441a      	add	r2, r3
 8002f44:	6879      	ldr	r1, [r7, #4]
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	202c      	movs	r0, #44	; 0x2c
 8002f4a:	fb00 f303 	mul.w	r3, r0, r3
 8002f4e:	440b      	add	r3, r1
 8002f50:	3344      	adds	r3, #68	; 0x44
 8002f52:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	69bb      	ldr	r3, [r7, #24]
 8002f58:	212c      	movs	r1, #44	; 0x2c
 8002f5a:	fb01 f303 	mul.w	r3, r1, r3
 8002f5e:	4413      	add	r3, r2
 8002f60:	3350      	adds	r3, #80	; 0x50
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	441a      	add	r2, r3
 8002f68:	6879      	ldr	r1, [r7, #4]
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	202c      	movs	r0, #44	; 0x2c
 8002f6e:	fb00 f303 	mul.w	r3, r0, r3
 8002f72:	440b      	add	r3, r1
 8002f74:	3350      	adds	r3, #80	; 0x50
 8002f76:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	015a      	lsls	r2, r3, #5
 8002f7c:	6a3b      	ldr	r3, [r7, #32]
 8002f7e:	4413      	add	r3, r2
 8002f80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f84:	691b      	ldr	r3, [r3, #16]
 8002f86:	0cdb      	lsrs	r3, r3, #19
 8002f88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f8c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	212c      	movs	r1, #44	; 0x2c
 8002f94:	fb01 f303 	mul.w	r3, r1, r3
 8002f98:	4413      	add	r3, r2
 8002f9a:	3340      	adds	r3, #64	; 0x40
 8002f9c:	881b      	ldrh	r3, [r3, #0]
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d13c      	bne.n	8003020 <HCD_RXQLVL_IRQHandler+0x19a>
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d039      	beq.n	8003020 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	015a      	lsls	r2, r3, #5
 8002fb0:	6a3b      	ldr	r3, [r7, #32]
 8002fb2:	4413      	add	r3, r2
 8002fb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002fc2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002fca:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	015a      	lsls	r2, r3, #5
 8002fd0:	6a3b      	ldr	r3, [r7, #32]
 8002fd2:	4413      	add	r3, r2
 8002fd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fd8:	461a      	mov	r2, r3
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	212c      	movs	r1, #44	; 0x2c
 8002fe4:	fb01 f303 	mul.w	r3, r1, r3
 8002fe8:	4413      	add	r3, r2
 8002fea:	3354      	adds	r3, #84	; 0x54
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	f083 0301 	eor.w	r3, r3, #1
 8002ff2:	b2d8      	uxtb	r0, r3
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	212c      	movs	r1, #44	; 0x2c
 8002ffa:	fb01 f303 	mul.w	r3, r1, r3
 8002ffe:	4413      	add	r3, r2
 8003000:	3354      	adds	r3, #84	; 0x54
 8003002:	4602      	mov	r2, r0
 8003004:	701a      	strb	r2, [r3, #0]
      break;
 8003006:	e00b      	b.n	8003020 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	212c      	movs	r1, #44	; 0x2c
 800300e:	fb01 f303 	mul.w	r3, r1, r3
 8003012:	4413      	add	r3, r2
 8003014:	3360      	adds	r3, #96	; 0x60
 8003016:	2204      	movs	r2, #4
 8003018:	701a      	strb	r2, [r3, #0]
      break;
 800301a:	e001      	b.n	8003020 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800301c:	bf00      	nop
 800301e:	e000      	b.n	8003022 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003020:	bf00      	nop
  }
}
 8003022:	bf00      	nop
 8003024:	3728      	adds	r7, #40	; 0x28
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}

0800302a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800302a:	b580      	push	{r7, lr}
 800302c:	b086      	sub	sp, #24
 800302e:	af00      	add	r7, sp, #0
 8003030:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003056:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f003 0302 	and.w	r3, r3, #2
 800305e:	2b02      	cmp	r3, #2
 8003060:	d10b      	bne.n	800307a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f003 0301 	and.w	r3, r3, #1
 8003068:	2b01      	cmp	r3, #1
 800306a:	d102      	bne.n	8003072 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f005 f839 	bl	80080e4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	f043 0302 	orr.w	r3, r3, #2
 8003078:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	f003 0308 	and.w	r3, r3, #8
 8003080:	2b08      	cmp	r3, #8
 8003082:	d132      	bne.n	80030ea <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	f043 0308 	orr.w	r3, r3, #8
 800308a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f003 0304 	and.w	r3, r3, #4
 8003092:	2b04      	cmp	r3, #4
 8003094:	d126      	bne.n	80030e4 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	2b02      	cmp	r3, #2
 800309c:	d113      	bne.n	80030c6 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80030a4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80030a8:	d106      	bne.n	80030b8 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	2102      	movs	r1, #2
 80030b0:	4618      	mov	r0, r3
 80030b2:	f002 fa55 	bl	8005560 <USB_InitFSLSPClkSel>
 80030b6:	e011      	b.n	80030dc <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2101      	movs	r1, #1
 80030be:	4618      	mov	r0, r3
 80030c0:	f002 fa4e 	bl	8005560 <USB_InitFSLSPClkSel>
 80030c4:	e00a      	b.n	80030dc <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d106      	bne.n	80030dc <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80030d4:	461a      	mov	r2, r3
 80030d6:	f64e 2360 	movw	r3, #60000	; 0xea60
 80030da:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f005 f82b 	bl	8008138 <HAL_HCD_PortEnabled_Callback>
 80030e2:	e002      	b.n	80030ea <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f005 f835 	bl	8008154 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	f003 0320 	and.w	r3, r3, #32
 80030f0:	2b20      	cmp	r3, #32
 80030f2:	d103      	bne.n	80030fc <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	f043 0320 	orr.w	r3, r3, #32
 80030fa:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003102:	461a      	mov	r2, r3
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	6013      	str	r3, [r2, #0]
}
 8003108:	bf00      	nop
 800310a:	3718      	adds	r7, #24
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}

08003110 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d101      	bne.n	8003122 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e12b      	b.n	800337a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003128:	b2db      	uxtb	r3, r3
 800312a:	2b00      	cmp	r3, #0
 800312c:	d106      	bne.n	800313c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f7fd fb16 	bl	8000768 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2224      	movs	r2, #36	; 0x24
 8003140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f022 0201 	bic.w	r2, r2, #1
 8003152:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003162:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003172:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003174:	f001 fd38 	bl	8004be8 <HAL_RCC_GetPCLK1Freq>
 8003178:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	4a81      	ldr	r2, [pc, #516]	; (8003384 <HAL_I2C_Init+0x274>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d807      	bhi.n	8003194 <HAL_I2C_Init+0x84>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	4a80      	ldr	r2, [pc, #512]	; (8003388 <HAL_I2C_Init+0x278>)
 8003188:	4293      	cmp	r3, r2
 800318a:	bf94      	ite	ls
 800318c:	2301      	movls	r3, #1
 800318e:	2300      	movhi	r3, #0
 8003190:	b2db      	uxtb	r3, r3
 8003192:	e006      	b.n	80031a2 <HAL_I2C_Init+0x92>
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	4a7d      	ldr	r2, [pc, #500]	; (800338c <HAL_I2C_Init+0x27c>)
 8003198:	4293      	cmp	r3, r2
 800319a:	bf94      	ite	ls
 800319c:	2301      	movls	r3, #1
 800319e:	2300      	movhi	r3, #0
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d001      	beq.n	80031aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e0e7      	b.n	800337a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	4a78      	ldr	r2, [pc, #480]	; (8003390 <HAL_I2C_Init+0x280>)
 80031ae:	fba2 2303 	umull	r2, r3, r2, r3
 80031b2:	0c9b      	lsrs	r3, r3, #18
 80031b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	68ba      	ldr	r2, [r7, #8]
 80031c6:	430a      	orrs	r2, r1
 80031c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	6a1b      	ldr	r3, [r3, #32]
 80031d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	4a6a      	ldr	r2, [pc, #424]	; (8003384 <HAL_I2C_Init+0x274>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d802      	bhi.n	80031e4 <HAL_I2C_Init+0xd4>
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	3301      	adds	r3, #1
 80031e2:	e009      	b.n	80031f8 <HAL_I2C_Init+0xe8>
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80031ea:	fb02 f303 	mul.w	r3, r2, r3
 80031ee:	4a69      	ldr	r2, [pc, #420]	; (8003394 <HAL_I2C_Init+0x284>)
 80031f0:	fba2 2303 	umull	r2, r3, r2, r3
 80031f4:	099b      	lsrs	r3, r3, #6
 80031f6:	3301      	adds	r3, #1
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	6812      	ldr	r2, [r2, #0]
 80031fc:	430b      	orrs	r3, r1
 80031fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	69db      	ldr	r3, [r3, #28]
 8003206:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800320a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	495c      	ldr	r1, [pc, #368]	; (8003384 <HAL_I2C_Init+0x274>)
 8003214:	428b      	cmp	r3, r1
 8003216:	d819      	bhi.n	800324c <HAL_I2C_Init+0x13c>
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	1e59      	subs	r1, r3, #1
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	005b      	lsls	r3, r3, #1
 8003222:	fbb1 f3f3 	udiv	r3, r1, r3
 8003226:	1c59      	adds	r1, r3, #1
 8003228:	f640 73fc 	movw	r3, #4092	; 0xffc
 800322c:	400b      	ands	r3, r1
 800322e:	2b00      	cmp	r3, #0
 8003230:	d00a      	beq.n	8003248 <HAL_I2C_Init+0x138>
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	1e59      	subs	r1, r3, #1
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	005b      	lsls	r3, r3, #1
 800323c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003240:	3301      	adds	r3, #1
 8003242:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003246:	e051      	b.n	80032ec <HAL_I2C_Init+0x1dc>
 8003248:	2304      	movs	r3, #4
 800324a:	e04f      	b.n	80032ec <HAL_I2C_Init+0x1dc>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d111      	bne.n	8003278 <HAL_I2C_Init+0x168>
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	1e58      	subs	r0, r3, #1
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6859      	ldr	r1, [r3, #4]
 800325c:	460b      	mov	r3, r1
 800325e:	005b      	lsls	r3, r3, #1
 8003260:	440b      	add	r3, r1
 8003262:	fbb0 f3f3 	udiv	r3, r0, r3
 8003266:	3301      	adds	r3, #1
 8003268:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800326c:	2b00      	cmp	r3, #0
 800326e:	bf0c      	ite	eq
 8003270:	2301      	moveq	r3, #1
 8003272:	2300      	movne	r3, #0
 8003274:	b2db      	uxtb	r3, r3
 8003276:	e012      	b.n	800329e <HAL_I2C_Init+0x18e>
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	1e58      	subs	r0, r3, #1
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6859      	ldr	r1, [r3, #4]
 8003280:	460b      	mov	r3, r1
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	440b      	add	r3, r1
 8003286:	0099      	lsls	r1, r3, #2
 8003288:	440b      	add	r3, r1
 800328a:	fbb0 f3f3 	udiv	r3, r0, r3
 800328e:	3301      	adds	r3, #1
 8003290:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003294:	2b00      	cmp	r3, #0
 8003296:	bf0c      	ite	eq
 8003298:	2301      	moveq	r3, #1
 800329a:	2300      	movne	r3, #0
 800329c:	b2db      	uxtb	r3, r3
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d001      	beq.n	80032a6 <HAL_I2C_Init+0x196>
 80032a2:	2301      	movs	r3, #1
 80032a4:	e022      	b.n	80032ec <HAL_I2C_Init+0x1dc>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d10e      	bne.n	80032cc <HAL_I2C_Init+0x1bc>
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	1e58      	subs	r0, r3, #1
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6859      	ldr	r1, [r3, #4]
 80032b6:	460b      	mov	r3, r1
 80032b8:	005b      	lsls	r3, r3, #1
 80032ba:	440b      	add	r3, r1
 80032bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80032c0:	3301      	adds	r3, #1
 80032c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032ca:	e00f      	b.n	80032ec <HAL_I2C_Init+0x1dc>
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	1e58      	subs	r0, r3, #1
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6859      	ldr	r1, [r3, #4]
 80032d4:	460b      	mov	r3, r1
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	440b      	add	r3, r1
 80032da:	0099      	lsls	r1, r3, #2
 80032dc:	440b      	add	r3, r1
 80032de:	fbb0 f3f3 	udiv	r3, r0, r3
 80032e2:	3301      	adds	r3, #1
 80032e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032ec:	6879      	ldr	r1, [r7, #4]
 80032ee:	6809      	ldr	r1, [r1, #0]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	69da      	ldr	r2, [r3, #28]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a1b      	ldr	r3, [r3, #32]
 8003306:	431a      	orrs	r2, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	430a      	orrs	r2, r1
 800330e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800331a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	6911      	ldr	r1, [r2, #16]
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	68d2      	ldr	r2, [r2, #12]
 8003326:	4311      	orrs	r1, r2
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	6812      	ldr	r2, [r2, #0]
 800332c:	430b      	orrs	r3, r1
 800332e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	695a      	ldr	r2, [r3, #20]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	699b      	ldr	r3, [r3, #24]
 8003342:	431a      	orrs	r2, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	430a      	orrs	r2, r1
 800334a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f042 0201 	orr.w	r2, r2, #1
 800335a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2200      	movs	r2, #0
 8003360:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2220      	movs	r2, #32
 8003366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003378:	2300      	movs	r3, #0
}
 800337a:	4618      	mov	r0, r3
 800337c:	3710      	adds	r7, #16
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	000186a0 	.word	0x000186a0
 8003388:	001e847f 	.word	0x001e847f
 800338c:	003d08ff 	.word	0x003d08ff
 8003390:	431bde83 	.word	0x431bde83
 8003394:	10624dd3 	.word	0x10624dd3

08003398 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b088      	sub	sp, #32
 800339c:	af02      	add	r7, sp, #8
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	4608      	mov	r0, r1
 80033a2:	4611      	mov	r1, r2
 80033a4:	461a      	mov	r2, r3
 80033a6:	4603      	mov	r3, r0
 80033a8:	817b      	strh	r3, [r7, #10]
 80033aa:	460b      	mov	r3, r1
 80033ac:	813b      	strh	r3, [r7, #8]
 80033ae:	4613      	mov	r3, r2
 80033b0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80033b2:	f7fd ff93 	bl	80012dc <HAL_GetTick>
 80033b6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	2b20      	cmp	r3, #32
 80033c2:	f040 80d9 	bne.w	8003578 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	9300      	str	r3, [sp, #0]
 80033ca:	2319      	movs	r3, #25
 80033cc:	2201      	movs	r2, #1
 80033ce:	496d      	ldr	r1, [pc, #436]	; (8003584 <HAL_I2C_Mem_Write+0x1ec>)
 80033d0:	68f8      	ldr	r0, [r7, #12]
 80033d2:	f000 f971 	bl	80036b8 <I2C_WaitOnFlagUntilTimeout>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d001      	beq.n	80033e0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80033dc:	2302      	movs	r3, #2
 80033de:	e0cc      	b.n	800357a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d101      	bne.n	80033ee <HAL_I2C_Mem_Write+0x56>
 80033ea:	2302      	movs	r3, #2
 80033ec:	e0c5      	b.n	800357a <HAL_I2C_Mem_Write+0x1e2>
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2201      	movs	r2, #1
 80033f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0301 	and.w	r3, r3, #1
 8003400:	2b01      	cmp	r3, #1
 8003402:	d007      	beq.n	8003414 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f042 0201 	orr.w	r2, r2, #1
 8003412:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003422:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2221      	movs	r2, #33	; 0x21
 8003428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2240      	movs	r2, #64	; 0x40
 8003430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2200      	movs	r2, #0
 8003438:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6a3a      	ldr	r2, [r7, #32]
 800343e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003444:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800344a:	b29a      	uxth	r2, r3
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	4a4d      	ldr	r2, [pc, #308]	; (8003588 <HAL_I2C_Mem_Write+0x1f0>)
 8003454:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003456:	88f8      	ldrh	r0, [r7, #6]
 8003458:	893a      	ldrh	r2, [r7, #8]
 800345a:	8979      	ldrh	r1, [r7, #10]
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	9301      	str	r3, [sp, #4]
 8003460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003462:	9300      	str	r3, [sp, #0]
 8003464:	4603      	mov	r3, r0
 8003466:	68f8      	ldr	r0, [r7, #12]
 8003468:	f000 f890 	bl	800358c <I2C_RequestMemoryWrite>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d052      	beq.n	8003518 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e081      	b.n	800357a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003476:	697a      	ldr	r2, [r7, #20]
 8003478:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800347a:	68f8      	ldr	r0, [r7, #12]
 800347c:	f000 f9f2 	bl	8003864 <I2C_WaitOnTXEFlagUntilTimeout>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00d      	beq.n	80034a2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348a:	2b04      	cmp	r3, #4
 800348c:	d107      	bne.n	800349e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800349c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e06b      	b.n	800357a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a6:	781a      	ldrb	r2, [r3, #0]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b2:	1c5a      	adds	r2, r3, #1
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034bc:	3b01      	subs	r3, #1
 80034be:	b29a      	uxth	r2, r3
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	3b01      	subs	r3, #1
 80034cc:	b29a      	uxth	r2, r3
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	695b      	ldr	r3, [r3, #20]
 80034d8:	f003 0304 	and.w	r3, r3, #4
 80034dc:	2b04      	cmp	r3, #4
 80034de:	d11b      	bne.n	8003518 <HAL_I2C_Mem_Write+0x180>
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d017      	beq.n	8003518 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ec:	781a      	ldrb	r2, [r3, #0]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f8:	1c5a      	adds	r2, r3, #1
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003502:	3b01      	subs	r3, #1
 8003504:	b29a      	uxth	r2, r3
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800350e:	b29b      	uxth	r3, r3
 8003510:	3b01      	subs	r3, #1
 8003512:	b29a      	uxth	r2, r3
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800351c:	2b00      	cmp	r3, #0
 800351e:	d1aa      	bne.n	8003476 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003520:	697a      	ldr	r2, [r7, #20]
 8003522:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003524:	68f8      	ldr	r0, [r7, #12]
 8003526:	f000 f9de 	bl	80038e6 <I2C_WaitOnBTFFlagUntilTimeout>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d00d      	beq.n	800354c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003534:	2b04      	cmp	r3, #4
 8003536:	d107      	bne.n	8003548 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003546:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e016      	b.n	800357a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800355a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2220      	movs	r2, #32
 8003560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003574:	2300      	movs	r3, #0
 8003576:	e000      	b.n	800357a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003578:	2302      	movs	r3, #2
  }
}
 800357a:	4618      	mov	r0, r3
 800357c:	3718      	adds	r7, #24
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	00100002 	.word	0x00100002
 8003588:	ffff0000 	.word	0xffff0000

0800358c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b088      	sub	sp, #32
 8003590:	af02      	add	r7, sp, #8
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	4608      	mov	r0, r1
 8003596:	4611      	mov	r1, r2
 8003598:	461a      	mov	r2, r3
 800359a:	4603      	mov	r3, r0
 800359c:	817b      	strh	r3, [r7, #10]
 800359e:	460b      	mov	r3, r1
 80035a0:	813b      	strh	r3, [r7, #8]
 80035a2:	4613      	mov	r3, r2
 80035a4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035b4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b8:	9300      	str	r3, [sp, #0]
 80035ba:	6a3b      	ldr	r3, [r7, #32]
 80035bc:	2200      	movs	r2, #0
 80035be:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80035c2:	68f8      	ldr	r0, [r7, #12]
 80035c4:	f000 f878 	bl	80036b8 <I2C_WaitOnFlagUntilTimeout>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00d      	beq.n	80035ea <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035dc:	d103      	bne.n	80035e6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035e4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e05f      	b.n	80036aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80035ea:	897b      	ldrh	r3, [r7, #10]
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	461a      	mov	r2, r3
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80035f8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fc:	6a3a      	ldr	r2, [r7, #32]
 80035fe:	492d      	ldr	r1, [pc, #180]	; (80036b4 <I2C_RequestMemoryWrite+0x128>)
 8003600:	68f8      	ldr	r0, [r7, #12]
 8003602:	f000 f8b0 	bl	8003766 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d001      	beq.n	8003610 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e04c      	b.n	80036aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003610:	2300      	movs	r3, #0
 8003612:	617b      	str	r3, [r7, #20]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	695b      	ldr	r3, [r3, #20]
 800361a:	617b      	str	r3, [r7, #20]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	699b      	ldr	r3, [r3, #24]
 8003622:	617b      	str	r3, [r7, #20]
 8003624:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003626:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003628:	6a39      	ldr	r1, [r7, #32]
 800362a:	68f8      	ldr	r0, [r7, #12]
 800362c:	f000 f91a 	bl	8003864 <I2C_WaitOnTXEFlagUntilTimeout>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d00d      	beq.n	8003652 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363a:	2b04      	cmp	r3, #4
 800363c:	d107      	bne.n	800364e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800364c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e02b      	b.n	80036aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003652:	88fb      	ldrh	r3, [r7, #6]
 8003654:	2b01      	cmp	r3, #1
 8003656:	d105      	bne.n	8003664 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003658:	893b      	ldrh	r3, [r7, #8]
 800365a:	b2da      	uxtb	r2, r3
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	611a      	str	r2, [r3, #16]
 8003662:	e021      	b.n	80036a8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003664:	893b      	ldrh	r3, [r7, #8]
 8003666:	0a1b      	lsrs	r3, r3, #8
 8003668:	b29b      	uxth	r3, r3
 800366a:	b2da      	uxtb	r2, r3
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003672:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003674:	6a39      	ldr	r1, [r7, #32]
 8003676:	68f8      	ldr	r0, [r7, #12]
 8003678:	f000 f8f4 	bl	8003864 <I2C_WaitOnTXEFlagUntilTimeout>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d00d      	beq.n	800369e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003686:	2b04      	cmp	r3, #4
 8003688:	d107      	bne.n	800369a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003698:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e005      	b.n	80036aa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800369e:	893b      	ldrh	r3, [r7, #8]
 80036a0:	b2da      	uxtb	r2, r3
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3718      	adds	r7, #24
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	00010002 	.word	0x00010002

080036b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	603b      	str	r3, [r7, #0]
 80036c4:	4613      	mov	r3, r2
 80036c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036c8:	e025      	b.n	8003716 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d0:	d021      	beq.n	8003716 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036d2:	f7fd fe03 	bl	80012dc <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	683a      	ldr	r2, [r7, #0]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d302      	bcc.n	80036e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d116      	bne.n	8003716 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2200      	movs	r2, #0
 80036ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2220      	movs	r2, #32
 80036f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003702:	f043 0220 	orr.w	r2, r3, #32
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e023      	b.n	800375e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	0c1b      	lsrs	r3, r3, #16
 800371a:	b2db      	uxtb	r3, r3
 800371c:	2b01      	cmp	r3, #1
 800371e:	d10d      	bne.n	800373c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	695b      	ldr	r3, [r3, #20]
 8003726:	43da      	mvns	r2, r3
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	4013      	ands	r3, r2
 800372c:	b29b      	uxth	r3, r3
 800372e:	2b00      	cmp	r3, #0
 8003730:	bf0c      	ite	eq
 8003732:	2301      	moveq	r3, #1
 8003734:	2300      	movne	r3, #0
 8003736:	b2db      	uxtb	r3, r3
 8003738:	461a      	mov	r2, r3
 800373a:	e00c      	b.n	8003756 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	699b      	ldr	r3, [r3, #24]
 8003742:	43da      	mvns	r2, r3
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	4013      	ands	r3, r2
 8003748:	b29b      	uxth	r3, r3
 800374a:	2b00      	cmp	r3, #0
 800374c:	bf0c      	ite	eq
 800374e:	2301      	moveq	r3, #1
 8003750:	2300      	movne	r3, #0
 8003752:	b2db      	uxtb	r3, r3
 8003754:	461a      	mov	r2, r3
 8003756:	79fb      	ldrb	r3, [r7, #7]
 8003758:	429a      	cmp	r2, r3
 800375a:	d0b6      	beq.n	80036ca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800375c:	2300      	movs	r3, #0
}
 800375e:	4618      	mov	r0, r3
 8003760:	3710      	adds	r7, #16
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}

08003766 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003766:	b580      	push	{r7, lr}
 8003768:	b084      	sub	sp, #16
 800376a:	af00      	add	r7, sp, #0
 800376c:	60f8      	str	r0, [r7, #12]
 800376e:	60b9      	str	r1, [r7, #8]
 8003770:	607a      	str	r2, [r7, #4]
 8003772:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003774:	e051      	b.n	800381a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	695b      	ldr	r3, [r3, #20]
 800377c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003780:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003784:	d123      	bne.n	80037ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003794:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800379e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2200      	movs	r2, #0
 80037a4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2220      	movs	r2, #32
 80037aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ba:	f043 0204 	orr.w	r2, r3, #4
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e046      	b.n	800385c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037d4:	d021      	beq.n	800381a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037d6:	f7fd fd81 	bl	80012dc <HAL_GetTick>
 80037da:	4602      	mov	r2, r0
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	1ad3      	subs	r3, r2, r3
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d302      	bcc.n	80037ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d116      	bne.n	800381a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2200      	movs	r2, #0
 80037f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2220      	movs	r2, #32
 80037f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003806:	f043 0220 	orr.w	r2, r3, #32
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2200      	movs	r2, #0
 8003812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e020      	b.n	800385c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	0c1b      	lsrs	r3, r3, #16
 800381e:	b2db      	uxtb	r3, r3
 8003820:	2b01      	cmp	r3, #1
 8003822:	d10c      	bne.n	800383e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	695b      	ldr	r3, [r3, #20]
 800382a:	43da      	mvns	r2, r3
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	4013      	ands	r3, r2
 8003830:	b29b      	uxth	r3, r3
 8003832:	2b00      	cmp	r3, #0
 8003834:	bf14      	ite	ne
 8003836:	2301      	movne	r3, #1
 8003838:	2300      	moveq	r3, #0
 800383a:	b2db      	uxtb	r3, r3
 800383c:	e00b      	b.n	8003856 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	699b      	ldr	r3, [r3, #24]
 8003844:	43da      	mvns	r2, r3
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	4013      	ands	r3, r2
 800384a:	b29b      	uxth	r3, r3
 800384c:	2b00      	cmp	r3, #0
 800384e:	bf14      	ite	ne
 8003850:	2301      	movne	r3, #1
 8003852:	2300      	moveq	r3, #0
 8003854:	b2db      	uxtb	r3, r3
 8003856:	2b00      	cmp	r3, #0
 8003858:	d18d      	bne.n	8003776 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800385a:	2300      	movs	r3, #0
}
 800385c:	4618      	mov	r0, r3
 800385e:	3710      	adds	r7, #16
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}

08003864 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	60b9      	str	r1, [r7, #8]
 800386e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003870:	e02d      	b.n	80038ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003872:	68f8      	ldr	r0, [r7, #12]
 8003874:	f000 f878 	bl	8003968 <I2C_IsAcknowledgeFailed>
 8003878:	4603      	mov	r3, r0
 800387a:	2b00      	cmp	r3, #0
 800387c:	d001      	beq.n	8003882 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e02d      	b.n	80038de <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003888:	d021      	beq.n	80038ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800388a:	f7fd fd27 	bl	80012dc <HAL_GetTick>
 800388e:	4602      	mov	r2, r0
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	68ba      	ldr	r2, [r7, #8]
 8003896:	429a      	cmp	r2, r3
 8003898:	d302      	bcc.n	80038a0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d116      	bne.n	80038ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2200      	movs	r2, #0
 80038a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2220      	movs	r2, #32
 80038aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ba:	f043 0220 	orr.w	r2, r3, #32
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e007      	b.n	80038de <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	695b      	ldr	r3, [r3, #20]
 80038d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038d8:	2b80      	cmp	r3, #128	; 0x80
 80038da:	d1ca      	bne.n	8003872 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3710      	adds	r7, #16
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}

080038e6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038e6:	b580      	push	{r7, lr}
 80038e8:	b084      	sub	sp, #16
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	60f8      	str	r0, [r7, #12]
 80038ee:	60b9      	str	r1, [r7, #8]
 80038f0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80038f2:	e02d      	b.n	8003950 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038f4:	68f8      	ldr	r0, [r7, #12]
 80038f6:	f000 f837 	bl	8003968 <I2C_IsAcknowledgeFailed>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d001      	beq.n	8003904 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e02d      	b.n	8003960 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800390a:	d021      	beq.n	8003950 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800390c:	f7fd fce6 	bl	80012dc <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	68ba      	ldr	r2, [r7, #8]
 8003918:	429a      	cmp	r2, r3
 800391a:	d302      	bcc.n	8003922 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d116      	bne.n	8003950 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2200      	movs	r2, #0
 8003926:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2220      	movs	r2, #32
 800392c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2200      	movs	r2, #0
 8003934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393c:	f043 0220 	orr.w	r2, r3, #32
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2200      	movs	r2, #0
 8003948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e007      	b.n	8003960 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	695b      	ldr	r3, [r3, #20]
 8003956:	f003 0304 	and.w	r3, r3, #4
 800395a:	2b04      	cmp	r3, #4
 800395c:	d1ca      	bne.n	80038f4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800395e:	2300      	movs	r3, #0
}
 8003960:	4618      	mov	r0, r3
 8003962:	3710      	adds	r7, #16
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	695b      	ldr	r3, [r3, #20]
 8003976:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800397a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800397e:	d11b      	bne.n	80039b8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003988:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2220      	movs	r2, #32
 8003994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a4:	f043 0204 	orr.w	r2, r3, #4
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e000      	b.n	80039ba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80039b8:	2300      	movs	r3, #0
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	370c      	adds	r7, #12
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr
	...

080039c8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b088      	sub	sp, #32
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d101      	bne.n	80039da <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e128      	b.n	8003c2c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d109      	bne.n	80039fa <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a90      	ldr	r2, [pc, #576]	; (8003c34 <HAL_I2S_Init+0x26c>)
 80039f2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f7fc ff2f 	bl	8000858 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2202      	movs	r2, #2
 80039fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	69db      	ldr	r3, [r3, #28]
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	6812      	ldr	r2, [r2, #0]
 8003a0c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003a10:	f023 030f 	bic.w	r3, r3, #15
 8003a14:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2202      	movs	r2, #2
 8003a1c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	695b      	ldr	r3, [r3, #20]
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d060      	beq.n	8003ae8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d102      	bne.n	8003a34 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003a2e:	2310      	movs	r3, #16
 8003a30:	617b      	str	r3, [r7, #20]
 8003a32:	e001      	b.n	8003a38 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003a34:	2320      	movs	r3, #32
 8003a36:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	2b20      	cmp	r3, #32
 8003a3e:	d802      	bhi.n	8003a46 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	005b      	lsls	r3, r3, #1
 8003a44:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003a46:	2001      	movs	r0, #1
 8003a48:	f001 f9c4 	bl	8004dd4 <HAL_RCCEx_GetPeriphCLKFreq>
 8003a4c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	691b      	ldr	r3, [r3, #16]
 8003a52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a56:	d125      	bne.n	8003aa4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d010      	beq.n	8003a82 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	68fa      	ldr	r2, [r7, #12]
 8003a66:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a6a:	4613      	mov	r3, r2
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	4413      	add	r3, r2
 8003a70:	005b      	lsls	r3, r3, #1
 8003a72:	461a      	mov	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	695b      	ldr	r3, [r3, #20]
 8003a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a7c:	3305      	adds	r3, #5
 8003a7e:	613b      	str	r3, [r7, #16]
 8003a80:	e01f      	b.n	8003ac2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	00db      	lsls	r3, r3, #3
 8003a86:	68fa      	ldr	r2, [r7, #12]
 8003a88:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	4413      	add	r3, r2
 8003a92:	005b      	lsls	r3, r3, #1
 8003a94:	461a      	mov	r2, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	695b      	ldr	r3, [r3, #20]
 8003a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a9e:	3305      	adds	r3, #5
 8003aa0:	613b      	str	r3, [r7, #16]
 8003aa2:	e00e      	b.n	8003ac2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003aa4:	68fa      	ldr	r2, [r7, #12]
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003aac:	4613      	mov	r3, r2
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	4413      	add	r3, r2
 8003ab2:	005b      	lsls	r3, r3, #1
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8003abe:	3305      	adds	r3, #5
 8003ac0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	4a5c      	ldr	r2, [pc, #368]	; (8003c38 <HAL_I2S_Init+0x270>)
 8003ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8003aca:	08db      	lsrs	r3, r3, #3
 8003acc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	f003 0301 	and.w	r3, r3, #1
 8003ad4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003ad6:	693a      	ldr	r2, [r7, #16]
 8003ad8:	69bb      	ldr	r3, [r7, #24]
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	085b      	lsrs	r3, r3, #1
 8003ade:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	021b      	lsls	r3, r3, #8
 8003ae4:	61bb      	str	r3, [r7, #24]
 8003ae6:	e003      	b.n	8003af0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003ae8:	2302      	movs	r3, #2
 8003aea:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003aec:	2300      	movs	r3, #0
 8003aee:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d902      	bls.n	8003afc <HAL_I2S_Init+0x134>
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	2bff      	cmp	r3, #255	; 0xff
 8003afa:	d907      	bls.n	8003b0c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b00:	f043 0210 	orr.w	r2, r3, #16
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e08f      	b.n	8003c2c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	691a      	ldr	r2, [r3, #16]
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	ea42 0103 	orr.w	r1, r2, r3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	69fa      	ldr	r2, [r7, #28]
 8003b1c:	430a      	orrs	r2, r1
 8003b1e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	69db      	ldr	r3, [r3, #28]
 8003b26:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003b2a:	f023 030f 	bic.w	r3, r3, #15
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	6851      	ldr	r1, [r2, #4]
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	6892      	ldr	r2, [r2, #8]
 8003b36:	4311      	orrs	r1, r2
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	68d2      	ldr	r2, [r2, #12]
 8003b3c:	4311      	orrs	r1, r2
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	6992      	ldr	r2, [r2, #24]
 8003b42:	430a      	orrs	r2, r1
 8003b44:	431a      	orrs	r2, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b4e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a1b      	ldr	r3, [r3, #32]
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d161      	bne.n	8003c1c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4a38      	ldr	r2, [pc, #224]	; (8003c3c <HAL_I2S_Init+0x274>)
 8003b5c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a37      	ldr	r2, [pc, #220]	; (8003c40 <HAL_I2S_Init+0x278>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d101      	bne.n	8003b6c <HAL_I2S_Init+0x1a4>
 8003b68:	4b36      	ldr	r3, [pc, #216]	; (8003c44 <HAL_I2S_Init+0x27c>)
 8003b6a:	e001      	b.n	8003b70 <HAL_I2S_Init+0x1a8>
 8003b6c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b70:	69db      	ldr	r3, [r3, #28]
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	6812      	ldr	r2, [r2, #0]
 8003b76:	4932      	ldr	r1, [pc, #200]	; (8003c40 <HAL_I2S_Init+0x278>)
 8003b78:	428a      	cmp	r2, r1
 8003b7a:	d101      	bne.n	8003b80 <HAL_I2S_Init+0x1b8>
 8003b7c:	4a31      	ldr	r2, [pc, #196]	; (8003c44 <HAL_I2S_Init+0x27c>)
 8003b7e:	e001      	b.n	8003b84 <HAL_I2S_Init+0x1bc>
 8003b80:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003b84:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003b88:	f023 030f 	bic.w	r3, r3, #15
 8003b8c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a2b      	ldr	r2, [pc, #172]	; (8003c40 <HAL_I2S_Init+0x278>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d101      	bne.n	8003b9c <HAL_I2S_Init+0x1d4>
 8003b98:	4b2a      	ldr	r3, [pc, #168]	; (8003c44 <HAL_I2S_Init+0x27c>)
 8003b9a:	e001      	b.n	8003ba0 <HAL_I2S_Init+0x1d8>
 8003b9c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ba0:	2202      	movs	r2, #2
 8003ba2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a25      	ldr	r2, [pc, #148]	; (8003c40 <HAL_I2S_Init+0x278>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d101      	bne.n	8003bb2 <HAL_I2S_Init+0x1ea>
 8003bae:	4b25      	ldr	r3, [pc, #148]	; (8003c44 <HAL_I2S_Init+0x27c>)
 8003bb0:	e001      	b.n	8003bb6 <HAL_I2S_Init+0x1ee>
 8003bb2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bb6:	69db      	ldr	r3, [r3, #28]
 8003bb8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bc2:	d003      	beq.n	8003bcc <HAL_I2S_Init+0x204>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d103      	bne.n	8003bd4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003bcc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003bd0:	613b      	str	r3, [r7, #16]
 8003bd2:	e001      	b.n	8003bd8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003be2:	4313      	orrs	r3, r2
 8003be4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003bec:	4313      	orrs	r3, r2
 8003bee:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	699b      	ldr	r3, [r3, #24]
 8003bf4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	b29a      	uxth	r2, r3
 8003bfa:	897b      	ldrh	r3, [r7, #10]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003c04:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a0d      	ldr	r2, [pc, #52]	; (8003c40 <HAL_I2S_Init+0x278>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d101      	bne.n	8003c14 <HAL_I2S_Init+0x24c>
 8003c10:	4b0c      	ldr	r3, [pc, #48]	; (8003c44 <HAL_I2S_Init+0x27c>)
 8003c12:	e001      	b.n	8003c18 <HAL_I2S_Init+0x250>
 8003c14:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c18:	897a      	ldrh	r2, [r7, #10]
 8003c1a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2201      	movs	r2, #1
 8003c26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003c2a:	2300      	movs	r3, #0
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3720      	adds	r7, #32
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	08003d3f 	.word	0x08003d3f
 8003c38:	cccccccd 	.word	0xcccccccd
 8003c3c:	08003e55 	.word	0x08003e55
 8003c40:	40003800 	.word	0x40003800
 8003c44:	40003400 	.word	0x40003400

08003c48 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003c50:	bf00      	nop
 8003c52:	370c      	adds	r7, #12
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr

08003c5c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003c64:	bf00      	nop
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr

08003c70 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003c78:	bf00      	nop
 8003c7a:	370c      	adds	r7, #12
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b082      	sub	sp, #8
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c90:	881a      	ldrh	r2, [r3, #0]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9c:	1c9a      	adds	r2, r3, #2
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	3b01      	subs	r3, #1
 8003caa:	b29a      	uxth	r2, r3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d10e      	bne.n	8003cd8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	685a      	ldr	r2, [r3, #4]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003cc8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2201      	movs	r2, #1
 8003cce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f7ff ffb8 	bl	8003c48 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003cd8:	bf00      	nop
 8003cda:	3708      	adds	r7, #8
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	68da      	ldr	r2, [r3, #12]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf2:	b292      	uxth	r2, r2
 8003cf4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfa:	1c9a      	adds	r2, r3, #2
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	3b01      	subs	r3, #1
 8003d08:	b29a      	uxth	r2, r3
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d10e      	bne.n	8003d36 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	685a      	ldr	r2, [r3, #4]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d26:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f7ff ff93 	bl	8003c5c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003d36:	bf00      	nop
 8003d38:	3708      	adds	r7, #8
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}

08003d3e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003d3e:	b580      	push	{r7, lr}
 8003d40:	b086      	sub	sp, #24
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	2b04      	cmp	r3, #4
 8003d58:	d13a      	bne.n	8003dd0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	f003 0301 	and.w	r3, r3, #1
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d109      	bne.n	8003d78 <I2S_IRQHandler+0x3a>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d6e:	2b40      	cmp	r3, #64	; 0x40
 8003d70:	d102      	bne.n	8003d78 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f7ff ffb4 	bl	8003ce0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d7e:	2b40      	cmp	r3, #64	; 0x40
 8003d80:	d126      	bne.n	8003dd0 <I2S_IRQHandler+0x92>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	f003 0320 	and.w	r3, r3, #32
 8003d8c:	2b20      	cmp	r3, #32
 8003d8e:	d11f      	bne.n	8003dd0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	685a      	ldr	r2, [r3, #4]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d9e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003da0:	2300      	movs	r3, #0
 8003da2:	613b      	str	r3, [r7, #16]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	613b      	str	r3, [r7, #16]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	613b      	str	r3, [r7, #16]
 8003db4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2201      	movs	r2, #1
 8003dba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dc2:	f043 0202 	orr.w	r2, r3, #2
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f7ff ff50 	bl	8003c70 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	2b03      	cmp	r3, #3
 8003dda:	d136      	bne.n	8003e4a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	f003 0302 	and.w	r3, r3, #2
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d109      	bne.n	8003dfa <I2S_IRQHandler+0xbc>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003df0:	2b80      	cmp	r3, #128	; 0x80
 8003df2:	d102      	bne.n	8003dfa <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f7ff ff45 	bl	8003c84 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	f003 0308 	and.w	r3, r3, #8
 8003e00:	2b08      	cmp	r3, #8
 8003e02:	d122      	bne.n	8003e4a <I2S_IRQHandler+0x10c>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	f003 0320 	and.w	r3, r3, #32
 8003e0e:	2b20      	cmp	r3, #32
 8003e10:	d11b      	bne.n	8003e4a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	685a      	ldr	r2, [r3, #4]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e20:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003e22:	2300      	movs	r3, #0
 8003e24:	60fb      	str	r3, [r7, #12]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	60fb      	str	r3, [r7, #12]
 8003e2e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e3c:	f043 0204 	orr.w	r2, r3, #4
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f7ff ff13 	bl	8003c70 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e4a:	bf00      	nop
 8003e4c:	3718      	adds	r7, #24
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
	...

08003e54 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b088      	sub	sp, #32
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a92      	ldr	r2, [pc, #584]	; (80040b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d101      	bne.n	8003e72 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003e6e:	4b92      	ldr	r3, [pc, #584]	; (80040b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e70:	e001      	b.n	8003e76 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003e72:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a8b      	ldr	r2, [pc, #556]	; (80040b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d101      	bne.n	8003e90 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003e8c:	4b8a      	ldr	r3, [pc, #552]	; (80040b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e8e:	e001      	b.n	8003e94 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003e90:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ea0:	d004      	beq.n	8003eac <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	f040 8099 	bne.w	8003fde <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	f003 0302 	and.w	r3, r3, #2
 8003eb2:	2b02      	cmp	r3, #2
 8003eb4:	d107      	bne.n	8003ec6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d002      	beq.n	8003ec6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f000 f925 	bl	8004110 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	f003 0301 	and.w	r3, r3, #1
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d107      	bne.n	8003ee0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d002      	beq.n	8003ee0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f000 f9c8 	bl	8004270 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ee6:	2b40      	cmp	r3, #64	; 0x40
 8003ee8:	d13a      	bne.n	8003f60 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	f003 0320 	and.w	r3, r3, #32
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d035      	beq.n	8003f60 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a6e      	ldr	r2, [pc, #440]	; (80040b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d101      	bne.n	8003f02 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003efe:	4b6e      	ldr	r3, [pc, #440]	; (80040b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f00:	e001      	b.n	8003f06 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003f02:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f06:	685a      	ldr	r2, [r3, #4]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4969      	ldr	r1, [pc, #420]	; (80040b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f0e:	428b      	cmp	r3, r1
 8003f10:	d101      	bne.n	8003f16 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003f12:	4b69      	ldr	r3, [pc, #420]	; (80040b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f14:	e001      	b.n	8003f1a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003f16:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f1a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f1e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	685a      	ldr	r2, [r3, #4]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f2e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003f30:	2300      	movs	r3, #0
 8003f32:	60fb      	str	r3, [r7, #12]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	60fb      	str	r3, [r7, #12]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	60fb      	str	r3, [r7, #12]
 8003f44:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f52:	f043 0202 	orr.w	r2, r3, #2
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f7ff fe88 	bl	8003c70 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003f60:	69fb      	ldr	r3, [r7, #28]
 8003f62:	f003 0308 	and.w	r3, r3, #8
 8003f66:	2b08      	cmp	r3, #8
 8003f68:	f040 80c3 	bne.w	80040f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	f003 0320 	and.w	r3, r3, #32
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	f000 80bd 	beq.w	80040f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	685a      	ldr	r2, [r3, #4]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f86:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a49      	ldr	r2, [pc, #292]	; (80040b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d101      	bne.n	8003f96 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003f92:	4b49      	ldr	r3, [pc, #292]	; (80040b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f94:	e001      	b.n	8003f9a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003f96:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f9a:	685a      	ldr	r2, [r3, #4]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4944      	ldr	r1, [pc, #272]	; (80040b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003fa2:	428b      	cmp	r3, r1
 8003fa4:	d101      	bne.n	8003faa <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003fa6:	4b44      	ldr	r3, [pc, #272]	; (80040b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003fa8:	e001      	b.n	8003fae <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003faa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fae:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003fb2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	60bb      	str	r3, [r7, #8]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	60bb      	str	r3, [r7, #8]
 8003fc0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fce:	f043 0204 	orr.w	r2, r3, #4
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f7ff fe4a 	bl	8003c70 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003fdc:	e089      	b.n	80040f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003fde:	69bb      	ldr	r3, [r7, #24]
 8003fe0:	f003 0302 	and.w	r3, r3, #2
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	d107      	bne.n	8003ff8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d002      	beq.n	8003ff8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f000 f8be 	bl	8004174 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	f003 0301 	and.w	r3, r3, #1
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d107      	bne.n	8004012 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004008:	2b00      	cmp	r3, #0
 800400a:	d002      	beq.n	8004012 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f000 f8fd 	bl	800420c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004018:	2b40      	cmp	r3, #64	; 0x40
 800401a:	d12f      	bne.n	800407c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	f003 0320 	and.w	r3, r3, #32
 8004022:	2b00      	cmp	r3, #0
 8004024:	d02a      	beq.n	800407c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	685a      	ldr	r2, [r3, #4]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004034:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a1e      	ldr	r2, [pc, #120]	; (80040b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d101      	bne.n	8004044 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004040:	4b1d      	ldr	r3, [pc, #116]	; (80040b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004042:	e001      	b.n	8004048 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004044:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004048:	685a      	ldr	r2, [r3, #4]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4919      	ldr	r1, [pc, #100]	; (80040b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004050:	428b      	cmp	r3, r1
 8004052:	d101      	bne.n	8004058 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004054:	4b18      	ldr	r3, [pc, #96]	; (80040b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004056:	e001      	b.n	800405c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004058:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800405c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004060:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2201      	movs	r2, #1
 8004066:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800406e:	f043 0202 	orr.w	r2, r3, #2
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f7ff fdfa 	bl	8003c70 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800407c:	69bb      	ldr	r3, [r7, #24]
 800407e:	f003 0308 	and.w	r3, r3, #8
 8004082:	2b08      	cmp	r3, #8
 8004084:	d136      	bne.n	80040f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	f003 0320 	and.w	r3, r3, #32
 800408c:	2b00      	cmp	r3, #0
 800408e:	d031      	beq.n	80040f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a07      	ldr	r2, [pc, #28]	; (80040b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d101      	bne.n	800409e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800409a:	4b07      	ldr	r3, [pc, #28]	; (80040b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800409c:	e001      	b.n	80040a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800409e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040a2:	685a      	ldr	r2, [r3, #4]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4902      	ldr	r1, [pc, #8]	; (80040b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80040aa:	428b      	cmp	r3, r1
 80040ac:	d106      	bne.n	80040bc <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80040ae:	4b02      	ldr	r3, [pc, #8]	; (80040b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80040b0:	e006      	b.n	80040c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80040b2:	bf00      	nop
 80040b4:	40003800 	.word	0x40003800
 80040b8:	40003400 	.word	0x40003400
 80040bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040c0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80040c4:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	685a      	ldr	r2, [r3, #4]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80040d4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2201      	movs	r2, #1
 80040da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040e2:	f043 0204 	orr.w	r2, r3, #4
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f7ff fdc0 	bl	8003c70 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80040f0:	e000      	b.n	80040f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80040f2:	bf00      	nop
}
 80040f4:	bf00      	nop
 80040f6:	3720      	adds	r7, #32
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}

080040fc <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004104:	bf00      	nop
 8004106:	370c      	adds	r7, #12
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr

08004110 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b082      	sub	sp, #8
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411c:	1c99      	adds	r1, r3, #2
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	6251      	str	r1, [r2, #36]	; 0x24
 8004122:	881a      	ldrh	r2, [r3, #0]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800412e:	b29b      	uxth	r3, r3
 8004130:	3b01      	subs	r3, #1
 8004132:	b29a      	uxth	r2, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800413c:	b29b      	uxth	r3, r3
 800413e:	2b00      	cmp	r3, #0
 8004140:	d113      	bne.n	800416a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	685a      	ldr	r2, [r3, #4]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004150:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004156:	b29b      	uxth	r3, r3
 8004158:	2b00      	cmp	r3, #0
 800415a:	d106      	bne.n	800416a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f7ff ffc9 	bl	80040fc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800416a:	bf00      	nop
 800416c:	3708      	adds	r7, #8
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
	...

08004174 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b082      	sub	sp, #8
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004180:	1c99      	adds	r1, r3, #2
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	6251      	str	r1, [r2, #36]	; 0x24
 8004186:	8819      	ldrh	r1, [r3, #0]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a1d      	ldr	r2, [pc, #116]	; (8004204 <I2SEx_TxISR_I2SExt+0x90>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d101      	bne.n	8004196 <I2SEx_TxISR_I2SExt+0x22>
 8004192:	4b1d      	ldr	r3, [pc, #116]	; (8004208 <I2SEx_TxISR_I2SExt+0x94>)
 8004194:	e001      	b.n	800419a <I2SEx_TxISR_I2SExt+0x26>
 8004196:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800419a:	460a      	mov	r2, r1
 800419c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	3b01      	subs	r3, #1
 80041a6:	b29a      	uxth	r2, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d121      	bne.n	80041fa <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a12      	ldr	r2, [pc, #72]	; (8004204 <I2SEx_TxISR_I2SExt+0x90>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d101      	bne.n	80041c4 <I2SEx_TxISR_I2SExt+0x50>
 80041c0:	4b11      	ldr	r3, [pc, #68]	; (8004208 <I2SEx_TxISR_I2SExt+0x94>)
 80041c2:	e001      	b.n	80041c8 <I2SEx_TxISR_I2SExt+0x54>
 80041c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041c8:	685a      	ldr	r2, [r3, #4]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	490d      	ldr	r1, [pc, #52]	; (8004204 <I2SEx_TxISR_I2SExt+0x90>)
 80041d0:	428b      	cmp	r3, r1
 80041d2:	d101      	bne.n	80041d8 <I2SEx_TxISR_I2SExt+0x64>
 80041d4:	4b0c      	ldr	r3, [pc, #48]	; (8004208 <I2SEx_TxISR_I2SExt+0x94>)
 80041d6:	e001      	b.n	80041dc <I2SEx_TxISR_I2SExt+0x68>
 80041d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041dc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80041e0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d106      	bne.n	80041fa <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f7ff ff81 	bl	80040fc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80041fa:	bf00      	nop
 80041fc:	3708      	adds	r7, #8
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	40003800 	.word	0x40003800
 8004208:	40003400 	.word	0x40003400

0800420c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	68d8      	ldr	r0, [r3, #12]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800421e:	1c99      	adds	r1, r3, #2
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004224:	b282      	uxth	r2, r0
 8004226:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800422c:	b29b      	uxth	r3, r3
 800422e:	3b01      	subs	r3, #1
 8004230:	b29a      	uxth	r2, r3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800423a:	b29b      	uxth	r3, r3
 800423c:	2b00      	cmp	r3, #0
 800423e:	d113      	bne.n	8004268 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	685a      	ldr	r2, [r3, #4]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800424e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004254:	b29b      	uxth	r3, r3
 8004256:	2b00      	cmp	r3, #0
 8004258:	d106      	bne.n	8004268 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2201      	movs	r2, #1
 800425e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f7ff ff4a 	bl	80040fc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004268:	bf00      	nop
 800426a:	3708      	adds	r7, #8
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}

08004270 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b082      	sub	sp, #8
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a20      	ldr	r2, [pc, #128]	; (8004300 <I2SEx_RxISR_I2SExt+0x90>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d101      	bne.n	8004286 <I2SEx_RxISR_I2SExt+0x16>
 8004282:	4b20      	ldr	r3, [pc, #128]	; (8004304 <I2SEx_RxISR_I2SExt+0x94>)
 8004284:	e001      	b.n	800428a <I2SEx_RxISR_I2SExt+0x1a>
 8004286:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800428a:	68d8      	ldr	r0, [r3, #12]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004290:	1c99      	adds	r1, r3, #2
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004296:	b282      	uxth	r2, r0
 8004298:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800429e:	b29b      	uxth	r3, r3
 80042a0:	3b01      	subs	r3, #1
 80042a2:	b29a      	uxth	r2, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d121      	bne.n	80042f6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a12      	ldr	r2, [pc, #72]	; (8004300 <I2SEx_RxISR_I2SExt+0x90>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d101      	bne.n	80042c0 <I2SEx_RxISR_I2SExt+0x50>
 80042bc:	4b11      	ldr	r3, [pc, #68]	; (8004304 <I2SEx_RxISR_I2SExt+0x94>)
 80042be:	e001      	b.n	80042c4 <I2SEx_RxISR_I2SExt+0x54>
 80042c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042c4:	685a      	ldr	r2, [r3, #4]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	490d      	ldr	r1, [pc, #52]	; (8004300 <I2SEx_RxISR_I2SExt+0x90>)
 80042cc:	428b      	cmp	r3, r1
 80042ce:	d101      	bne.n	80042d4 <I2SEx_RxISR_I2SExt+0x64>
 80042d0:	4b0c      	ldr	r3, [pc, #48]	; (8004304 <I2SEx_RxISR_I2SExt+0x94>)
 80042d2:	e001      	b.n	80042d8 <I2SEx_RxISR_I2SExt+0x68>
 80042d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042d8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80042dc:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d106      	bne.n	80042f6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f7ff ff03 	bl	80040fc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80042f6:	bf00      	nop
 80042f8:	3708      	adds	r7, #8
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	40003800 	.word	0x40003800
 8004304:	40003400 	.word	0x40003400

08004308 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b086      	sub	sp, #24
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d101      	bne.n	800431a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e267      	b.n	80047ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0301 	and.w	r3, r3, #1
 8004322:	2b00      	cmp	r3, #0
 8004324:	d075      	beq.n	8004412 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004326:	4b88      	ldr	r3, [pc, #544]	; (8004548 <HAL_RCC_OscConfig+0x240>)
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	f003 030c 	and.w	r3, r3, #12
 800432e:	2b04      	cmp	r3, #4
 8004330:	d00c      	beq.n	800434c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004332:	4b85      	ldr	r3, [pc, #532]	; (8004548 <HAL_RCC_OscConfig+0x240>)
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800433a:	2b08      	cmp	r3, #8
 800433c:	d112      	bne.n	8004364 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800433e:	4b82      	ldr	r3, [pc, #520]	; (8004548 <HAL_RCC_OscConfig+0x240>)
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004346:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800434a:	d10b      	bne.n	8004364 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800434c:	4b7e      	ldr	r3, [pc, #504]	; (8004548 <HAL_RCC_OscConfig+0x240>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004354:	2b00      	cmp	r3, #0
 8004356:	d05b      	beq.n	8004410 <HAL_RCC_OscConfig+0x108>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d157      	bne.n	8004410 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e242      	b.n	80047ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800436c:	d106      	bne.n	800437c <HAL_RCC_OscConfig+0x74>
 800436e:	4b76      	ldr	r3, [pc, #472]	; (8004548 <HAL_RCC_OscConfig+0x240>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a75      	ldr	r2, [pc, #468]	; (8004548 <HAL_RCC_OscConfig+0x240>)
 8004374:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004378:	6013      	str	r3, [r2, #0]
 800437a:	e01d      	b.n	80043b8 <HAL_RCC_OscConfig+0xb0>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004384:	d10c      	bne.n	80043a0 <HAL_RCC_OscConfig+0x98>
 8004386:	4b70      	ldr	r3, [pc, #448]	; (8004548 <HAL_RCC_OscConfig+0x240>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a6f      	ldr	r2, [pc, #444]	; (8004548 <HAL_RCC_OscConfig+0x240>)
 800438c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004390:	6013      	str	r3, [r2, #0]
 8004392:	4b6d      	ldr	r3, [pc, #436]	; (8004548 <HAL_RCC_OscConfig+0x240>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a6c      	ldr	r2, [pc, #432]	; (8004548 <HAL_RCC_OscConfig+0x240>)
 8004398:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800439c:	6013      	str	r3, [r2, #0]
 800439e:	e00b      	b.n	80043b8 <HAL_RCC_OscConfig+0xb0>
 80043a0:	4b69      	ldr	r3, [pc, #420]	; (8004548 <HAL_RCC_OscConfig+0x240>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a68      	ldr	r2, [pc, #416]	; (8004548 <HAL_RCC_OscConfig+0x240>)
 80043a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043aa:	6013      	str	r3, [r2, #0]
 80043ac:	4b66      	ldr	r3, [pc, #408]	; (8004548 <HAL_RCC_OscConfig+0x240>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a65      	ldr	r2, [pc, #404]	; (8004548 <HAL_RCC_OscConfig+0x240>)
 80043b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d013      	beq.n	80043e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043c0:	f7fc ff8c 	bl	80012dc <HAL_GetTick>
 80043c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043c6:	e008      	b.n	80043da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043c8:	f7fc ff88 	bl	80012dc <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	2b64      	cmp	r3, #100	; 0x64
 80043d4:	d901      	bls.n	80043da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	e207      	b.n	80047ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043da:	4b5b      	ldr	r3, [pc, #364]	; (8004548 <HAL_RCC_OscConfig+0x240>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d0f0      	beq.n	80043c8 <HAL_RCC_OscConfig+0xc0>
 80043e6:	e014      	b.n	8004412 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043e8:	f7fc ff78 	bl	80012dc <HAL_GetTick>
 80043ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043ee:	e008      	b.n	8004402 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043f0:	f7fc ff74 	bl	80012dc <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	2b64      	cmp	r3, #100	; 0x64
 80043fc:	d901      	bls.n	8004402 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e1f3      	b.n	80047ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004402:	4b51      	ldr	r3, [pc, #324]	; (8004548 <HAL_RCC_OscConfig+0x240>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d1f0      	bne.n	80043f0 <HAL_RCC_OscConfig+0xe8>
 800440e:	e000      	b.n	8004412 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004410:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0302 	and.w	r3, r3, #2
 800441a:	2b00      	cmp	r3, #0
 800441c:	d063      	beq.n	80044e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800441e:	4b4a      	ldr	r3, [pc, #296]	; (8004548 <HAL_RCC_OscConfig+0x240>)
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	f003 030c 	and.w	r3, r3, #12
 8004426:	2b00      	cmp	r3, #0
 8004428:	d00b      	beq.n	8004442 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800442a:	4b47      	ldr	r3, [pc, #284]	; (8004548 <HAL_RCC_OscConfig+0x240>)
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004432:	2b08      	cmp	r3, #8
 8004434:	d11c      	bne.n	8004470 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004436:	4b44      	ldr	r3, [pc, #272]	; (8004548 <HAL_RCC_OscConfig+0x240>)
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d116      	bne.n	8004470 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004442:	4b41      	ldr	r3, [pc, #260]	; (8004548 <HAL_RCC_OscConfig+0x240>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0302 	and.w	r3, r3, #2
 800444a:	2b00      	cmp	r3, #0
 800444c:	d005      	beq.n	800445a <HAL_RCC_OscConfig+0x152>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	2b01      	cmp	r3, #1
 8004454:	d001      	beq.n	800445a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e1c7      	b.n	80047ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800445a:	4b3b      	ldr	r3, [pc, #236]	; (8004548 <HAL_RCC_OscConfig+0x240>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	00db      	lsls	r3, r3, #3
 8004468:	4937      	ldr	r1, [pc, #220]	; (8004548 <HAL_RCC_OscConfig+0x240>)
 800446a:	4313      	orrs	r3, r2
 800446c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800446e:	e03a      	b.n	80044e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d020      	beq.n	80044ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004478:	4b34      	ldr	r3, [pc, #208]	; (800454c <HAL_RCC_OscConfig+0x244>)
 800447a:	2201      	movs	r2, #1
 800447c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800447e:	f7fc ff2d 	bl	80012dc <HAL_GetTick>
 8004482:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004484:	e008      	b.n	8004498 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004486:	f7fc ff29 	bl	80012dc <HAL_GetTick>
 800448a:	4602      	mov	r2, r0
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	1ad3      	subs	r3, r2, r3
 8004490:	2b02      	cmp	r3, #2
 8004492:	d901      	bls.n	8004498 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004494:	2303      	movs	r3, #3
 8004496:	e1a8      	b.n	80047ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004498:	4b2b      	ldr	r3, [pc, #172]	; (8004548 <HAL_RCC_OscConfig+0x240>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 0302 	and.w	r3, r3, #2
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d0f0      	beq.n	8004486 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044a4:	4b28      	ldr	r3, [pc, #160]	; (8004548 <HAL_RCC_OscConfig+0x240>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	691b      	ldr	r3, [r3, #16]
 80044b0:	00db      	lsls	r3, r3, #3
 80044b2:	4925      	ldr	r1, [pc, #148]	; (8004548 <HAL_RCC_OscConfig+0x240>)
 80044b4:	4313      	orrs	r3, r2
 80044b6:	600b      	str	r3, [r1, #0]
 80044b8:	e015      	b.n	80044e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044ba:	4b24      	ldr	r3, [pc, #144]	; (800454c <HAL_RCC_OscConfig+0x244>)
 80044bc:	2200      	movs	r2, #0
 80044be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044c0:	f7fc ff0c 	bl	80012dc <HAL_GetTick>
 80044c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044c6:	e008      	b.n	80044da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044c8:	f7fc ff08 	bl	80012dc <HAL_GetTick>
 80044cc:	4602      	mov	r2, r0
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	2b02      	cmp	r3, #2
 80044d4:	d901      	bls.n	80044da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e187      	b.n	80047ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044da:	4b1b      	ldr	r3, [pc, #108]	; (8004548 <HAL_RCC_OscConfig+0x240>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0302 	and.w	r3, r3, #2
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d1f0      	bne.n	80044c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0308 	and.w	r3, r3, #8
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d036      	beq.n	8004560 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	695b      	ldr	r3, [r3, #20]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d016      	beq.n	8004528 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044fa:	4b15      	ldr	r3, [pc, #84]	; (8004550 <HAL_RCC_OscConfig+0x248>)
 80044fc:	2201      	movs	r2, #1
 80044fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004500:	f7fc feec 	bl	80012dc <HAL_GetTick>
 8004504:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004506:	e008      	b.n	800451a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004508:	f7fc fee8 	bl	80012dc <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	2b02      	cmp	r3, #2
 8004514:	d901      	bls.n	800451a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e167      	b.n	80047ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800451a:	4b0b      	ldr	r3, [pc, #44]	; (8004548 <HAL_RCC_OscConfig+0x240>)
 800451c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800451e:	f003 0302 	and.w	r3, r3, #2
 8004522:	2b00      	cmp	r3, #0
 8004524:	d0f0      	beq.n	8004508 <HAL_RCC_OscConfig+0x200>
 8004526:	e01b      	b.n	8004560 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004528:	4b09      	ldr	r3, [pc, #36]	; (8004550 <HAL_RCC_OscConfig+0x248>)
 800452a:	2200      	movs	r2, #0
 800452c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800452e:	f7fc fed5 	bl	80012dc <HAL_GetTick>
 8004532:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004534:	e00e      	b.n	8004554 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004536:	f7fc fed1 	bl	80012dc <HAL_GetTick>
 800453a:	4602      	mov	r2, r0
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	1ad3      	subs	r3, r2, r3
 8004540:	2b02      	cmp	r3, #2
 8004542:	d907      	bls.n	8004554 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004544:	2303      	movs	r3, #3
 8004546:	e150      	b.n	80047ea <HAL_RCC_OscConfig+0x4e2>
 8004548:	40023800 	.word	0x40023800
 800454c:	42470000 	.word	0x42470000
 8004550:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004554:	4b88      	ldr	r3, [pc, #544]	; (8004778 <HAL_RCC_OscConfig+0x470>)
 8004556:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004558:	f003 0302 	and.w	r3, r3, #2
 800455c:	2b00      	cmp	r3, #0
 800455e:	d1ea      	bne.n	8004536 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0304 	and.w	r3, r3, #4
 8004568:	2b00      	cmp	r3, #0
 800456a:	f000 8097 	beq.w	800469c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800456e:	2300      	movs	r3, #0
 8004570:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004572:	4b81      	ldr	r3, [pc, #516]	; (8004778 <HAL_RCC_OscConfig+0x470>)
 8004574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d10f      	bne.n	800459e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800457e:	2300      	movs	r3, #0
 8004580:	60bb      	str	r3, [r7, #8]
 8004582:	4b7d      	ldr	r3, [pc, #500]	; (8004778 <HAL_RCC_OscConfig+0x470>)
 8004584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004586:	4a7c      	ldr	r2, [pc, #496]	; (8004778 <HAL_RCC_OscConfig+0x470>)
 8004588:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800458c:	6413      	str	r3, [r2, #64]	; 0x40
 800458e:	4b7a      	ldr	r3, [pc, #488]	; (8004778 <HAL_RCC_OscConfig+0x470>)
 8004590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004596:	60bb      	str	r3, [r7, #8]
 8004598:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800459a:	2301      	movs	r3, #1
 800459c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800459e:	4b77      	ldr	r3, [pc, #476]	; (800477c <HAL_RCC_OscConfig+0x474>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d118      	bne.n	80045dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045aa:	4b74      	ldr	r3, [pc, #464]	; (800477c <HAL_RCC_OscConfig+0x474>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a73      	ldr	r2, [pc, #460]	; (800477c <HAL_RCC_OscConfig+0x474>)
 80045b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045b6:	f7fc fe91 	bl	80012dc <HAL_GetTick>
 80045ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045bc:	e008      	b.n	80045d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045be:	f7fc fe8d 	bl	80012dc <HAL_GetTick>
 80045c2:	4602      	mov	r2, r0
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	2b02      	cmp	r3, #2
 80045ca:	d901      	bls.n	80045d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80045cc:	2303      	movs	r3, #3
 80045ce:	e10c      	b.n	80047ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045d0:	4b6a      	ldr	r3, [pc, #424]	; (800477c <HAL_RCC_OscConfig+0x474>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d0f0      	beq.n	80045be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d106      	bne.n	80045f2 <HAL_RCC_OscConfig+0x2ea>
 80045e4:	4b64      	ldr	r3, [pc, #400]	; (8004778 <HAL_RCC_OscConfig+0x470>)
 80045e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045e8:	4a63      	ldr	r2, [pc, #396]	; (8004778 <HAL_RCC_OscConfig+0x470>)
 80045ea:	f043 0301 	orr.w	r3, r3, #1
 80045ee:	6713      	str	r3, [r2, #112]	; 0x70
 80045f0:	e01c      	b.n	800462c <HAL_RCC_OscConfig+0x324>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	2b05      	cmp	r3, #5
 80045f8:	d10c      	bne.n	8004614 <HAL_RCC_OscConfig+0x30c>
 80045fa:	4b5f      	ldr	r3, [pc, #380]	; (8004778 <HAL_RCC_OscConfig+0x470>)
 80045fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045fe:	4a5e      	ldr	r2, [pc, #376]	; (8004778 <HAL_RCC_OscConfig+0x470>)
 8004600:	f043 0304 	orr.w	r3, r3, #4
 8004604:	6713      	str	r3, [r2, #112]	; 0x70
 8004606:	4b5c      	ldr	r3, [pc, #368]	; (8004778 <HAL_RCC_OscConfig+0x470>)
 8004608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800460a:	4a5b      	ldr	r2, [pc, #364]	; (8004778 <HAL_RCC_OscConfig+0x470>)
 800460c:	f043 0301 	orr.w	r3, r3, #1
 8004610:	6713      	str	r3, [r2, #112]	; 0x70
 8004612:	e00b      	b.n	800462c <HAL_RCC_OscConfig+0x324>
 8004614:	4b58      	ldr	r3, [pc, #352]	; (8004778 <HAL_RCC_OscConfig+0x470>)
 8004616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004618:	4a57      	ldr	r2, [pc, #348]	; (8004778 <HAL_RCC_OscConfig+0x470>)
 800461a:	f023 0301 	bic.w	r3, r3, #1
 800461e:	6713      	str	r3, [r2, #112]	; 0x70
 8004620:	4b55      	ldr	r3, [pc, #340]	; (8004778 <HAL_RCC_OscConfig+0x470>)
 8004622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004624:	4a54      	ldr	r2, [pc, #336]	; (8004778 <HAL_RCC_OscConfig+0x470>)
 8004626:	f023 0304 	bic.w	r3, r3, #4
 800462a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d015      	beq.n	8004660 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004634:	f7fc fe52 	bl	80012dc <HAL_GetTick>
 8004638:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800463a:	e00a      	b.n	8004652 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800463c:	f7fc fe4e 	bl	80012dc <HAL_GetTick>
 8004640:	4602      	mov	r2, r0
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	f241 3288 	movw	r2, #5000	; 0x1388
 800464a:	4293      	cmp	r3, r2
 800464c:	d901      	bls.n	8004652 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e0cb      	b.n	80047ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004652:	4b49      	ldr	r3, [pc, #292]	; (8004778 <HAL_RCC_OscConfig+0x470>)
 8004654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004656:	f003 0302 	and.w	r3, r3, #2
 800465a:	2b00      	cmp	r3, #0
 800465c:	d0ee      	beq.n	800463c <HAL_RCC_OscConfig+0x334>
 800465e:	e014      	b.n	800468a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004660:	f7fc fe3c 	bl	80012dc <HAL_GetTick>
 8004664:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004666:	e00a      	b.n	800467e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004668:	f7fc fe38 	bl	80012dc <HAL_GetTick>
 800466c:	4602      	mov	r2, r0
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	f241 3288 	movw	r2, #5000	; 0x1388
 8004676:	4293      	cmp	r3, r2
 8004678:	d901      	bls.n	800467e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e0b5      	b.n	80047ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800467e:	4b3e      	ldr	r3, [pc, #248]	; (8004778 <HAL_RCC_OscConfig+0x470>)
 8004680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004682:	f003 0302 	and.w	r3, r3, #2
 8004686:	2b00      	cmp	r3, #0
 8004688:	d1ee      	bne.n	8004668 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800468a:	7dfb      	ldrb	r3, [r7, #23]
 800468c:	2b01      	cmp	r3, #1
 800468e:	d105      	bne.n	800469c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004690:	4b39      	ldr	r3, [pc, #228]	; (8004778 <HAL_RCC_OscConfig+0x470>)
 8004692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004694:	4a38      	ldr	r2, [pc, #224]	; (8004778 <HAL_RCC_OscConfig+0x470>)
 8004696:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800469a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	699b      	ldr	r3, [r3, #24]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	f000 80a1 	beq.w	80047e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046a6:	4b34      	ldr	r3, [pc, #208]	; (8004778 <HAL_RCC_OscConfig+0x470>)
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	f003 030c 	and.w	r3, r3, #12
 80046ae:	2b08      	cmp	r3, #8
 80046b0:	d05c      	beq.n	800476c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	699b      	ldr	r3, [r3, #24]
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d141      	bne.n	800473e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046ba:	4b31      	ldr	r3, [pc, #196]	; (8004780 <HAL_RCC_OscConfig+0x478>)
 80046bc:	2200      	movs	r2, #0
 80046be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046c0:	f7fc fe0c 	bl	80012dc <HAL_GetTick>
 80046c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046c6:	e008      	b.n	80046da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046c8:	f7fc fe08 	bl	80012dc <HAL_GetTick>
 80046cc:	4602      	mov	r2, r0
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	2b02      	cmp	r3, #2
 80046d4:	d901      	bls.n	80046da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80046d6:	2303      	movs	r3, #3
 80046d8:	e087      	b.n	80047ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046da:	4b27      	ldr	r3, [pc, #156]	; (8004778 <HAL_RCC_OscConfig+0x470>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d1f0      	bne.n	80046c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	69da      	ldr	r2, [r3, #28]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a1b      	ldr	r3, [r3, #32]
 80046ee:	431a      	orrs	r2, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f4:	019b      	lsls	r3, r3, #6
 80046f6:	431a      	orrs	r2, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046fc:	085b      	lsrs	r3, r3, #1
 80046fe:	3b01      	subs	r3, #1
 8004700:	041b      	lsls	r3, r3, #16
 8004702:	431a      	orrs	r2, r3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004708:	061b      	lsls	r3, r3, #24
 800470a:	491b      	ldr	r1, [pc, #108]	; (8004778 <HAL_RCC_OscConfig+0x470>)
 800470c:	4313      	orrs	r3, r2
 800470e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004710:	4b1b      	ldr	r3, [pc, #108]	; (8004780 <HAL_RCC_OscConfig+0x478>)
 8004712:	2201      	movs	r2, #1
 8004714:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004716:	f7fc fde1 	bl	80012dc <HAL_GetTick>
 800471a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800471c:	e008      	b.n	8004730 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800471e:	f7fc fddd 	bl	80012dc <HAL_GetTick>
 8004722:	4602      	mov	r2, r0
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	2b02      	cmp	r3, #2
 800472a:	d901      	bls.n	8004730 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800472c:	2303      	movs	r3, #3
 800472e:	e05c      	b.n	80047ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004730:	4b11      	ldr	r3, [pc, #68]	; (8004778 <HAL_RCC_OscConfig+0x470>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004738:	2b00      	cmp	r3, #0
 800473a:	d0f0      	beq.n	800471e <HAL_RCC_OscConfig+0x416>
 800473c:	e054      	b.n	80047e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800473e:	4b10      	ldr	r3, [pc, #64]	; (8004780 <HAL_RCC_OscConfig+0x478>)
 8004740:	2200      	movs	r2, #0
 8004742:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004744:	f7fc fdca 	bl	80012dc <HAL_GetTick>
 8004748:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800474a:	e008      	b.n	800475e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800474c:	f7fc fdc6 	bl	80012dc <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	2b02      	cmp	r3, #2
 8004758:	d901      	bls.n	800475e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e045      	b.n	80047ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800475e:	4b06      	ldr	r3, [pc, #24]	; (8004778 <HAL_RCC_OscConfig+0x470>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d1f0      	bne.n	800474c <HAL_RCC_OscConfig+0x444>
 800476a:	e03d      	b.n	80047e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	699b      	ldr	r3, [r3, #24]
 8004770:	2b01      	cmp	r3, #1
 8004772:	d107      	bne.n	8004784 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e038      	b.n	80047ea <HAL_RCC_OscConfig+0x4e2>
 8004778:	40023800 	.word	0x40023800
 800477c:	40007000 	.word	0x40007000
 8004780:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004784:	4b1b      	ldr	r3, [pc, #108]	; (80047f4 <HAL_RCC_OscConfig+0x4ec>)
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	699b      	ldr	r3, [r3, #24]
 800478e:	2b01      	cmp	r3, #1
 8004790:	d028      	beq.n	80047e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800479c:	429a      	cmp	r2, r3
 800479e:	d121      	bne.n	80047e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d11a      	bne.n	80047e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047ae:	68fa      	ldr	r2, [r7, #12]
 80047b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80047b4:	4013      	ands	r3, r2
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80047ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047bc:	4293      	cmp	r3, r2
 80047be:	d111      	bne.n	80047e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ca:	085b      	lsrs	r3, r3, #1
 80047cc:	3b01      	subs	r3, #1
 80047ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d107      	bne.n	80047e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d001      	beq.n	80047e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	e000      	b.n	80047ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80047e8:	2300      	movs	r3, #0
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3718      	adds	r7, #24
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	bf00      	nop
 80047f4:	40023800 	.word	0x40023800

080047f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b084      	sub	sp, #16
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d101      	bne.n	800480c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e0cc      	b.n	80049a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800480c:	4b68      	ldr	r3, [pc, #416]	; (80049b0 <HAL_RCC_ClockConfig+0x1b8>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 0307 	and.w	r3, r3, #7
 8004814:	683a      	ldr	r2, [r7, #0]
 8004816:	429a      	cmp	r2, r3
 8004818:	d90c      	bls.n	8004834 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800481a:	4b65      	ldr	r3, [pc, #404]	; (80049b0 <HAL_RCC_ClockConfig+0x1b8>)
 800481c:	683a      	ldr	r2, [r7, #0]
 800481e:	b2d2      	uxtb	r2, r2
 8004820:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004822:	4b63      	ldr	r3, [pc, #396]	; (80049b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 0307 	and.w	r3, r3, #7
 800482a:	683a      	ldr	r2, [r7, #0]
 800482c:	429a      	cmp	r2, r3
 800482e:	d001      	beq.n	8004834 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e0b8      	b.n	80049a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0302 	and.w	r3, r3, #2
 800483c:	2b00      	cmp	r3, #0
 800483e:	d020      	beq.n	8004882 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0304 	and.w	r3, r3, #4
 8004848:	2b00      	cmp	r3, #0
 800484a:	d005      	beq.n	8004858 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800484c:	4b59      	ldr	r3, [pc, #356]	; (80049b4 <HAL_RCC_ClockConfig+0x1bc>)
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	4a58      	ldr	r2, [pc, #352]	; (80049b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004852:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004856:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0308 	and.w	r3, r3, #8
 8004860:	2b00      	cmp	r3, #0
 8004862:	d005      	beq.n	8004870 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004864:	4b53      	ldr	r3, [pc, #332]	; (80049b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	4a52      	ldr	r2, [pc, #328]	; (80049b4 <HAL_RCC_ClockConfig+0x1bc>)
 800486a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800486e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004870:	4b50      	ldr	r3, [pc, #320]	; (80049b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	494d      	ldr	r1, [pc, #308]	; (80049b4 <HAL_RCC_ClockConfig+0x1bc>)
 800487e:	4313      	orrs	r3, r2
 8004880:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0301 	and.w	r3, r3, #1
 800488a:	2b00      	cmp	r3, #0
 800488c:	d044      	beq.n	8004918 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	2b01      	cmp	r3, #1
 8004894:	d107      	bne.n	80048a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004896:	4b47      	ldr	r3, [pc, #284]	; (80049b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d119      	bne.n	80048d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e07f      	b.n	80049a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	d003      	beq.n	80048b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048b2:	2b03      	cmp	r3, #3
 80048b4:	d107      	bne.n	80048c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048b6:	4b3f      	ldr	r3, [pc, #252]	; (80049b4 <HAL_RCC_ClockConfig+0x1bc>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d109      	bne.n	80048d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e06f      	b.n	80049a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048c6:	4b3b      	ldr	r3, [pc, #236]	; (80049b4 <HAL_RCC_ClockConfig+0x1bc>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 0302 	and.w	r3, r3, #2
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d101      	bne.n	80048d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e067      	b.n	80049a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048d6:	4b37      	ldr	r3, [pc, #220]	; (80049b4 <HAL_RCC_ClockConfig+0x1bc>)
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	f023 0203 	bic.w	r2, r3, #3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	4934      	ldr	r1, [pc, #208]	; (80049b4 <HAL_RCC_ClockConfig+0x1bc>)
 80048e4:	4313      	orrs	r3, r2
 80048e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048e8:	f7fc fcf8 	bl	80012dc <HAL_GetTick>
 80048ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048ee:	e00a      	b.n	8004906 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048f0:	f7fc fcf4 	bl	80012dc <HAL_GetTick>
 80048f4:	4602      	mov	r2, r0
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80048fe:	4293      	cmp	r3, r2
 8004900:	d901      	bls.n	8004906 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	e04f      	b.n	80049a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004906:	4b2b      	ldr	r3, [pc, #172]	; (80049b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	f003 020c 	and.w	r2, r3, #12
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	429a      	cmp	r2, r3
 8004916:	d1eb      	bne.n	80048f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004918:	4b25      	ldr	r3, [pc, #148]	; (80049b0 <HAL_RCC_ClockConfig+0x1b8>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 0307 	and.w	r3, r3, #7
 8004920:	683a      	ldr	r2, [r7, #0]
 8004922:	429a      	cmp	r2, r3
 8004924:	d20c      	bcs.n	8004940 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004926:	4b22      	ldr	r3, [pc, #136]	; (80049b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004928:	683a      	ldr	r2, [r7, #0]
 800492a:	b2d2      	uxtb	r2, r2
 800492c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800492e:	4b20      	ldr	r3, [pc, #128]	; (80049b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 0307 	and.w	r3, r3, #7
 8004936:	683a      	ldr	r2, [r7, #0]
 8004938:	429a      	cmp	r2, r3
 800493a:	d001      	beq.n	8004940 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	e032      	b.n	80049a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 0304 	and.w	r3, r3, #4
 8004948:	2b00      	cmp	r3, #0
 800494a:	d008      	beq.n	800495e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800494c:	4b19      	ldr	r3, [pc, #100]	; (80049b4 <HAL_RCC_ClockConfig+0x1bc>)
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	4916      	ldr	r1, [pc, #88]	; (80049b4 <HAL_RCC_ClockConfig+0x1bc>)
 800495a:	4313      	orrs	r3, r2
 800495c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0308 	and.w	r3, r3, #8
 8004966:	2b00      	cmp	r3, #0
 8004968:	d009      	beq.n	800497e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800496a:	4b12      	ldr	r3, [pc, #72]	; (80049b4 <HAL_RCC_ClockConfig+0x1bc>)
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	691b      	ldr	r3, [r3, #16]
 8004976:	00db      	lsls	r3, r3, #3
 8004978:	490e      	ldr	r1, [pc, #56]	; (80049b4 <HAL_RCC_ClockConfig+0x1bc>)
 800497a:	4313      	orrs	r3, r2
 800497c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800497e:	f000 f821 	bl	80049c4 <HAL_RCC_GetSysClockFreq>
 8004982:	4602      	mov	r2, r0
 8004984:	4b0b      	ldr	r3, [pc, #44]	; (80049b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	091b      	lsrs	r3, r3, #4
 800498a:	f003 030f 	and.w	r3, r3, #15
 800498e:	490a      	ldr	r1, [pc, #40]	; (80049b8 <HAL_RCC_ClockConfig+0x1c0>)
 8004990:	5ccb      	ldrb	r3, [r1, r3]
 8004992:	fa22 f303 	lsr.w	r3, r2, r3
 8004996:	4a09      	ldr	r2, [pc, #36]	; (80049bc <HAL_RCC_ClockConfig+0x1c4>)
 8004998:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800499a:	4b09      	ldr	r3, [pc, #36]	; (80049c0 <HAL_RCC_ClockConfig+0x1c8>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4618      	mov	r0, r3
 80049a0:	f7fc fc58 	bl	8001254 <HAL_InitTick>

  return HAL_OK;
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3710      	adds	r7, #16
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	40023c00 	.word	0x40023c00
 80049b4:	40023800 	.word	0x40023800
 80049b8:	08008f90 	.word	0x08008f90
 80049bc:	20000008 	.word	0x20000008
 80049c0:	2000000c 	.word	0x2000000c

080049c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049c8:	b094      	sub	sp, #80	; 0x50
 80049ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80049cc:	2300      	movs	r3, #0
 80049ce:	647b      	str	r3, [r7, #68]	; 0x44
 80049d0:	2300      	movs	r3, #0
 80049d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049d4:	2300      	movs	r3, #0
 80049d6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80049d8:	2300      	movs	r3, #0
 80049da:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049dc:	4b79      	ldr	r3, [pc, #484]	; (8004bc4 <HAL_RCC_GetSysClockFreq+0x200>)
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	f003 030c 	and.w	r3, r3, #12
 80049e4:	2b08      	cmp	r3, #8
 80049e6:	d00d      	beq.n	8004a04 <HAL_RCC_GetSysClockFreq+0x40>
 80049e8:	2b08      	cmp	r3, #8
 80049ea:	f200 80e1 	bhi.w	8004bb0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d002      	beq.n	80049f8 <HAL_RCC_GetSysClockFreq+0x34>
 80049f2:	2b04      	cmp	r3, #4
 80049f4:	d003      	beq.n	80049fe <HAL_RCC_GetSysClockFreq+0x3a>
 80049f6:	e0db      	b.n	8004bb0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80049f8:	4b73      	ldr	r3, [pc, #460]	; (8004bc8 <HAL_RCC_GetSysClockFreq+0x204>)
 80049fa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80049fc:	e0db      	b.n	8004bb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80049fe:	4b73      	ldr	r3, [pc, #460]	; (8004bcc <HAL_RCC_GetSysClockFreq+0x208>)
 8004a00:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a02:	e0d8      	b.n	8004bb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a04:	4b6f      	ldr	r3, [pc, #444]	; (8004bc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a0c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a0e:	4b6d      	ldr	r3, [pc, #436]	; (8004bc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d063      	beq.n	8004ae2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a1a:	4b6a      	ldr	r3, [pc, #424]	; (8004bc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	099b      	lsrs	r3, r3, #6
 8004a20:	2200      	movs	r2, #0
 8004a22:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a24:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a2c:	633b      	str	r3, [r7, #48]	; 0x30
 8004a2e:	2300      	movs	r3, #0
 8004a30:	637b      	str	r3, [r7, #52]	; 0x34
 8004a32:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004a36:	4622      	mov	r2, r4
 8004a38:	462b      	mov	r3, r5
 8004a3a:	f04f 0000 	mov.w	r0, #0
 8004a3e:	f04f 0100 	mov.w	r1, #0
 8004a42:	0159      	lsls	r1, r3, #5
 8004a44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a48:	0150      	lsls	r0, r2, #5
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	460b      	mov	r3, r1
 8004a4e:	4621      	mov	r1, r4
 8004a50:	1a51      	subs	r1, r2, r1
 8004a52:	6139      	str	r1, [r7, #16]
 8004a54:	4629      	mov	r1, r5
 8004a56:	eb63 0301 	sbc.w	r3, r3, r1
 8004a5a:	617b      	str	r3, [r7, #20]
 8004a5c:	f04f 0200 	mov.w	r2, #0
 8004a60:	f04f 0300 	mov.w	r3, #0
 8004a64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a68:	4659      	mov	r1, fp
 8004a6a:	018b      	lsls	r3, r1, #6
 8004a6c:	4651      	mov	r1, sl
 8004a6e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a72:	4651      	mov	r1, sl
 8004a74:	018a      	lsls	r2, r1, #6
 8004a76:	4651      	mov	r1, sl
 8004a78:	ebb2 0801 	subs.w	r8, r2, r1
 8004a7c:	4659      	mov	r1, fp
 8004a7e:	eb63 0901 	sbc.w	r9, r3, r1
 8004a82:	f04f 0200 	mov.w	r2, #0
 8004a86:	f04f 0300 	mov.w	r3, #0
 8004a8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a96:	4690      	mov	r8, r2
 8004a98:	4699      	mov	r9, r3
 8004a9a:	4623      	mov	r3, r4
 8004a9c:	eb18 0303 	adds.w	r3, r8, r3
 8004aa0:	60bb      	str	r3, [r7, #8]
 8004aa2:	462b      	mov	r3, r5
 8004aa4:	eb49 0303 	adc.w	r3, r9, r3
 8004aa8:	60fb      	str	r3, [r7, #12]
 8004aaa:	f04f 0200 	mov.w	r2, #0
 8004aae:	f04f 0300 	mov.w	r3, #0
 8004ab2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004ab6:	4629      	mov	r1, r5
 8004ab8:	024b      	lsls	r3, r1, #9
 8004aba:	4621      	mov	r1, r4
 8004abc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004ac0:	4621      	mov	r1, r4
 8004ac2:	024a      	lsls	r2, r1, #9
 8004ac4:	4610      	mov	r0, r2
 8004ac6:	4619      	mov	r1, r3
 8004ac8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004aca:	2200      	movs	r2, #0
 8004acc:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ace:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ad0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ad4:	f7fb fb78 	bl	80001c8 <__aeabi_uldivmod>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	460b      	mov	r3, r1
 8004adc:	4613      	mov	r3, r2
 8004ade:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ae0:	e058      	b.n	8004b94 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ae2:	4b38      	ldr	r3, [pc, #224]	; (8004bc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	099b      	lsrs	r3, r3, #6
 8004ae8:	2200      	movs	r2, #0
 8004aea:	4618      	mov	r0, r3
 8004aec:	4611      	mov	r1, r2
 8004aee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004af2:	623b      	str	r3, [r7, #32]
 8004af4:	2300      	movs	r3, #0
 8004af6:	627b      	str	r3, [r7, #36]	; 0x24
 8004af8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004afc:	4642      	mov	r2, r8
 8004afe:	464b      	mov	r3, r9
 8004b00:	f04f 0000 	mov.w	r0, #0
 8004b04:	f04f 0100 	mov.w	r1, #0
 8004b08:	0159      	lsls	r1, r3, #5
 8004b0a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b0e:	0150      	lsls	r0, r2, #5
 8004b10:	4602      	mov	r2, r0
 8004b12:	460b      	mov	r3, r1
 8004b14:	4641      	mov	r1, r8
 8004b16:	ebb2 0a01 	subs.w	sl, r2, r1
 8004b1a:	4649      	mov	r1, r9
 8004b1c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004b20:	f04f 0200 	mov.w	r2, #0
 8004b24:	f04f 0300 	mov.w	r3, #0
 8004b28:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004b2c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004b30:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004b34:	ebb2 040a 	subs.w	r4, r2, sl
 8004b38:	eb63 050b 	sbc.w	r5, r3, fp
 8004b3c:	f04f 0200 	mov.w	r2, #0
 8004b40:	f04f 0300 	mov.w	r3, #0
 8004b44:	00eb      	lsls	r3, r5, #3
 8004b46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b4a:	00e2      	lsls	r2, r4, #3
 8004b4c:	4614      	mov	r4, r2
 8004b4e:	461d      	mov	r5, r3
 8004b50:	4643      	mov	r3, r8
 8004b52:	18e3      	adds	r3, r4, r3
 8004b54:	603b      	str	r3, [r7, #0]
 8004b56:	464b      	mov	r3, r9
 8004b58:	eb45 0303 	adc.w	r3, r5, r3
 8004b5c:	607b      	str	r3, [r7, #4]
 8004b5e:	f04f 0200 	mov.w	r2, #0
 8004b62:	f04f 0300 	mov.w	r3, #0
 8004b66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b6a:	4629      	mov	r1, r5
 8004b6c:	028b      	lsls	r3, r1, #10
 8004b6e:	4621      	mov	r1, r4
 8004b70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b74:	4621      	mov	r1, r4
 8004b76:	028a      	lsls	r2, r1, #10
 8004b78:	4610      	mov	r0, r2
 8004b7a:	4619      	mov	r1, r3
 8004b7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b7e:	2200      	movs	r2, #0
 8004b80:	61bb      	str	r3, [r7, #24]
 8004b82:	61fa      	str	r2, [r7, #28]
 8004b84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b88:	f7fb fb1e 	bl	80001c8 <__aeabi_uldivmod>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	460b      	mov	r3, r1
 8004b90:	4613      	mov	r3, r2
 8004b92:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004b94:	4b0b      	ldr	r3, [pc, #44]	; (8004bc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	0c1b      	lsrs	r3, r3, #16
 8004b9a:	f003 0303 	and.w	r3, r3, #3
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	005b      	lsls	r3, r3, #1
 8004ba2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004ba4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ba6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004bae:	e002      	b.n	8004bb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004bb0:	4b05      	ldr	r3, [pc, #20]	; (8004bc8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004bb2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004bb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3750      	adds	r7, #80	; 0x50
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bc2:	bf00      	nop
 8004bc4:	40023800 	.word	0x40023800
 8004bc8:	00f42400 	.word	0x00f42400
 8004bcc:	007a1200 	.word	0x007a1200

08004bd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bd4:	4b03      	ldr	r3, [pc, #12]	; (8004be4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr
 8004be2:	bf00      	nop
 8004be4:	20000008 	.word	0x20000008

08004be8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004bec:	f7ff fff0 	bl	8004bd0 <HAL_RCC_GetHCLKFreq>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	4b05      	ldr	r3, [pc, #20]	; (8004c08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	0a9b      	lsrs	r3, r3, #10
 8004bf8:	f003 0307 	and.w	r3, r3, #7
 8004bfc:	4903      	ldr	r1, [pc, #12]	; (8004c0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bfe:	5ccb      	ldrb	r3, [r1, r3]
 8004c00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	bd80      	pop	{r7, pc}
 8004c08:	40023800 	.word	0x40023800
 8004c0c:	08008fa0 	.word	0x08008fa0

08004c10 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b086      	sub	sp, #24
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 0301 	and.w	r3, r3, #1
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d105      	bne.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d035      	beq.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004c38:	4b62      	ldr	r3, [pc, #392]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c3e:	f7fc fb4d 	bl	80012dc <HAL_GetTick>
 8004c42:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c44:	e008      	b.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004c46:	f7fc fb49 	bl	80012dc <HAL_GetTick>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	1ad3      	subs	r3, r2, r3
 8004c50:	2b02      	cmp	r3, #2
 8004c52:	d901      	bls.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c54:	2303      	movs	r3, #3
 8004c56:	e0b0      	b.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c58:	4b5b      	ldr	r3, [pc, #364]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d1f0      	bne.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	019a      	lsls	r2, r3, #6
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	071b      	lsls	r3, r3, #28
 8004c70:	4955      	ldr	r1, [pc, #340]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c72:	4313      	orrs	r3, r2
 8004c74:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004c78:	4b52      	ldr	r3, [pc, #328]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c7e:	f7fc fb2d 	bl	80012dc <HAL_GetTick>
 8004c82:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c84:	e008      	b.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004c86:	f7fc fb29 	bl	80012dc <HAL_GetTick>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	1ad3      	subs	r3, r2, r3
 8004c90:	2b02      	cmp	r3, #2
 8004c92:	d901      	bls.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c94:	2303      	movs	r3, #3
 8004c96:	e090      	b.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c98:	4b4b      	ldr	r3, [pc, #300]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d0f0      	beq.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0302 	and.w	r3, r3, #2
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	f000 8083 	beq.w	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	60fb      	str	r3, [r7, #12]
 8004cb6:	4b44      	ldr	r3, [pc, #272]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cba:	4a43      	ldr	r2, [pc, #268]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cc0:	6413      	str	r3, [r2, #64]	; 0x40
 8004cc2:	4b41      	ldr	r3, [pc, #260]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cca:	60fb      	str	r3, [r7, #12]
 8004ccc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004cce:	4b3f      	ldr	r3, [pc, #252]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a3e      	ldr	r2, [pc, #248]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004cd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cd8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004cda:	f7fc faff 	bl	80012dc <HAL_GetTick>
 8004cde:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004ce0:	e008      	b.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004ce2:	f7fc fafb 	bl	80012dc <HAL_GetTick>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	1ad3      	subs	r3, r2, r3
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	d901      	bls.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	e062      	b.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004cf4:	4b35      	ldr	r3, [pc, #212]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d0f0      	beq.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d00:	4b31      	ldr	r3, [pc, #196]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d08:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d02f      	beq.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d18:	693a      	ldr	r2, [r7, #16]
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d028      	beq.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d1e:	4b2a      	ldr	r3, [pc, #168]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d26:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d28:	4b29      	ldr	r3, [pc, #164]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d2e:	4b28      	ldr	r3, [pc, #160]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004d30:	2200      	movs	r2, #0
 8004d32:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004d34:	4a24      	ldr	r2, [pc, #144]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004d3a:	4b23      	ldr	r3, [pc, #140]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d3e:	f003 0301 	and.w	r3, r3, #1
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d114      	bne.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004d46:	f7fc fac9 	bl	80012dc <HAL_GetTick>
 8004d4a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d4c:	e00a      	b.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d4e:	f7fc fac5 	bl	80012dc <HAL_GetTick>
 8004d52:	4602      	mov	r2, r0
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	1ad3      	subs	r3, r2, r3
 8004d58:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d901      	bls.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004d60:	2303      	movs	r3, #3
 8004d62:	e02a      	b.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d64:	4b18      	ldr	r3, [pc, #96]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d68:	f003 0302 	and.w	r3, r3, #2
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d0ee      	beq.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d7c:	d10d      	bne.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004d7e:	4b12      	ldr	r3, [pc, #72]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004d8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d92:	490d      	ldr	r1, [pc, #52]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d94:	4313      	orrs	r3, r2
 8004d96:	608b      	str	r3, [r1, #8]
 8004d98:	e005      	b.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004d9a:	4b0b      	ldr	r3, [pc, #44]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	4a0a      	ldr	r2, [pc, #40]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004da0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004da4:	6093      	str	r3, [r2, #8]
 8004da6:	4b08      	ldr	r3, [pc, #32]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004da8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004db2:	4905      	ldr	r1, [pc, #20]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004db4:	4313      	orrs	r3, r2
 8004db6:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3718      	adds	r7, #24
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	42470068 	.word	0x42470068
 8004dc8:	40023800 	.word	0x40023800
 8004dcc:	40007000 	.word	0x40007000
 8004dd0:	42470e40 	.word	0x42470e40

08004dd4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b087      	sub	sp, #28
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004de0:	2300      	movs	r3, #0
 8004de2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004de4:	2300      	movs	r3, #0
 8004de6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004de8:	2300      	movs	r3, #0
 8004dea:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d13e      	bne.n	8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004df2:	4b23      	ldr	r3, [pc, #140]	; (8004e80 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004dfa:	60fb      	str	r3, [r7, #12]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d005      	beq.n	8004e0e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d12f      	bne.n	8004e68 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004e08:	4b1e      	ldr	r3, [pc, #120]	; (8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e0a:	617b      	str	r3, [r7, #20]
          break;
 8004e0c:	e02f      	b.n	8004e6e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004e0e:	4b1c      	ldr	r3, [pc, #112]	; (8004e80 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e1a:	d108      	bne.n	8004e2e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004e1c:	4b18      	ldr	r3, [pc, #96]	; (8004e80 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e24:	4a18      	ldr	r2, [pc, #96]	; (8004e88 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e2a:	613b      	str	r3, [r7, #16]
 8004e2c:	e007      	b.n	8004e3e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004e2e:	4b14      	ldr	r3, [pc, #80]	; (8004e80 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e36:	4a15      	ldr	r2, [pc, #84]	; (8004e8c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e3c:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004e3e:	4b10      	ldr	r3, [pc, #64]	; (8004e80 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004e40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e44:	099b      	lsrs	r3, r3, #6
 8004e46:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	fb02 f303 	mul.w	r3, r2, r3
 8004e50:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004e52:	4b0b      	ldr	r3, [pc, #44]	; (8004e80 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004e54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e58:	0f1b      	lsrs	r3, r3, #28
 8004e5a:	f003 0307 	and.w	r3, r3, #7
 8004e5e:	68ba      	ldr	r2, [r7, #8]
 8004e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e64:	617b      	str	r3, [r7, #20]
          break;
 8004e66:	e002      	b.n	8004e6e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	617b      	str	r3, [r7, #20]
          break;
 8004e6c:	bf00      	nop
        }
      }
      break;
 8004e6e:	bf00      	nop
    }
  }
  return frequency;
 8004e70:	697b      	ldr	r3, [r7, #20]
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	371c      	adds	r7, #28
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr
 8004e7e:	bf00      	nop
 8004e80:	40023800 	.word	0x40023800
 8004e84:	00bb8000 	.word	0x00bb8000
 8004e88:	007a1200 	.word	0x007a1200
 8004e8c:	00f42400 	.word	0x00f42400

08004e90 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b082      	sub	sp, #8
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d101      	bne.n	8004ea2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e07b      	b.n	8004f9a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d108      	bne.n	8004ebc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004eb2:	d009      	beq.n	8004ec8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	61da      	str	r2, [r3, #28]
 8004eba:	e005      	b.n	8004ec8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d106      	bne.n	8004ee8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f7fb fe42 	bl	8000b6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2202      	movs	r2, #2
 8004eec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004efe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004f10:	431a      	orrs	r2, r3
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f1a:	431a      	orrs	r2, r3
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	691b      	ldr	r3, [r3, #16]
 8004f20:	f003 0302 	and.w	r3, r3, #2
 8004f24:	431a      	orrs	r2, r3
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	695b      	ldr	r3, [r3, #20]
 8004f2a:	f003 0301 	and.w	r3, r3, #1
 8004f2e:	431a      	orrs	r2, r3
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	699b      	ldr	r3, [r3, #24]
 8004f34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f38:	431a      	orrs	r2, r3
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	69db      	ldr	r3, [r3, #28]
 8004f3e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f42:	431a      	orrs	r2, r3
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6a1b      	ldr	r3, [r3, #32]
 8004f48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f4c:	ea42 0103 	orr.w	r1, r2, r3
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f54:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	430a      	orrs	r2, r1
 8004f5e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	699b      	ldr	r3, [r3, #24]
 8004f64:	0c1b      	lsrs	r3, r3, #16
 8004f66:	f003 0104 	and.w	r1, r3, #4
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6e:	f003 0210 	and.w	r2, r3, #16
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	430a      	orrs	r2, r1
 8004f78:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	69da      	ldr	r2, [r3, #28]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f88:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3708      	adds	r7, #8
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}

08004fa2 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004fa2:	b084      	sub	sp, #16
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	f107 001c 	add.w	r0, r7, #28
 8004fb0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d122      	bne.n	8005000 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fbe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004fce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	68db      	ldr	r3, [r3, #12]
 8004fda:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004fe2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d105      	bne.n	8004ff4 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f000 f9bf 	bl	8005378 <USB_CoreReset>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	73fb      	strb	r3, [r7, #15]
 8004ffe:	e01a      	b.n	8005036 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f000 f9b3 	bl	8005378 <USB_CoreReset>
 8005012:	4603      	mov	r3, r0
 8005014:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005016:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005018:	2b00      	cmp	r3, #0
 800501a:	d106      	bne.n	800502a <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005020:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	639a      	str	r2, [r3, #56]	; 0x38
 8005028:	e005      	b.n	8005036 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800502e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005038:	2b01      	cmp	r3, #1
 800503a:	d10b      	bne.n	8005054 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	f043 0206 	orr.w	r2, r3, #6
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	f043 0220 	orr.w	r2, r3, #32
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005054:	7bfb      	ldrb	r3, [r7, #15]
}
 8005056:	4618      	mov	r0, r3
 8005058:	3710      	adds	r7, #16
 800505a:	46bd      	mov	sp, r7
 800505c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005060:	b004      	add	sp, #16
 8005062:	4770      	bx	lr

08005064 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005064:	b480      	push	{r7}
 8005066:	b083      	sub	sp, #12
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	f043 0201 	orr.w	r2, r3, #1
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005078:	2300      	movs	r3, #0
}
 800507a:	4618      	mov	r0, r3
 800507c:	370c      	adds	r7, #12
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr

08005086 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005086:	b480      	push	{r7}
 8005088:	b083      	sub	sp, #12
 800508a:	af00      	add	r7, sp, #0
 800508c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	f023 0201 	bic.w	r2, r3, #1
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800509a:	2300      	movs	r3, #0
}
 800509c:	4618      	mov	r0, r3
 800509e:	370c      	adds	r7, #12
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr

080050a8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	460b      	mov	r3, r1
 80050b2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80050b4:	2300      	movs	r3, #0
 80050b6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80050c4:	78fb      	ldrb	r3, [r7, #3]
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d115      	bne.n	80050f6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	68db      	ldr	r3, [r3, #12]
 80050ce:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80050d6:	2001      	movs	r0, #1
 80050d8:	f7fc f90c 	bl	80012f4 <HAL_Delay>
      ms++;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	3301      	adds	r3, #1
 80050e0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f000 f939 	bl	800535a <USB_GetMode>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d01e      	beq.n	800512c <USB_SetCurrentMode+0x84>
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2b31      	cmp	r3, #49	; 0x31
 80050f2:	d9f0      	bls.n	80050d6 <USB_SetCurrentMode+0x2e>
 80050f4:	e01a      	b.n	800512c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80050f6:	78fb      	ldrb	r3, [r7, #3]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d115      	bne.n	8005128 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005108:	2001      	movs	r0, #1
 800510a:	f7fc f8f3 	bl	80012f4 <HAL_Delay>
      ms++;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	3301      	adds	r3, #1
 8005112:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f000 f920 	bl	800535a <USB_GetMode>
 800511a:	4603      	mov	r3, r0
 800511c:	2b00      	cmp	r3, #0
 800511e:	d005      	beq.n	800512c <USB_SetCurrentMode+0x84>
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2b31      	cmp	r3, #49	; 0x31
 8005124:	d9f0      	bls.n	8005108 <USB_SetCurrentMode+0x60>
 8005126:	e001      	b.n	800512c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	e005      	b.n	8005138 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2b32      	cmp	r3, #50	; 0x32
 8005130:	d101      	bne.n	8005136 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	e000      	b.n	8005138 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005136:	2300      	movs	r3, #0
}
 8005138:	4618      	mov	r0, r3
 800513a:	3710      	adds	r7, #16
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}

08005140 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005140:	b480      	push	{r7}
 8005142:	b085      	sub	sp, #20
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
 8005148:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800514a:	2300      	movs	r3, #0
 800514c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	3301      	adds	r3, #1
 8005152:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	4a13      	ldr	r2, [pc, #76]	; (80051a4 <USB_FlushTxFifo+0x64>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d901      	bls.n	8005160 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800515c:	2303      	movs	r3, #3
 800515e:	e01b      	b.n	8005198 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	691b      	ldr	r3, [r3, #16]
 8005164:	2b00      	cmp	r3, #0
 8005166:	daf2      	bge.n	800514e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005168:	2300      	movs	r3, #0
 800516a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	019b      	lsls	r3, r3, #6
 8005170:	f043 0220 	orr.w	r2, r3, #32
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	3301      	adds	r3, #1
 800517c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	4a08      	ldr	r2, [pc, #32]	; (80051a4 <USB_FlushTxFifo+0x64>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d901      	bls.n	800518a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005186:	2303      	movs	r3, #3
 8005188:	e006      	b.n	8005198 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	691b      	ldr	r3, [r3, #16]
 800518e:	f003 0320 	and.w	r3, r3, #32
 8005192:	2b20      	cmp	r3, #32
 8005194:	d0f0      	beq.n	8005178 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005196:	2300      	movs	r3, #0
}
 8005198:	4618      	mov	r0, r3
 800519a:	3714      	adds	r7, #20
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr
 80051a4:	00030d40 	.word	0x00030d40

080051a8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b085      	sub	sp, #20
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80051b0:	2300      	movs	r3, #0
 80051b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	3301      	adds	r3, #1
 80051b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	4a11      	ldr	r2, [pc, #68]	; (8005204 <USB_FlushRxFifo+0x5c>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d901      	bls.n	80051c6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80051c2:	2303      	movs	r3, #3
 80051c4:	e018      	b.n	80051f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	daf2      	bge.n	80051b4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80051ce:	2300      	movs	r3, #0
 80051d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2210      	movs	r2, #16
 80051d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	3301      	adds	r3, #1
 80051dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	4a08      	ldr	r2, [pc, #32]	; (8005204 <USB_FlushRxFifo+0x5c>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d901      	bls.n	80051ea <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80051e6:	2303      	movs	r3, #3
 80051e8:	e006      	b.n	80051f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	691b      	ldr	r3, [r3, #16]
 80051ee:	f003 0310 	and.w	r3, r3, #16
 80051f2:	2b10      	cmp	r3, #16
 80051f4:	d0f0      	beq.n	80051d8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80051f6:	2300      	movs	r3, #0
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3714      	adds	r7, #20
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr
 8005204:	00030d40 	.word	0x00030d40

08005208 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005208:	b480      	push	{r7}
 800520a:	b089      	sub	sp, #36	; 0x24
 800520c:	af00      	add	r7, sp, #0
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	60b9      	str	r1, [r7, #8]
 8005212:	4611      	mov	r1, r2
 8005214:	461a      	mov	r2, r3
 8005216:	460b      	mov	r3, r1
 8005218:	71fb      	strb	r3, [r7, #7]
 800521a:	4613      	mov	r3, r2
 800521c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005226:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800522a:	2b00      	cmp	r3, #0
 800522c:	d123      	bne.n	8005276 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800522e:	88bb      	ldrh	r3, [r7, #4]
 8005230:	3303      	adds	r3, #3
 8005232:	089b      	lsrs	r3, r3, #2
 8005234:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005236:	2300      	movs	r3, #0
 8005238:	61bb      	str	r3, [r7, #24]
 800523a:	e018      	b.n	800526e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800523c:	79fb      	ldrb	r3, [r7, #7]
 800523e:	031a      	lsls	r2, r3, #12
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	4413      	add	r3, r2
 8005244:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005248:	461a      	mov	r2, r3
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005250:	69fb      	ldr	r3, [r7, #28]
 8005252:	3301      	adds	r3, #1
 8005254:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005256:	69fb      	ldr	r3, [r7, #28]
 8005258:	3301      	adds	r3, #1
 800525a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	3301      	adds	r3, #1
 8005260:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005262:	69fb      	ldr	r3, [r7, #28]
 8005264:	3301      	adds	r3, #1
 8005266:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	3301      	adds	r3, #1
 800526c:	61bb      	str	r3, [r7, #24]
 800526e:	69ba      	ldr	r2, [r7, #24]
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	429a      	cmp	r2, r3
 8005274:	d3e2      	bcc.n	800523c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005276:	2300      	movs	r3, #0
}
 8005278:	4618      	mov	r0, r3
 800527a:	3724      	adds	r7, #36	; 0x24
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr

08005284 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005284:	b480      	push	{r7}
 8005286:	b08b      	sub	sp, #44	; 0x2c
 8005288:	af00      	add	r7, sp, #0
 800528a:	60f8      	str	r0, [r7, #12]
 800528c:	60b9      	str	r1, [r7, #8]
 800528e:	4613      	mov	r3, r2
 8005290:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800529a:	88fb      	ldrh	r3, [r7, #6]
 800529c:	089b      	lsrs	r3, r3, #2
 800529e:	b29b      	uxth	r3, r3
 80052a0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80052a2:	88fb      	ldrh	r3, [r7, #6]
 80052a4:	f003 0303 	and.w	r3, r3, #3
 80052a8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80052aa:	2300      	movs	r3, #0
 80052ac:	623b      	str	r3, [r7, #32]
 80052ae:	e014      	b.n	80052da <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80052b0:	69bb      	ldr	r3, [r7, #24]
 80052b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ba:	601a      	str	r2, [r3, #0]
    pDest++;
 80052bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052be:	3301      	adds	r3, #1
 80052c0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80052c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c4:	3301      	adds	r3, #1
 80052c6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80052c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ca:	3301      	adds	r3, #1
 80052cc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80052ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d0:	3301      	adds	r3, #1
 80052d2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80052d4:	6a3b      	ldr	r3, [r7, #32]
 80052d6:	3301      	adds	r3, #1
 80052d8:	623b      	str	r3, [r7, #32]
 80052da:	6a3a      	ldr	r2, [r7, #32]
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	429a      	cmp	r2, r3
 80052e0:	d3e6      	bcc.n	80052b0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80052e2:	8bfb      	ldrh	r3, [r7, #30]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d01e      	beq.n	8005326 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80052e8:	2300      	movs	r3, #0
 80052ea:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80052ec:	69bb      	ldr	r3, [r7, #24]
 80052ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052f2:	461a      	mov	r2, r3
 80052f4:	f107 0310 	add.w	r3, r7, #16
 80052f8:	6812      	ldr	r2, [r2, #0]
 80052fa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80052fc:	693a      	ldr	r2, [r7, #16]
 80052fe:	6a3b      	ldr	r3, [r7, #32]
 8005300:	b2db      	uxtb	r3, r3
 8005302:	00db      	lsls	r3, r3, #3
 8005304:	fa22 f303 	lsr.w	r3, r2, r3
 8005308:	b2da      	uxtb	r2, r3
 800530a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530c:	701a      	strb	r2, [r3, #0]
      i++;
 800530e:	6a3b      	ldr	r3, [r7, #32]
 8005310:	3301      	adds	r3, #1
 8005312:	623b      	str	r3, [r7, #32]
      pDest++;
 8005314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005316:	3301      	adds	r3, #1
 8005318:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800531a:	8bfb      	ldrh	r3, [r7, #30]
 800531c:	3b01      	subs	r3, #1
 800531e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005320:	8bfb      	ldrh	r3, [r7, #30]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d1ea      	bne.n	80052fc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005328:	4618      	mov	r0, r3
 800532a:	372c      	adds	r7, #44	; 0x2c
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr

08005334 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005334:	b480      	push	{r7}
 8005336:	b085      	sub	sp, #20
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	695b      	ldr	r3, [r3, #20]
 8005340:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	699b      	ldr	r3, [r3, #24]
 8005346:	68fa      	ldr	r2, [r7, #12]
 8005348:	4013      	ands	r3, r2
 800534a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800534c:	68fb      	ldr	r3, [r7, #12]
}
 800534e:	4618      	mov	r0, r3
 8005350:	3714      	adds	r7, #20
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr

0800535a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800535a:	b480      	push	{r7}
 800535c:	b083      	sub	sp, #12
 800535e:	af00      	add	r7, sp, #0
 8005360:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	695b      	ldr	r3, [r3, #20]
 8005366:	f003 0301 	and.w	r3, r3, #1
}
 800536a:	4618      	mov	r0, r3
 800536c:	370c      	adds	r7, #12
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr
	...

08005378 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005378:	b480      	push	{r7}
 800537a:	b085      	sub	sp, #20
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005380:	2300      	movs	r3, #0
 8005382:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	3301      	adds	r3, #1
 8005388:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	4a13      	ldr	r2, [pc, #76]	; (80053dc <USB_CoreReset+0x64>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d901      	bls.n	8005396 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005392:	2303      	movs	r3, #3
 8005394:	e01b      	b.n	80053ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	691b      	ldr	r3, [r3, #16]
 800539a:	2b00      	cmp	r3, #0
 800539c:	daf2      	bge.n	8005384 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800539e:	2300      	movs	r3, #0
 80053a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	691b      	ldr	r3, [r3, #16]
 80053a6:	f043 0201 	orr.w	r2, r3, #1
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	3301      	adds	r3, #1
 80053b2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	4a09      	ldr	r2, [pc, #36]	; (80053dc <USB_CoreReset+0x64>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d901      	bls.n	80053c0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80053bc:	2303      	movs	r3, #3
 80053be:	e006      	b.n	80053ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	691b      	ldr	r3, [r3, #16]
 80053c4:	f003 0301 	and.w	r3, r3, #1
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d0f0      	beq.n	80053ae <USB_CoreReset+0x36>

  return HAL_OK;
 80053cc:	2300      	movs	r3, #0
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3714      	adds	r7, #20
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr
 80053da:	bf00      	nop
 80053dc:	00030d40 	.word	0x00030d40

080053e0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80053e0:	b084      	sub	sp, #16
 80053e2:	b580      	push	{r7, lr}
 80053e4:	b086      	sub	sp, #24
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	6078      	str	r0, [r7, #4]
 80053ea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80053ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80053f2:	2300      	movs	r3, #0
 80053f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005400:	461a      	mov	r2, r3
 8005402:	2300      	movs	r3, #0
 8005404:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800540a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005416:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005422:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800542e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005432:	2b00      	cmp	r3, #0
 8005434:	d018      	beq.n	8005468 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005438:	2b01      	cmp	r3, #1
 800543a:	d10a      	bne.n	8005452 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	68fa      	ldr	r2, [r7, #12]
 8005446:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800544a:	f043 0304 	orr.w	r3, r3, #4
 800544e:	6013      	str	r3, [r2, #0]
 8005450:	e014      	b.n	800547c <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	68fa      	ldr	r2, [r7, #12]
 800545c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005460:	f023 0304 	bic.w	r3, r3, #4
 8005464:	6013      	str	r3, [r2, #0]
 8005466:	e009      	b.n	800547c <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	68fa      	ldr	r2, [r7, #12]
 8005472:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005476:	f023 0304 	bic.w	r3, r3, #4
 800547a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800547c:	2110      	movs	r1, #16
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f7ff fe5e 	bl	8005140 <USB_FlushTxFifo>
 8005484:	4603      	mov	r3, r0
 8005486:	2b00      	cmp	r3, #0
 8005488:	d001      	beq.n	800548e <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f7ff fe8a 	bl	80051a8 <USB_FlushRxFifo>
 8005494:	4603      	mov	r3, r0
 8005496:	2b00      	cmp	r3, #0
 8005498:	d001      	beq.n	800549e <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800549e:	2300      	movs	r3, #0
 80054a0:	613b      	str	r3, [r7, #16]
 80054a2:	e015      	b.n	80054d0 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	015a      	lsls	r2, r3, #5
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	4413      	add	r3, r2
 80054ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054b0:	461a      	mov	r2, r3
 80054b2:	f04f 33ff 	mov.w	r3, #4294967295
 80054b6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	015a      	lsls	r2, r3, #5
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	4413      	add	r3, r2
 80054c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054c4:	461a      	mov	r2, r3
 80054c6:	2300      	movs	r3, #0
 80054c8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	3301      	adds	r3, #1
 80054ce:	613b      	str	r3, [r7, #16]
 80054d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054d2:	693a      	ldr	r2, [r7, #16]
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d3e5      	bcc.n	80054a4 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2200      	movs	r2, #0
 80054dc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f04f 32ff 	mov.w	r2, #4294967295
 80054e4:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d00b      	beq.n	800550a <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054f8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	4a13      	ldr	r2, [pc, #76]	; (800554c <USB_HostInit+0x16c>)
 80054fe:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	4a13      	ldr	r2, [pc, #76]	; (8005550 <USB_HostInit+0x170>)
 8005504:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005508:	e009      	b.n	800551e <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2280      	movs	r2, #128	; 0x80
 800550e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	4a10      	ldr	r2, [pc, #64]	; (8005554 <USB_HostInit+0x174>)
 8005514:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4a0f      	ldr	r2, [pc, #60]	; (8005558 <USB_HostInit+0x178>)
 800551a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800551e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005520:	2b00      	cmp	r3, #0
 8005522:	d105      	bne.n	8005530 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	699b      	ldr	r3, [r3, #24]
 8005528:	f043 0210 	orr.w	r2, r3, #16
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	699a      	ldr	r2, [r3, #24]
 8005534:	4b09      	ldr	r3, [pc, #36]	; (800555c <USB_HostInit+0x17c>)
 8005536:	4313      	orrs	r3, r2
 8005538:	687a      	ldr	r2, [r7, #4]
 800553a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800553c:	7dfb      	ldrb	r3, [r7, #23]
}
 800553e:	4618      	mov	r0, r3
 8005540:	3718      	adds	r7, #24
 8005542:	46bd      	mov	sp, r7
 8005544:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005548:	b004      	add	sp, #16
 800554a:	4770      	bx	lr
 800554c:	01000200 	.word	0x01000200
 8005550:	00e00300 	.word	0x00e00300
 8005554:	00600080 	.word	0x00600080
 8005558:	004000e0 	.word	0x004000e0
 800555c:	a3200008 	.word	0xa3200008

08005560 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005560:	b480      	push	{r7}
 8005562:	b085      	sub	sp, #20
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
 8005568:	460b      	mov	r3, r1
 800556a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	68fa      	ldr	r2, [r7, #12]
 800557a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800557e:	f023 0303 	bic.w	r3, r3, #3
 8005582:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	78fb      	ldrb	r3, [r7, #3]
 800558e:	f003 0303 	and.w	r3, r3, #3
 8005592:	68f9      	ldr	r1, [r7, #12]
 8005594:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005598:	4313      	orrs	r3, r2
 800559a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800559c:	78fb      	ldrb	r3, [r7, #3]
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d107      	bne.n	80055b2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055a8:	461a      	mov	r2, r3
 80055aa:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80055ae:	6053      	str	r3, [r2, #4]
 80055b0:	e009      	b.n	80055c6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80055b2:	78fb      	ldrb	r3, [r7, #3]
 80055b4:	2b02      	cmp	r3, #2
 80055b6:	d106      	bne.n	80055c6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055be:	461a      	mov	r2, r3
 80055c0:	f241 7370 	movw	r3, #6000	; 0x1770
 80055c4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80055c6:	2300      	movs	r3, #0
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3714      	adds	r7, #20
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr

080055d4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b084      	sub	sp, #16
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80055e0:	2300      	movs	r3, #0
 80055e2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80055f4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	68fa      	ldr	r2, [r7, #12]
 80055fa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80055fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005602:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005604:	2064      	movs	r0, #100	; 0x64
 8005606:	f7fb fe75 	bl	80012f4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	68fa      	ldr	r2, [r7, #12]
 800560e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005612:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005616:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005618:	200a      	movs	r0, #10
 800561a:	f7fb fe6b 	bl	80012f4 <HAL_Delay>

  return HAL_OK;
 800561e:	2300      	movs	r3, #0
}
 8005620:	4618      	mov	r0, r3
 8005622:	3710      	adds	r7, #16
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}

08005628 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005628:	b480      	push	{r7}
 800562a:	b085      	sub	sp, #20
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	460b      	mov	r3, r1
 8005632:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005638:	2300      	movs	r3, #0
 800563a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800564c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005654:	2b00      	cmp	r3, #0
 8005656:	d109      	bne.n	800566c <USB_DriveVbus+0x44>
 8005658:	78fb      	ldrb	r3, [r7, #3]
 800565a:	2b01      	cmp	r3, #1
 800565c:	d106      	bne.n	800566c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	68fa      	ldr	r2, [r7, #12]
 8005662:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005666:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800566a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005672:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005676:	d109      	bne.n	800568c <USB_DriveVbus+0x64>
 8005678:	78fb      	ldrb	r3, [r7, #3]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d106      	bne.n	800568c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	68fa      	ldr	r2, [r7, #12]
 8005682:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005686:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800568a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800568c:	2300      	movs	r3, #0
}
 800568e:	4618      	mov	r0, r3
 8005690:	3714      	adds	r7, #20
 8005692:	46bd      	mov	sp, r7
 8005694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005698:	4770      	bx	lr

0800569a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800569a:	b480      	push	{r7}
 800569c:	b085      	sub	sp, #20
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80056a6:	2300      	movs	r3, #0
 80056a8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	0c5b      	lsrs	r3, r3, #17
 80056b8:	f003 0303 	and.w	r3, r3, #3
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3714      	adds	r7, #20
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr

080056c8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b085      	sub	sp, #20
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	b29b      	uxth	r3, r3
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3714      	adds	r7, #20
 80056e2:	46bd      	mov	sp, r7
 80056e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e8:	4770      	bx	lr
	...

080056ec <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b088      	sub	sp, #32
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	4608      	mov	r0, r1
 80056f6:	4611      	mov	r1, r2
 80056f8:	461a      	mov	r2, r3
 80056fa:	4603      	mov	r3, r0
 80056fc:	70fb      	strb	r3, [r7, #3]
 80056fe:	460b      	mov	r3, r1
 8005700:	70bb      	strb	r3, [r7, #2]
 8005702:	4613      	mov	r3, r2
 8005704:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005706:	2300      	movs	r3, #0
 8005708:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800570e:	78fb      	ldrb	r3, [r7, #3]
 8005710:	015a      	lsls	r2, r3, #5
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	4413      	add	r3, r2
 8005716:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800571a:	461a      	mov	r2, r3
 800571c:	f04f 33ff 	mov.w	r3, #4294967295
 8005720:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005722:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005726:	2b03      	cmp	r3, #3
 8005728:	d87e      	bhi.n	8005828 <USB_HC_Init+0x13c>
 800572a:	a201      	add	r2, pc, #4	; (adr r2, 8005730 <USB_HC_Init+0x44>)
 800572c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005730:	08005741 	.word	0x08005741
 8005734:	080057eb 	.word	0x080057eb
 8005738:	08005741 	.word	0x08005741
 800573c:	080057ad 	.word	0x080057ad
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005740:	78fb      	ldrb	r3, [r7, #3]
 8005742:	015a      	lsls	r2, r3, #5
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	4413      	add	r3, r2
 8005748:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800574c:	461a      	mov	r2, r3
 800574e:	f240 439d 	movw	r3, #1181	; 0x49d
 8005752:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005754:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005758:	2b00      	cmp	r3, #0
 800575a:	da10      	bge.n	800577e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800575c:	78fb      	ldrb	r3, [r7, #3]
 800575e:	015a      	lsls	r2, r3, #5
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	4413      	add	r3, r2
 8005764:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005768:	68db      	ldr	r3, [r3, #12]
 800576a:	78fa      	ldrb	r2, [r7, #3]
 800576c:	0151      	lsls	r1, r2, #5
 800576e:	693a      	ldr	r2, [r7, #16]
 8005770:	440a      	add	r2, r1
 8005772:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005776:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800577a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800577c:	e057      	b.n	800582e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005786:	2b00      	cmp	r3, #0
 8005788:	d051      	beq.n	800582e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800578a:	78fb      	ldrb	r3, [r7, #3]
 800578c:	015a      	lsls	r2, r3, #5
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	4413      	add	r3, r2
 8005792:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	78fa      	ldrb	r2, [r7, #3]
 800579a:	0151      	lsls	r1, r2, #5
 800579c:	693a      	ldr	r2, [r7, #16]
 800579e:	440a      	add	r2, r1
 80057a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057a4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80057a8:	60d3      	str	r3, [r2, #12]
      break;
 80057aa:	e040      	b.n	800582e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80057ac:	78fb      	ldrb	r3, [r7, #3]
 80057ae:	015a      	lsls	r2, r3, #5
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	4413      	add	r3, r2
 80057b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057b8:	461a      	mov	r2, r3
 80057ba:	f240 639d 	movw	r3, #1693	; 0x69d
 80057be:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80057c0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	da34      	bge.n	8005832 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80057c8:	78fb      	ldrb	r3, [r7, #3]
 80057ca:	015a      	lsls	r2, r3, #5
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	4413      	add	r3, r2
 80057d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057d4:	68db      	ldr	r3, [r3, #12]
 80057d6:	78fa      	ldrb	r2, [r7, #3]
 80057d8:	0151      	lsls	r1, r2, #5
 80057da:	693a      	ldr	r2, [r7, #16]
 80057dc:	440a      	add	r2, r1
 80057de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057e6:	60d3      	str	r3, [r2, #12]
      }

      break;
 80057e8:	e023      	b.n	8005832 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80057ea:	78fb      	ldrb	r3, [r7, #3]
 80057ec:	015a      	lsls	r2, r3, #5
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	4413      	add	r3, r2
 80057f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057f6:	461a      	mov	r2, r3
 80057f8:	f240 2325 	movw	r3, #549	; 0x225
 80057fc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80057fe:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005802:	2b00      	cmp	r3, #0
 8005804:	da17      	bge.n	8005836 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005806:	78fb      	ldrb	r3, [r7, #3]
 8005808:	015a      	lsls	r2, r3, #5
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	4413      	add	r3, r2
 800580e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	78fa      	ldrb	r2, [r7, #3]
 8005816:	0151      	lsls	r1, r2, #5
 8005818:	693a      	ldr	r2, [r7, #16]
 800581a:	440a      	add	r2, r1
 800581c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005820:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005824:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005826:	e006      	b.n	8005836 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005828:	2301      	movs	r3, #1
 800582a:	77fb      	strb	r3, [r7, #31]
      break;
 800582c:	e004      	b.n	8005838 <USB_HC_Init+0x14c>
      break;
 800582e:	bf00      	nop
 8005830:	e002      	b.n	8005838 <USB_HC_Init+0x14c>
      break;
 8005832:	bf00      	nop
 8005834:	e000      	b.n	8005838 <USB_HC_Init+0x14c>
      break;
 8005836:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005838:	78fb      	ldrb	r3, [r7, #3]
 800583a:	015a      	lsls	r2, r3, #5
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	4413      	add	r3, r2
 8005840:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005844:	68db      	ldr	r3, [r3, #12]
 8005846:	78fa      	ldrb	r2, [r7, #3]
 8005848:	0151      	lsls	r1, r2, #5
 800584a:	693a      	ldr	r2, [r7, #16]
 800584c:	440a      	add	r2, r1
 800584e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005852:	f043 0302 	orr.w	r3, r3, #2
 8005856:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800585e:	699a      	ldr	r2, [r3, #24]
 8005860:	78fb      	ldrb	r3, [r7, #3]
 8005862:	f003 030f 	and.w	r3, r3, #15
 8005866:	2101      	movs	r1, #1
 8005868:	fa01 f303 	lsl.w	r3, r1, r3
 800586c:	6939      	ldr	r1, [r7, #16]
 800586e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005872:	4313      	orrs	r3, r2
 8005874:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	699b      	ldr	r3, [r3, #24]
 800587a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005882:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005886:	2b00      	cmp	r3, #0
 8005888:	da03      	bge.n	8005892 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800588a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800588e:	61bb      	str	r3, [r7, #24]
 8005890:	e001      	b.n	8005896 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8005892:	2300      	movs	r3, #0
 8005894:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f7ff feff 	bl	800569a <USB_GetHostSpeed>
 800589c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800589e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80058a2:	2b02      	cmp	r3, #2
 80058a4:	d106      	bne.n	80058b4 <USB_HC_Init+0x1c8>
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2b02      	cmp	r3, #2
 80058aa:	d003      	beq.n	80058b4 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80058ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80058b0:	617b      	str	r3, [r7, #20]
 80058b2:	e001      	b.n	80058b8 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80058b4:	2300      	movs	r3, #0
 80058b6:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80058b8:	787b      	ldrb	r3, [r7, #1]
 80058ba:	059b      	lsls	r3, r3, #22
 80058bc:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80058c0:	78bb      	ldrb	r3, [r7, #2]
 80058c2:	02db      	lsls	r3, r3, #11
 80058c4:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80058c8:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80058ca:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80058ce:	049b      	lsls	r3, r3, #18
 80058d0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80058d4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80058d6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80058d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80058dc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80058de:	69bb      	ldr	r3, [r7, #24]
 80058e0:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80058e2:	78fb      	ldrb	r3, [r7, #3]
 80058e4:	0159      	lsls	r1, r3, #5
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	440b      	add	r3, r1
 80058ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058ee:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80058f4:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80058f6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80058fa:	2b03      	cmp	r3, #3
 80058fc:	d003      	beq.n	8005906 <USB_HC_Init+0x21a>
 80058fe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005902:	2b01      	cmp	r3, #1
 8005904:	d10f      	bne.n	8005926 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005906:	78fb      	ldrb	r3, [r7, #3]
 8005908:	015a      	lsls	r2, r3, #5
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	4413      	add	r3, r2
 800590e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	78fa      	ldrb	r2, [r7, #3]
 8005916:	0151      	lsls	r1, r2, #5
 8005918:	693a      	ldr	r2, [r7, #16]
 800591a:	440a      	add	r2, r1
 800591c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005920:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005924:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005926:	7ffb      	ldrb	r3, [r7, #31]
}
 8005928:	4618      	mov	r0, r3
 800592a:	3720      	adds	r7, #32
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}

08005930 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b08c      	sub	sp, #48	; 0x30
 8005934:	af02      	add	r7, sp, #8
 8005936:	60f8      	str	r0, [r7, #12]
 8005938:	60b9      	str	r1, [r7, #8]
 800593a:	4613      	mov	r3, r2
 800593c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	785b      	ldrb	r3, [r3, #1]
 8005946:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005948:	f44f 7380 	mov.w	r3, #256	; 0x100
 800594c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005956:	2b00      	cmp	r3, #0
 8005958:	d02d      	beq.n	80059b6 <USB_HC_StartXfer+0x86>
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	791b      	ldrb	r3, [r3, #4]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d129      	bne.n	80059b6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8005962:	79fb      	ldrb	r3, [r7, #7]
 8005964:	2b01      	cmp	r3, #1
 8005966:	d117      	bne.n	8005998 <USB_HC_StartXfer+0x68>
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	79db      	ldrb	r3, [r3, #7]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d003      	beq.n	8005978 <USB_HC_StartXfer+0x48>
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	79db      	ldrb	r3, [r3, #7]
 8005974:	2b02      	cmp	r3, #2
 8005976:	d10f      	bne.n	8005998 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005978:	69fb      	ldr	r3, [r7, #28]
 800597a:	015a      	lsls	r2, r3, #5
 800597c:	6a3b      	ldr	r3, [r7, #32]
 800597e:	4413      	add	r3, r2
 8005980:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	69fa      	ldr	r2, [r7, #28]
 8005988:	0151      	lsls	r1, r2, #5
 800598a:	6a3a      	ldr	r2, [r7, #32]
 800598c:	440a      	add	r2, r1
 800598e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005996:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005998:	79fb      	ldrb	r3, [r7, #7]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d10b      	bne.n	80059b6 <USB_HC_StartXfer+0x86>
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	795b      	ldrb	r3, [r3, #5]
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d107      	bne.n	80059b6 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	785b      	ldrb	r3, [r3, #1]
 80059aa:	4619      	mov	r1, r3
 80059ac:	68f8      	ldr	r0, [r7, #12]
 80059ae:	f000 fa0f 	bl	8005dd0 <USB_DoPing>
      return HAL_OK;
 80059b2:	2300      	movs	r3, #0
 80059b4:	e0f8      	b.n	8005ba8 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	695b      	ldr	r3, [r3, #20]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d018      	beq.n	80059f0 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	695b      	ldr	r3, [r3, #20]
 80059c2:	68ba      	ldr	r2, [r7, #8]
 80059c4:	8912      	ldrh	r2, [r2, #8]
 80059c6:	4413      	add	r3, r2
 80059c8:	3b01      	subs	r3, #1
 80059ca:	68ba      	ldr	r2, [r7, #8]
 80059cc:	8912      	ldrh	r2, [r2, #8]
 80059ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80059d2:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80059d4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80059d6:	8b7b      	ldrh	r3, [r7, #26]
 80059d8:	429a      	cmp	r2, r3
 80059da:	d90b      	bls.n	80059f4 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80059dc:	8b7b      	ldrh	r3, [r7, #26]
 80059de:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80059e0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80059e2:	68ba      	ldr	r2, [r7, #8]
 80059e4:	8912      	ldrh	r2, [r2, #8]
 80059e6:	fb03 f202 	mul.w	r2, r3, r2
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	611a      	str	r2, [r3, #16]
 80059ee:	e001      	b.n	80059f4 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80059f0:	2301      	movs	r3, #1
 80059f2:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	78db      	ldrb	r3, [r3, #3]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d007      	beq.n	8005a0c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80059fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80059fe:	68ba      	ldr	r2, [r7, #8]
 8005a00:	8912      	ldrh	r2, [r2, #8]
 8005a02:	fb03 f202 	mul.w	r2, r3, r2
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	611a      	str	r2, [r3, #16]
 8005a0a:	e003      	b.n	8005a14 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	695a      	ldr	r2, [r3, #20]
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	691b      	ldr	r3, [r3, #16]
 8005a18:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005a1c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005a1e:	04d9      	lsls	r1, r3, #19
 8005a20:	4b63      	ldr	r3, [pc, #396]	; (8005bb0 <USB_HC_StartXfer+0x280>)
 8005a22:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005a24:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	7a9b      	ldrb	r3, [r3, #10]
 8005a2a:	075b      	lsls	r3, r3, #29
 8005a2c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005a30:	69f9      	ldr	r1, [r7, #28]
 8005a32:	0148      	lsls	r0, r1, #5
 8005a34:	6a39      	ldr	r1, [r7, #32]
 8005a36:	4401      	add	r1, r0
 8005a38:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005a3c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005a3e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005a40:	79fb      	ldrb	r3, [r7, #7]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d009      	beq.n	8005a5a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	68d9      	ldr	r1, [r3, #12]
 8005a4a:	69fb      	ldr	r3, [r7, #28]
 8005a4c:	015a      	lsls	r2, r3, #5
 8005a4e:	6a3b      	ldr	r3, [r7, #32]
 8005a50:	4413      	add	r3, r2
 8005a52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a56:	460a      	mov	r2, r1
 8005a58:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005a5a:	6a3b      	ldr	r3, [r7, #32]
 8005a5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	f003 0301 	and.w	r3, r3, #1
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	bf0c      	ite	eq
 8005a6a:	2301      	moveq	r3, #1
 8005a6c:	2300      	movne	r3, #0
 8005a6e:	b2db      	uxtb	r3, r3
 8005a70:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	015a      	lsls	r2, r3, #5
 8005a76:	6a3b      	ldr	r3, [r7, #32]
 8005a78:	4413      	add	r3, r2
 8005a7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	69fa      	ldr	r2, [r7, #28]
 8005a82:	0151      	lsls	r1, r2, #5
 8005a84:	6a3a      	ldr	r2, [r7, #32]
 8005a86:	440a      	add	r2, r1
 8005a88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a8c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005a90:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005a92:	69fb      	ldr	r3, [r7, #28]
 8005a94:	015a      	lsls	r2, r3, #5
 8005a96:	6a3b      	ldr	r3, [r7, #32]
 8005a98:	4413      	add	r3, r2
 8005a9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	7e7b      	ldrb	r3, [r7, #25]
 8005aa2:	075b      	lsls	r3, r3, #29
 8005aa4:	69f9      	ldr	r1, [r7, #28]
 8005aa6:	0148      	lsls	r0, r1, #5
 8005aa8:	6a39      	ldr	r1, [r7, #32]
 8005aaa:	4401      	add	r1, r0
 8005aac:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005ab4:	69fb      	ldr	r3, [r7, #28]
 8005ab6:	015a      	lsls	r2, r3, #5
 8005ab8:	6a3b      	ldr	r3, [r7, #32]
 8005aba:	4413      	add	r3, r2
 8005abc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005aca:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	78db      	ldrb	r3, [r3, #3]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d004      	beq.n	8005ade <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ada:	613b      	str	r3, [r7, #16]
 8005adc:	e003      	b.n	8005ae6 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005ae4:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005aec:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005aee:	69fb      	ldr	r3, [r7, #28]
 8005af0:	015a      	lsls	r2, r3, #5
 8005af2:	6a3b      	ldr	r3, [r7, #32]
 8005af4:	4413      	add	r3, r2
 8005af6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005afa:	461a      	mov	r2, r3
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005b00:	79fb      	ldrb	r3, [r7, #7]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d001      	beq.n	8005b0a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005b06:	2300      	movs	r3, #0
 8005b08:	e04e      	b.n	8005ba8 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	78db      	ldrb	r3, [r3, #3]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d149      	bne.n	8005ba6 <USB_HC_StartXfer+0x276>
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	695b      	ldr	r3, [r3, #20]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d045      	beq.n	8005ba6 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	79db      	ldrb	r3, [r3, #7]
 8005b1e:	2b03      	cmp	r3, #3
 8005b20:	d830      	bhi.n	8005b84 <USB_HC_StartXfer+0x254>
 8005b22:	a201      	add	r2, pc, #4	; (adr r2, 8005b28 <USB_HC_StartXfer+0x1f8>)
 8005b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b28:	08005b39 	.word	0x08005b39
 8005b2c:	08005b5d 	.word	0x08005b5d
 8005b30:	08005b39 	.word	0x08005b39
 8005b34:	08005b5d 	.word	0x08005b5d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	695b      	ldr	r3, [r3, #20]
 8005b3c:	3303      	adds	r3, #3
 8005b3e:	089b      	lsrs	r3, r3, #2
 8005b40:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005b42:	8afa      	ldrh	r2, [r7, #22]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d91c      	bls.n	8005b88 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	699b      	ldr	r3, [r3, #24]
 8005b52:	f043 0220 	orr.w	r2, r3, #32
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	619a      	str	r2, [r3, #24]
        }
        break;
 8005b5a:	e015      	b.n	8005b88 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	695b      	ldr	r3, [r3, #20]
 8005b60:	3303      	adds	r3, #3
 8005b62:	089b      	lsrs	r3, r3, #2
 8005b64:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005b66:	8afa      	ldrh	r2, [r7, #22]
 8005b68:	6a3b      	ldr	r3, [r7, #32]
 8005b6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b6e:	691b      	ldr	r3, [r3, #16]
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d90a      	bls.n	8005b8c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	699b      	ldr	r3, [r3, #24]
 8005b7a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	619a      	str	r2, [r3, #24]
        }
        break;
 8005b82:	e003      	b.n	8005b8c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005b84:	bf00      	nop
 8005b86:	e002      	b.n	8005b8e <USB_HC_StartXfer+0x25e>
        break;
 8005b88:	bf00      	nop
 8005b8a:	e000      	b.n	8005b8e <USB_HC_StartXfer+0x25e>
        break;
 8005b8c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	68d9      	ldr	r1, [r3, #12]
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	785a      	ldrb	r2, [r3, #1]
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	695b      	ldr	r3, [r3, #20]
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	2000      	movs	r0, #0
 8005b9e:	9000      	str	r0, [sp, #0]
 8005ba0:	68f8      	ldr	r0, [r7, #12]
 8005ba2:	f7ff fb31 	bl	8005208 <USB_WritePacket>
  }

  return HAL_OK;
 8005ba6:	2300      	movs	r3, #0
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3728      	adds	r7, #40	; 0x28
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}
 8005bb0:	1ff80000 	.word	0x1ff80000

08005bb4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b085      	sub	sp, #20
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bc6:	695b      	ldr	r3, [r3, #20]
 8005bc8:	b29b      	uxth	r3, r3
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3714      	adds	r7, #20
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr

08005bd6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005bd6:	b480      	push	{r7}
 8005bd8:	b089      	sub	sp, #36	; 0x24
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	6078      	str	r0, [r7, #4]
 8005bde:	460b      	mov	r3, r1
 8005be0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005be6:	78fb      	ldrb	r3, [r7, #3]
 8005be8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005bea:	2300      	movs	r3, #0
 8005bec:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005bee:	69bb      	ldr	r3, [r7, #24]
 8005bf0:	015a      	lsls	r2, r3, #5
 8005bf2:	69fb      	ldr	r3, [r7, #28]
 8005bf4:	4413      	add	r3, r2
 8005bf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	0c9b      	lsrs	r3, r3, #18
 8005bfe:	f003 0303 	and.w	r3, r3, #3
 8005c02:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	015a      	lsls	r2, r3, #5
 8005c08:	69fb      	ldr	r3, [r7, #28]
 8005c0a:	4413      	add	r3, r2
 8005c0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	0fdb      	lsrs	r3, r3, #31
 8005c14:	f003 0301 	and.w	r3, r3, #1
 8005c18:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	f003 0320 	and.w	r3, r3, #32
 8005c22:	2b20      	cmp	r3, #32
 8005c24:	d104      	bne.n	8005c30 <USB_HC_Halt+0x5a>
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d101      	bne.n	8005c30 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	e0c8      	b.n	8005dc2 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d002      	beq.n	8005c3c <USB_HC_Halt+0x66>
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	2b02      	cmp	r3, #2
 8005c3a:	d163      	bne.n	8005d04 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005c3c:	69bb      	ldr	r3, [r7, #24]
 8005c3e:	015a      	lsls	r2, r3, #5
 8005c40:	69fb      	ldr	r3, [r7, #28]
 8005c42:	4413      	add	r3, r2
 8005c44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	69ba      	ldr	r2, [r7, #24]
 8005c4c:	0151      	lsls	r1, r2, #5
 8005c4e:	69fa      	ldr	r2, [r7, #28]
 8005c50:	440a      	add	r2, r1
 8005c52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c56:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c5a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	f003 0320 	and.w	r3, r3, #32
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	f040 80ab 	bne.w	8005dc0 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c6e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d133      	bne.n	8005cde <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005c76:	69bb      	ldr	r3, [r7, #24]
 8005c78:	015a      	lsls	r2, r3, #5
 8005c7a:	69fb      	ldr	r3, [r7, #28]
 8005c7c:	4413      	add	r3, r2
 8005c7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	69ba      	ldr	r2, [r7, #24]
 8005c86:	0151      	lsls	r1, r2, #5
 8005c88:	69fa      	ldr	r2, [r7, #28]
 8005c8a:	440a      	add	r2, r1
 8005c8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c90:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005c94:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005c96:	69bb      	ldr	r3, [r7, #24]
 8005c98:	015a      	lsls	r2, r3, #5
 8005c9a:	69fb      	ldr	r3, [r7, #28]
 8005c9c:	4413      	add	r3, r2
 8005c9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	69ba      	ldr	r2, [r7, #24]
 8005ca6:	0151      	lsls	r1, r2, #5
 8005ca8:	69fa      	ldr	r2, [r7, #28]
 8005caa:	440a      	add	r2, r1
 8005cac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cb0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005cb4:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	3301      	adds	r3, #1
 8005cba:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005cc2:	d81d      	bhi.n	8005d00 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005cc4:	69bb      	ldr	r3, [r7, #24]
 8005cc6:	015a      	lsls	r2, r3, #5
 8005cc8:	69fb      	ldr	r3, [r7, #28]
 8005cca:	4413      	add	r3, r2
 8005ccc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005cd6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005cda:	d0ec      	beq.n	8005cb6 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005cdc:	e070      	b.n	8005dc0 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005cde:	69bb      	ldr	r3, [r7, #24]
 8005ce0:	015a      	lsls	r2, r3, #5
 8005ce2:	69fb      	ldr	r3, [r7, #28]
 8005ce4:	4413      	add	r3, r2
 8005ce6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	69ba      	ldr	r2, [r7, #24]
 8005cee:	0151      	lsls	r1, r2, #5
 8005cf0:	69fa      	ldr	r2, [r7, #28]
 8005cf2:	440a      	add	r2, r1
 8005cf4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cf8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005cfc:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005cfe:	e05f      	b.n	8005dc0 <USB_HC_Halt+0x1ea>
            break;
 8005d00:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005d02:	e05d      	b.n	8005dc0 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005d04:	69bb      	ldr	r3, [r7, #24]
 8005d06:	015a      	lsls	r2, r3, #5
 8005d08:	69fb      	ldr	r3, [r7, #28]
 8005d0a:	4413      	add	r3, r2
 8005d0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	69ba      	ldr	r2, [r7, #24]
 8005d14:	0151      	lsls	r1, r2, #5
 8005d16:	69fa      	ldr	r2, [r7, #28]
 8005d18:	440a      	add	r2, r1
 8005d1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d1e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d22:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005d24:	69fb      	ldr	r3, [r7, #28]
 8005d26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d2a:	691b      	ldr	r3, [r3, #16]
 8005d2c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d133      	bne.n	8005d9c <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005d34:	69bb      	ldr	r3, [r7, #24]
 8005d36:	015a      	lsls	r2, r3, #5
 8005d38:	69fb      	ldr	r3, [r7, #28]
 8005d3a:	4413      	add	r3, r2
 8005d3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	69ba      	ldr	r2, [r7, #24]
 8005d44:	0151      	lsls	r1, r2, #5
 8005d46:	69fa      	ldr	r2, [r7, #28]
 8005d48:	440a      	add	r2, r1
 8005d4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d4e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005d52:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005d54:	69bb      	ldr	r3, [r7, #24]
 8005d56:	015a      	lsls	r2, r3, #5
 8005d58:	69fb      	ldr	r3, [r7, #28]
 8005d5a:	4413      	add	r3, r2
 8005d5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	69ba      	ldr	r2, [r7, #24]
 8005d64:	0151      	lsls	r1, r2, #5
 8005d66:	69fa      	ldr	r2, [r7, #28]
 8005d68:	440a      	add	r2, r1
 8005d6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d72:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	3301      	adds	r3, #1
 8005d78:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d80:	d81d      	bhi.n	8005dbe <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005d82:	69bb      	ldr	r3, [r7, #24]
 8005d84:	015a      	lsls	r2, r3, #5
 8005d86:	69fb      	ldr	r3, [r7, #28]
 8005d88:	4413      	add	r3, r2
 8005d8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d98:	d0ec      	beq.n	8005d74 <USB_HC_Halt+0x19e>
 8005d9a:	e011      	b.n	8005dc0 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005d9c:	69bb      	ldr	r3, [r7, #24]
 8005d9e:	015a      	lsls	r2, r3, #5
 8005da0:	69fb      	ldr	r3, [r7, #28]
 8005da2:	4413      	add	r3, r2
 8005da4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	69ba      	ldr	r2, [r7, #24]
 8005dac:	0151      	lsls	r1, r2, #5
 8005dae:	69fa      	ldr	r2, [r7, #28]
 8005db0:	440a      	add	r2, r1
 8005db2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005db6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005dba:	6013      	str	r3, [r2, #0]
 8005dbc:	e000      	b.n	8005dc0 <USB_HC_Halt+0x1ea>
          break;
 8005dbe:	bf00      	nop
    }
  }

  return HAL_OK;
 8005dc0:	2300      	movs	r3, #0
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3724      	adds	r7, #36	; 0x24
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr
	...

08005dd0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b087      	sub	sp, #28
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
 8005dd8:	460b      	mov	r3, r1
 8005dda:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005de0:	78fb      	ldrb	r3, [r7, #3]
 8005de2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005de4:	2301      	movs	r3, #1
 8005de6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	04da      	lsls	r2, r3, #19
 8005dec:	4b15      	ldr	r3, [pc, #84]	; (8005e44 <USB_DoPing+0x74>)
 8005dee:	4013      	ands	r3, r2
 8005df0:	693a      	ldr	r2, [r7, #16]
 8005df2:	0151      	lsls	r1, r2, #5
 8005df4:	697a      	ldr	r2, [r7, #20]
 8005df6:	440a      	add	r2, r1
 8005df8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005dfc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e00:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	015a      	lsls	r2, r3, #5
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	4413      	add	r3, r2
 8005e0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005e18:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e20:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	015a      	lsls	r2, r3, #5
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	4413      	add	r3, r2
 8005e2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e2e:	461a      	mov	r2, r3
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005e34:	2300      	movs	r3, #0
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	371c      	adds	r7, #28
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr
 8005e42:	bf00      	nop
 8005e44:	1ff80000 	.word	0x1ff80000

08005e48 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b088      	sub	sp, #32
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005e50:	2300      	movs	r3, #0
 8005e52:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f7ff f912 	bl	8005086 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005e62:	2110      	movs	r1, #16
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f7ff f96b 	bl	8005140 <USB_FlushTxFifo>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d001      	beq.n	8005e74 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005e70:	2301      	movs	r3, #1
 8005e72:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f7ff f997 	bl	80051a8 <USB_FlushRxFifo>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d001      	beq.n	8005e84 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005e84:	2300      	movs	r3, #0
 8005e86:	61bb      	str	r3, [r7, #24]
 8005e88:	e01f      	b.n	8005eca <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8005e8a:	69bb      	ldr	r3, [r7, #24]
 8005e8c:	015a      	lsls	r2, r3, #5
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	4413      	add	r3, r2
 8005e92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ea0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005ea8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005eb0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005eb2:	69bb      	ldr	r3, [r7, #24]
 8005eb4:	015a      	lsls	r2, r3, #5
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	4413      	add	r3, r2
 8005eba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ebe:	461a      	mov	r2, r3
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005ec4:	69bb      	ldr	r3, [r7, #24]
 8005ec6:	3301      	adds	r3, #1
 8005ec8:	61bb      	str	r3, [r7, #24]
 8005eca:	69bb      	ldr	r3, [r7, #24]
 8005ecc:	2b0f      	cmp	r3, #15
 8005ece:	d9dc      	bls.n	8005e8a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	61bb      	str	r3, [r7, #24]
 8005ed4:	e034      	b.n	8005f40 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8005ed6:	69bb      	ldr	r3, [r7, #24]
 8005ed8:	015a      	lsls	r2, r3, #5
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	4413      	add	r3, r2
 8005ede:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005eec:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ef4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005efc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005efe:	69bb      	ldr	r3, [r7, #24]
 8005f00:	015a      	lsls	r2, r3, #5
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	4413      	add	r3, r2
 8005f06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	3301      	adds	r3, #1
 8005f14:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f1c:	d80c      	bhi.n	8005f38 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005f1e:	69bb      	ldr	r3, [r7, #24]
 8005f20:	015a      	lsls	r2, r3, #5
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	4413      	add	r3, r2
 8005f26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f34:	d0ec      	beq.n	8005f10 <USB_StopHost+0xc8>
 8005f36:	e000      	b.n	8005f3a <USB_StopHost+0xf2>
        break;
 8005f38:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005f3a:	69bb      	ldr	r3, [r7, #24]
 8005f3c:	3301      	adds	r3, #1
 8005f3e:	61bb      	str	r3, [r7, #24]
 8005f40:	69bb      	ldr	r3, [r7, #24]
 8005f42:	2b0f      	cmp	r3, #15
 8005f44:	d9c7      	bls.n	8005ed6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8005f52:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f04f 32ff 	mov.w	r2, #4294967295
 8005f5a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f7ff f881 	bl	8005064 <USB_EnableGlobalInt>

  return ret;
 8005f62:	7ffb      	ldrb	r3, [r7, #31]
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3720      	adds	r7, #32
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005f6c:	b590      	push	{r4, r7, lr}
 8005f6e:	b089      	sub	sp, #36	; 0x24
 8005f70:	af04      	add	r7, sp, #16
 8005f72:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005f74:	2301      	movs	r3, #1
 8005f76:	2202      	movs	r2, #2
 8005f78:	2102      	movs	r1, #2
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f000 fc66 	bl	800684c <USBH_FindInterface>
 8005f80:	4603      	mov	r3, r0
 8005f82:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005f84:	7bfb      	ldrb	r3, [r7, #15]
 8005f86:	2bff      	cmp	r3, #255	; 0xff
 8005f88:	d002      	beq.n	8005f90 <USBH_CDC_InterfaceInit+0x24>
 8005f8a:	7bfb      	ldrb	r3, [r7, #15]
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	d901      	bls.n	8005f94 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005f90:	2302      	movs	r3, #2
 8005f92:	e13d      	b.n	8006210 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005f94:	7bfb      	ldrb	r3, [r7, #15]
 8005f96:	4619      	mov	r1, r3
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f000 fc3b 	bl	8006814 <USBH_SelectInterface>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005fa2:	7bbb      	ldrb	r3, [r7, #14]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d001      	beq.n	8005fac <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005fa8:	2302      	movs	r3, #2
 8005faa:	e131      	b.n	8006210 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005fb2:	2050      	movs	r0, #80	; 0x50
 8005fb4:	f002 fafa 	bl	80085ac <malloc>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005fc2:	69db      	ldr	r3, [r3, #28]
 8005fc4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d101      	bne.n	8005fd0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8005fcc:	2302      	movs	r3, #2
 8005fce:	e11f      	b.n	8006210 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8005fd0:	2250      	movs	r2, #80	; 0x50
 8005fd2:	2100      	movs	r1, #0
 8005fd4:	68b8      	ldr	r0, [r7, #8]
 8005fd6:	f002 faf9 	bl	80085cc <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005fda:	7bfb      	ldrb	r3, [r7, #15]
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	211a      	movs	r1, #26
 8005fe0:	fb01 f303 	mul.w	r3, r1, r3
 8005fe4:	4413      	add	r3, r2
 8005fe6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005fea:	781b      	ldrb	r3, [r3, #0]
 8005fec:	b25b      	sxtb	r3, r3
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	da15      	bge.n	800601e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005ff2:	7bfb      	ldrb	r3, [r7, #15]
 8005ff4:	687a      	ldr	r2, [r7, #4]
 8005ff6:	211a      	movs	r1, #26
 8005ff8:	fb01 f303 	mul.w	r3, r1, r3
 8005ffc:	4413      	add	r3, r2
 8005ffe:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006002:	781a      	ldrb	r2, [r3, #0]
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006008:	7bfb      	ldrb	r3, [r7, #15]
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	211a      	movs	r1, #26
 800600e:	fb01 f303 	mul.w	r3, r1, r3
 8006012:	4413      	add	r3, r2
 8006014:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006018:	881a      	ldrh	r2, [r3, #0]
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	785b      	ldrb	r3, [r3, #1]
 8006022:	4619      	mov	r1, r3
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f001 ff2c 	bl	8007e82 <USBH_AllocPipe>
 800602a:	4603      	mov	r3, r0
 800602c:	461a      	mov	r2, r3
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	7819      	ldrb	r1, [r3, #0]
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	7858      	ldrb	r0, [r3, #1]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006046:	68ba      	ldr	r2, [r7, #8]
 8006048:	8952      	ldrh	r2, [r2, #10]
 800604a:	9202      	str	r2, [sp, #8]
 800604c:	2203      	movs	r2, #3
 800604e:	9201      	str	r2, [sp, #4]
 8006050:	9300      	str	r3, [sp, #0]
 8006052:	4623      	mov	r3, r4
 8006054:	4602      	mov	r2, r0
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f001 fee4 	bl	8007e24 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	2200      	movs	r2, #0
 8006062:	4619      	mov	r1, r3
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f002 f9f3 	bl	8008450 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800606a:	2300      	movs	r3, #0
 800606c:	2200      	movs	r2, #0
 800606e:	210a      	movs	r1, #10
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f000 fbeb 	bl	800684c <USBH_FindInterface>
 8006076:	4603      	mov	r3, r0
 8006078:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800607a:	7bfb      	ldrb	r3, [r7, #15]
 800607c:	2bff      	cmp	r3, #255	; 0xff
 800607e:	d002      	beq.n	8006086 <USBH_CDC_InterfaceInit+0x11a>
 8006080:	7bfb      	ldrb	r3, [r7, #15]
 8006082:	2b01      	cmp	r3, #1
 8006084:	d901      	bls.n	800608a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006086:	2302      	movs	r3, #2
 8006088:	e0c2      	b.n	8006210 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800608a:	7bfb      	ldrb	r3, [r7, #15]
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	211a      	movs	r1, #26
 8006090:	fb01 f303 	mul.w	r3, r1, r3
 8006094:	4413      	add	r3, r2
 8006096:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800609a:	781b      	ldrb	r3, [r3, #0]
 800609c:	b25b      	sxtb	r3, r3
 800609e:	2b00      	cmp	r3, #0
 80060a0:	da16      	bge.n	80060d0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80060a2:	7bfb      	ldrb	r3, [r7, #15]
 80060a4:	687a      	ldr	r2, [r7, #4]
 80060a6:	211a      	movs	r1, #26
 80060a8:	fb01 f303 	mul.w	r3, r1, r3
 80060ac:	4413      	add	r3, r2
 80060ae:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80060b2:	781a      	ldrb	r2, [r3, #0]
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80060b8:	7bfb      	ldrb	r3, [r7, #15]
 80060ba:	687a      	ldr	r2, [r7, #4]
 80060bc:	211a      	movs	r1, #26
 80060be:	fb01 f303 	mul.w	r3, r1, r3
 80060c2:	4413      	add	r3, r2
 80060c4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80060c8:	881a      	ldrh	r2, [r3, #0]
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	835a      	strh	r2, [r3, #26]
 80060ce:	e015      	b.n	80060fc <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80060d0:	7bfb      	ldrb	r3, [r7, #15]
 80060d2:	687a      	ldr	r2, [r7, #4]
 80060d4:	211a      	movs	r1, #26
 80060d6:	fb01 f303 	mul.w	r3, r1, r3
 80060da:	4413      	add	r3, r2
 80060dc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80060e0:	781a      	ldrb	r2, [r3, #0]
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80060e6:	7bfb      	ldrb	r3, [r7, #15]
 80060e8:	687a      	ldr	r2, [r7, #4]
 80060ea:	211a      	movs	r1, #26
 80060ec:	fb01 f303 	mul.w	r3, r1, r3
 80060f0:	4413      	add	r3, r2
 80060f2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80060f6:	881a      	ldrh	r2, [r3, #0]
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80060fc:	7bfb      	ldrb	r3, [r7, #15]
 80060fe:	687a      	ldr	r2, [r7, #4]
 8006100:	211a      	movs	r1, #26
 8006102:	fb01 f303 	mul.w	r3, r1, r3
 8006106:	4413      	add	r3, r2
 8006108:	f203 3356 	addw	r3, r3, #854	; 0x356
 800610c:	781b      	ldrb	r3, [r3, #0]
 800610e:	b25b      	sxtb	r3, r3
 8006110:	2b00      	cmp	r3, #0
 8006112:	da16      	bge.n	8006142 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006114:	7bfb      	ldrb	r3, [r7, #15]
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	211a      	movs	r1, #26
 800611a:	fb01 f303 	mul.w	r3, r1, r3
 800611e:	4413      	add	r3, r2
 8006120:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006124:	781a      	ldrb	r2, [r3, #0]
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800612a:	7bfb      	ldrb	r3, [r7, #15]
 800612c:	687a      	ldr	r2, [r7, #4]
 800612e:	211a      	movs	r1, #26
 8006130:	fb01 f303 	mul.w	r3, r1, r3
 8006134:	4413      	add	r3, r2
 8006136:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800613a:	881a      	ldrh	r2, [r3, #0]
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	835a      	strh	r2, [r3, #26]
 8006140:	e015      	b.n	800616e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006142:	7bfb      	ldrb	r3, [r7, #15]
 8006144:	687a      	ldr	r2, [r7, #4]
 8006146:	211a      	movs	r1, #26
 8006148:	fb01 f303 	mul.w	r3, r1, r3
 800614c:	4413      	add	r3, r2
 800614e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006152:	781a      	ldrb	r2, [r3, #0]
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006158:	7bfb      	ldrb	r3, [r7, #15]
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	211a      	movs	r1, #26
 800615e:	fb01 f303 	mul.w	r3, r1, r3
 8006162:	4413      	add	r3, r2
 8006164:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006168:	881a      	ldrh	r2, [r3, #0]
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	7b9b      	ldrb	r3, [r3, #14]
 8006172:	4619      	mov	r1, r3
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f001 fe84 	bl	8007e82 <USBH_AllocPipe>
 800617a:	4603      	mov	r3, r0
 800617c:	461a      	mov	r2, r3
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	7bdb      	ldrb	r3, [r3, #15]
 8006186:	4619      	mov	r1, r3
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f001 fe7a 	bl	8007e82 <USBH_AllocPipe>
 800618e:	4603      	mov	r3, r0
 8006190:	461a      	mov	r2, r3
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	7b59      	ldrb	r1, [r3, #13]
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	7b98      	ldrb	r0, [r3, #14]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80061aa:	68ba      	ldr	r2, [r7, #8]
 80061ac:	8b12      	ldrh	r2, [r2, #24]
 80061ae:	9202      	str	r2, [sp, #8]
 80061b0:	2202      	movs	r2, #2
 80061b2:	9201      	str	r2, [sp, #4]
 80061b4:	9300      	str	r3, [sp, #0]
 80061b6:	4623      	mov	r3, r4
 80061b8:	4602      	mov	r2, r0
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f001 fe32 	bl	8007e24 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	7b19      	ldrb	r1, [r3, #12]
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	7bd8      	ldrb	r0, [r3, #15]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80061d4:	68ba      	ldr	r2, [r7, #8]
 80061d6:	8b52      	ldrh	r2, [r2, #26]
 80061d8:	9202      	str	r2, [sp, #8]
 80061da:	2202      	movs	r2, #2
 80061dc:	9201      	str	r2, [sp, #4]
 80061de:	9300      	str	r3, [sp, #0]
 80061e0:	4623      	mov	r3, r4
 80061e2:	4602      	mov	r2, r0
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f001 fe1d 	bl	8007e24 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	2200      	movs	r2, #0
 80061ee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	7b5b      	ldrb	r3, [r3, #13]
 80061f6:	2200      	movs	r2, #0
 80061f8:	4619      	mov	r1, r3
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f002 f928 	bl	8008450 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	7b1b      	ldrb	r3, [r3, #12]
 8006204:	2200      	movs	r2, #0
 8006206:	4619      	mov	r1, r3
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f002 f921 	bl	8008450 <USBH_LL_SetToggle>

  return USBH_OK;
 800620e:	2300      	movs	r3, #0
}
 8006210:	4618      	mov	r0, r3
 8006212:	3714      	adds	r7, #20
 8006214:	46bd      	mov	sp, r7
 8006216:	bd90      	pop	{r4, r7, pc}

08006218 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b084      	sub	sp, #16
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006226:	69db      	ldr	r3, [r3, #28]
 8006228:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	781b      	ldrb	r3, [r3, #0]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d00e      	beq.n	8006250 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	781b      	ldrb	r3, [r3, #0]
 8006236:	4619      	mov	r1, r3
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f001 fe12 	bl	8007e62 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	4619      	mov	r1, r3
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f001 fe3d 	bl	8007ec4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2200      	movs	r2, #0
 800624e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	7b1b      	ldrb	r3, [r3, #12]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d00e      	beq.n	8006276 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	7b1b      	ldrb	r3, [r3, #12]
 800625c:	4619      	mov	r1, r3
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f001 fdff 	bl	8007e62 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	7b1b      	ldrb	r3, [r3, #12]
 8006268:	4619      	mov	r1, r3
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f001 fe2a 	bl	8007ec4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2200      	movs	r2, #0
 8006274:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	7b5b      	ldrb	r3, [r3, #13]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d00e      	beq.n	800629c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	7b5b      	ldrb	r3, [r3, #13]
 8006282:	4619      	mov	r1, r3
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f001 fdec 	bl	8007e62 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	7b5b      	ldrb	r3, [r3, #13]
 800628e:	4619      	mov	r1, r3
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f001 fe17 	bl	8007ec4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2200      	movs	r2, #0
 800629a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80062a2:	69db      	ldr	r3, [r3, #28]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d00b      	beq.n	80062c0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80062ae:	69db      	ldr	r3, [r3, #28]
 80062b0:	4618      	mov	r0, r3
 80062b2:	f002 f983 	bl	80085bc <free>
    phost->pActiveClass->pData = 0U;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80062bc:	2200      	movs	r2, #0
 80062be:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80062c0:	2300      	movs	r3, #0
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3710      	adds	r7, #16
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}

080062ca <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80062ca:	b580      	push	{r7, lr}
 80062cc:	b084      	sub	sp, #16
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80062d8:	69db      	ldr	r3, [r3, #28]
 80062da:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	3340      	adds	r3, #64	; 0x40
 80062e0:	4619      	mov	r1, r3
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f000 f8b1 	bl	800644a <GetLineCoding>
 80062e8:	4603      	mov	r3, r0
 80062ea:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80062ec:	7afb      	ldrb	r3, [r7, #11]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d105      	bne.n	80062fe <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80062f8:	2102      	movs	r1, #2
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80062fe:	7afb      	ldrb	r3, [r7, #11]
}
 8006300:	4618      	mov	r0, r3
 8006302:	3710      	adds	r7, #16
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}

08006308 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b084      	sub	sp, #16
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006310:	2301      	movs	r3, #1
 8006312:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006314:	2300      	movs	r3, #0
 8006316:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800631e:	69db      	ldr	r3, [r3, #28]
 8006320:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006328:	2b04      	cmp	r3, #4
 800632a:	d877      	bhi.n	800641c <USBH_CDC_Process+0x114>
 800632c:	a201      	add	r2, pc, #4	; (adr r2, 8006334 <USBH_CDC_Process+0x2c>)
 800632e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006332:	bf00      	nop
 8006334:	08006349 	.word	0x08006349
 8006338:	0800634f 	.word	0x0800634f
 800633c:	0800637f 	.word	0x0800637f
 8006340:	080063f3 	.word	0x080063f3
 8006344:	08006401 	.word	0x08006401
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006348:	2300      	movs	r3, #0
 800634a:	73fb      	strb	r3, [r7, #15]
      break;
 800634c:	e06d      	b.n	800642a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006352:	4619      	mov	r1, r3
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f000 f897 	bl	8006488 <SetLineCoding>
 800635a:	4603      	mov	r3, r0
 800635c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800635e:	7bbb      	ldrb	r3, [r7, #14]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d104      	bne.n	800636e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	2202      	movs	r2, #2
 8006368:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800636c:	e058      	b.n	8006420 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800636e:	7bbb      	ldrb	r3, [r7, #14]
 8006370:	2b01      	cmp	r3, #1
 8006372:	d055      	beq.n	8006420 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	2204      	movs	r2, #4
 8006378:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800637c:	e050      	b.n	8006420 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	3340      	adds	r3, #64	; 0x40
 8006382:	4619      	mov	r1, r3
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f000 f860 	bl	800644a <GetLineCoding>
 800638a:	4603      	mov	r3, r0
 800638c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800638e:	7bbb      	ldrb	r3, [r7, #14]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d126      	bne.n	80063e2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	2200      	movs	r2, #0
 8006398:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063a6:	791b      	ldrb	r3, [r3, #4]
 80063a8:	429a      	cmp	r2, r3
 80063aa:	d13b      	bne.n	8006424 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063b6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80063b8:	429a      	cmp	r2, r3
 80063ba:	d133      	bne.n	8006424 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063c6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d12b      	bne.n	8006424 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063d4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80063d6:	429a      	cmp	r2, r3
 80063d8:	d124      	bne.n	8006424 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f000 f958 	bl	8006690 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80063e0:	e020      	b.n	8006424 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80063e2:	7bbb      	ldrb	r3, [r7, #14]
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d01d      	beq.n	8006424 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	2204      	movs	r2, #4
 80063ec:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80063f0:	e018      	b.n	8006424 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f000 f867 	bl	80064c6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f000 f8da 	bl	80065b2 <CDC_ProcessReception>
      break;
 80063fe:	e014      	b.n	800642a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006400:	2100      	movs	r1, #0
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f000 ffef 	bl	80073e6 <USBH_ClrFeature>
 8006408:	4603      	mov	r3, r0
 800640a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800640c:	7bbb      	ldrb	r3, [r7, #14]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d10a      	bne.n	8006428 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	2200      	movs	r2, #0
 8006416:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800641a:	e005      	b.n	8006428 <USBH_CDC_Process+0x120>

    default:
      break;
 800641c:	bf00      	nop
 800641e:	e004      	b.n	800642a <USBH_CDC_Process+0x122>
      break;
 8006420:	bf00      	nop
 8006422:	e002      	b.n	800642a <USBH_CDC_Process+0x122>
      break;
 8006424:	bf00      	nop
 8006426:	e000      	b.n	800642a <USBH_CDC_Process+0x122>
      break;
 8006428:	bf00      	nop

  }

  return status;
 800642a:	7bfb      	ldrb	r3, [r7, #15]
}
 800642c:	4618      	mov	r0, r3
 800642e:	3710      	adds	r7, #16
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}

08006434 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006434:	b480      	push	{r7}
 8006436:	b083      	sub	sp, #12
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800643c:	2300      	movs	r3, #0
}
 800643e:	4618      	mov	r0, r3
 8006440:	370c      	adds	r7, #12
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr

0800644a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800644a:	b580      	push	{r7, lr}
 800644c:	b082      	sub	sp, #8
 800644e:	af00      	add	r7, sp, #0
 8006450:	6078      	str	r0, [r7, #4]
 8006452:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	22a1      	movs	r2, #161	; 0xa1
 8006458:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2221      	movs	r2, #33	; 0x21
 800645e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2200      	movs	r2, #0
 8006464:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2200      	movs	r2, #0
 800646a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2207      	movs	r2, #7
 8006470:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	2207      	movs	r2, #7
 8006476:	4619      	mov	r1, r3
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f001 fa81 	bl	8007980 <USBH_CtlReq>
 800647e:	4603      	mov	r3, r0
}
 8006480:	4618      	mov	r0, r3
 8006482:	3708      	adds	r7, #8
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}

08006488 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b082      	sub	sp, #8
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2221      	movs	r2, #33	; 0x21
 8006496:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2220      	movs	r2, #32
 800649c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2200      	movs	r2, #0
 80064a2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2200      	movs	r2, #0
 80064a8:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2207      	movs	r2, #7
 80064ae:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	2207      	movs	r2, #7
 80064b4:	4619      	mov	r1, r3
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f001 fa62 	bl	8007980 <USBH_CtlReq>
 80064bc:	4603      	mov	r3, r0
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3708      	adds	r7, #8
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}

080064c6 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80064c6:	b580      	push	{r7, lr}
 80064c8:	b086      	sub	sp, #24
 80064ca:	af02      	add	r7, sp, #8
 80064cc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80064d4:	69db      	ldr	r3, [r3, #28]
 80064d6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80064d8:	2300      	movs	r3, #0
 80064da:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	d002      	beq.n	80064ec <CDC_ProcessTransmission+0x26>
 80064e6:	2b02      	cmp	r3, #2
 80064e8:	d023      	beq.n	8006532 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80064ea:	e05e      	b.n	80065aa <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f0:	68fa      	ldr	r2, [r7, #12]
 80064f2:	8b12      	ldrh	r2, [r2, #24]
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d90b      	bls.n	8006510 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	69d9      	ldr	r1, [r3, #28]
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	8b1a      	ldrh	r2, [r3, #24]
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	7b5b      	ldrb	r3, [r3, #13]
 8006504:	2001      	movs	r0, #1
 8006506:	9000      	str	r0, [sp, #0]
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f001 fc48 	bl	8007d9e <USBH_BulkSendData>
 800650e:	e00b      	b.n	8006528 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8006518:	b29a      	uxth	r2, r3
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	7b5b      	ldrb	r3, [r3, #13]
 800651e:	2001      	movs	r0, #1
 8006520:	9000      	str	r0, [sp, #0]
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f001 fc3b 	bl	8007d9e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2202      	movs	r2, #2
 800652c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006530:	e03b      	b.n	80065aa <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	7b5b      	ldrb	r3, [r3, #13]
 8006536:	4619      	mov	r1, r3
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f001 ff5f 	bl	80083fc <USBH_LL_GetURBState>
 800653e:	4603      	mov	r3, r0
 8006540:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006542:	7afb      	ldrb	r3, [r7, #11]
 8006544:	2b01      	cmp	r3, #1
 8006546:	d128      	bne.n	800659a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800654c:	68fa      	ldr	r2, [r7, #12]
 800654e:	8b12      	ldrh	r2, [r2, #24]
 8006550:	4293      	cmp	r3, r2
 8006552:	d90e      	bls.n	8006572 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006558:	68fa      	ldr	r2, [r7, #12]
 800655a:	8b12      	ldrh	r2, [r2, #24]
 800655c:	1a9a      	subs	r2, r3, r2
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	69db      	ldr	r3, [r3, #28]
 8006566:	68fa      	ldr	r2, [r7, #12]
 8006568:	8b12      	ldrh	r2, [r2, #24]
 800656a:	441a      	add	r2, r3
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	61da      	str	r2, [r3, #28]
 8006570:	e002      	b.n	8006578 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2200      	movs	r2, #0
 8006576:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800657c:	2b00      	cmp	r3, #0
 800657e:	d004      	beq.n	800658a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2201      	movs	r2, #1
 8006584:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006588:	e00e      	b.n	80065a8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2200      	movs	r2, #0
 800658e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f000 f868 	bl	8006668 <USBH_CDC_TransmitCallback>
      break;
 8006598:	e006      	b.n	80065a8 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800659a:	7afb      	ldrb	r3, [r7, #11]
 800659c:	2b02      	cmp	r3, #2
 800659e:	d103      	bne.n	80065a8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2201      	movs	r2, #1
 80065a4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80065a8:	bf00      	nop
  }
}
 80065aa:	bf00      	nop
 80065ac:	3710      	adds	r7, #16
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}

080065b2 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80065b2:	b580      	push	{r7, lr}
 80065b4:	b086      	sub	sp, #24
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80065c0:	69db      	ldr	r3, [r3, #28]
 80065c2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80065c4:	2300      	movs	r3, #0
 80065c6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80065ce:	2b03      	cmp	r3, #3
 80065d0:	d002      	beq.n	80065d8 <CDC_ProcessReception+0x26>
 80065d2:	2b04      	cmp	r3, #4
 80065d4:	d00e      	beq.n	80065f4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80065d6:	e043      	b.n	8006660 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	6a19      	ldr	r1, [r3, #32]
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	8b5a      	ldrh	r2, [r3, #26]
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	7b1b      	ldrb	r3, [r3, #12]
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f001 fbff 	bl	8007de8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	2204      	movs	r2, #4
 80065ee:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80065f2:	e035      	b.n	8006660 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	7b1b      	ldrb	r3, [r3, #12]
 80065f8:	4619      	mov	r1, r3
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f001 fefe 	bl	80083fc <USBH_LL_GetURBState>
 8006600:	4603      	mov	r3, r0
 8006602:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006604:	7cfb      	ldrb	r3, [r7, #19]
 8006606:	2b01      	cmp	r3, #1
 8006608:	d129      	bne.n	800665e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	7b1b      	ldrb	r3, [r3, #12]
 800660e:	4619      	mov	r1, r3
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f001 fe61 	bl	80082d8 <USBH_LL_GetLastXferSize>
 8006616:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800661c:	68fa      	ldr	r2, [r7, #12]
 800661e:	429a      	cmp	r2, r3
 8006620:	d016      	beq.n	8006650 <CDC_ProcessReception+0x9e>
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	8b5b      	ldrh	r3, [r3, #26]
 8006626:	461a      	mov	r2, r3
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	4293      	cmp	r3, r2
 800662c:	d910      	bls.n	8006650 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	1ad2      	subs	r2, r2, r3
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	6a1a      	ldr	r2, [r3, #32]
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	441a      	add	r2, r3
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	2203      	movs	r2, #3
 800664a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800664e:	e006      	b.n	800665e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	2200      	movs	r2, #0
 8006654:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f000 f80f 	bl	800667c <USBH_CDC_ReceiveCallback>
      break;
 800665e:	bf00      	nop
  }
}
 8006660:	bf00      	nop
 8006662:	3718      	adds	r7, #24
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}

08006668 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006668:	b480      	push	{r7}
 800666a:	b083      	sub	sp, #12
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006670:	bf00      	nop
 8006672:	370c      	adds	r7, #12
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr

0800667c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800667c:	b480      	push	{r7}
 800667e:	b083      	sub	sp, #12
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006684:	bf00      	nop
 8006686:	370c      	adds	r7, #12
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr

08006690 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006690:	b480      	push	{r7}
 8006692:	b083      	sub	sp, #12
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006698:	bf00      	nop
 800669a:	370c      	adds	r7, #12
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr

080066a4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b084      	sub	sp, #16
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	60f8      	str	r0, [r7, #12]
 80066ac:	60b9      	str	r1, [r7, #8]
 80066ae:	4613      	mov	r3, r2
 80066b0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d101      	bne.n	80066bc <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80066b8:	2302      	movs	r3, #2
 80066ba:	e029      	b.n	8006710 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	79fa      	ldrb	r2, [r7, #7]
 80066c0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2200      	movs	r2, #0
 80066c8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2200      	movs	r2, #0
 80066d0:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80066d4:	68f8      	ldr	r0, [r7, #12]
 80066d6:	f000 f81f 	bl	8006718 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2200      	movs	r2, #0
 80066de:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2200      	movs	r2, #0
 80066e6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2200      	movs	r2, #0
 80066ee:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2200      	movs	r2, #0
 80066f6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d003      	beq.n	8006708 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	68ba      	ldr	r2, [r7, #8]
 8006704:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006708:	68f8      	ldr	r0, [r7, #12]
 800670a:	f001 fd31 	bl	8008170 <USBH_LL_Init>

  return USBH_OK;
 800670e:	2300      	movs	r3, #0
}
 8006710:	4618      	mov	r0, r3
 8006712:	3710      	adds	r7, #16
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}

08006718 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006718:	b480      	push	{r7}
 800671a:	b085      	sub	sp, #20
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006720:	2300      	movs	r3, #0
 8006722:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006724:	2300      	movs	r3, #0
 8006726:	60fb      	str	r3, [r7, #12]
 8006728:	e009      	b.n	800673e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800672a:	687a      	ldr	r2, [r7, #4]
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	33e0      	adds	r3, #224	; 0xe0
 8006730:	009b      	lsls	r3, r3, #2
 8006732:	4413      	add	r3, r2
 8006734:	2200      	movs	r2, #0
 8006736:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	3301      	adds	r3, #1
 800673c:	60fb      	str	r3, [r7, #12]
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2b0f      	cmp	r3, #15
 8006742:	d9f2      	bls.n	800672a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006744:	2300      	movs	r3, #0
 8006746:	60fb      	str	r3, [r7, #12]
 8006748:	e009      	b.n	800675e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800674a:	687a      	ldr	r2, [r7, #4]
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	4413      	add	r3, r2
 8006750:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006754:	2200      	movs	r2, #0
 8006756:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	3301      	adds	r3, #1
 800675c:	60fb      	str	r3, [r7, #12]
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006764:	d3f1      	bcc.n	800674a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2200      	movs	r2, #0
 800676a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2200      	movs	r2, #0
 8006770:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2201      	movs	r2, #1
 8006776:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2200      	movs	r2, #0
 800677c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2201      	movs	r2, #1
 8006784:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2240      	movs	r2, #64	; 0x40
 800678a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2200      	movs	r2, #0
 8006790:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2200      	movs	r2, #0
 8006796:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2201      	movs	r2, #1
 800679e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2200      	movs	r2, #0
 80067a6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2200      	movs	r2, #0
 80067ae:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80067b2:	2300      	movs	r3, #0
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	3714      	adds	r7, #20
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr

080067c0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b085      	sub	sp, #20
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80067ca:	2300      	movs	r3, #0
 80067cc:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d016      	beq.n	8006802 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d10e      	bne.n	80067fc <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80067e4:	1c59      	adds	r1, r3, #1
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80067ec:	687a      	ldr	r2, [r7, #4]
 80067ee:	33de      	adds	r3, #222	; 0xde
 80067f0:	6839      	ldr	r1, [r7, #0]
 80067f2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80067f6:	2300      	movs	r3, #0
 80067f8:	73fb      	strb	r3, [r7, #15]
 80067fa:	e004      	b.n	8006806 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80067fc:	2302      	movs	r3, #2
 80067fe:	73fb      	strb	r3, [r7, #15]
 8006800:	e001      	b.n	8006806 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006802:	2302      	movs	r3, #2
 8006804:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006806:	7bfb      	ldrb	r3, [r7, #15]
}
 8006808:	4618      	mov	r0, r3
 800680a:	3714      	adds	r7, #20
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr

08006814 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006814:	b480      	push	{r7}
 8006816:	b085      	sub	sp, #20
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	460b      	mov	r3, r1
 800681e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006820:	2300      	movs	r3, #0
 8006822:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800682a:	78fa      	ldrb	r2, [r7, #3]
 800682c:	429a      	cmp	r2, r3
 800682e:	d204      	bcs.n	800683a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	78fa      	ldrb	r2, [r7, #3]
 8006834:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006838:	e001      	b.n	800683e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800683a:	2302      	movs	r3, #2
 800683c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800683e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006840:	4618      	mov	r0, r3
 8006842:	3714      	adds	r7, #20
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr

0800684c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800684c:	b480      	push	{r7}
 800684e:	b087      	sub	sp, #28
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	4608      	mov	r0, r1
 8006856:	4611      	mov	r1, r2
 8006858:	461a      	mov	r2, r3
 800685a:	4603      	mov	r3, r0
 800685c:	70fb      	strb	r3, [r7, #3]
 800685e:	460b      	mov	r3, r1
 8006860:	70bb      	strb	r3, [r7, #2]
 8006862:	4613      	mov	r3, r2
 8006864:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006866:	2300      	movs	r3, #0
 8006868:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800686a:	2300      	movs	r3, #0
 800686c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006874:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006876:	e025      	b.n	80068c4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006878:	7dfb      	ldrb	r3, [r7, #23]
 800687a:	221a      	movs	r2, #26
 800687c:	fb02 f303 	mul.w	r3, r2, r3
 8006880:	3308      	adds	r3, #8
 8006882:	68fa      	ldr	r2, [r7, #12]
 8006884:	4413      	add	r3, r2
 8006886:	3302      	adds	r3, #2
 8006888:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	795b      	ldrb	r3, [r3, #5]
 800688e:	78fa      	ldrb	r2, [r7, #3]
 8006890:	429a      	cmp	r2, r3
 8006892:	d002      	beq.n	800689a <USBH_FindInterface+0x4e>
 8006894:	78fb      	ldrb	r3, [r7, #3]
 8006896:	2bff      	cmp	r3, #255	; 0xff
 8006898:	d111      	bne.n	80068be <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800689e:	78ba      	ldrb	r2, [r7, #2]
 80068a0:	429a      	cmp	r2, r3
 80068a2:	d002      	beq.n	80068aa <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80068a4:	78bb      	ldrb	r3, [r7, #2]
 80068a6:	2bff      	cmp	r3, #255	; 0xff
 80068a8:	d109      	bne.n	80068be <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80068ae:	787a      	ldrb	r2, [r7, #1]
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d002      	beq.n	80068ba <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80068b4:	787b      	ldrb	r3, [r7, #1]
 80068b6:	2bff      	cmp	r3, #255	; 0xff
 80068b8:	d101      	bne.n	80068be <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80068ba:	7dfb      	ldrb	r3, [r7, #23]
 80068bc:	e006      	b.n	80068cc <USBH_FindInterface+0x80>
    }
    if_ix++;
 80068be:	7dfb      	ldrb	r3, [r7, #23]
 80068c0:	3301      	adds	r3, #1
 80068c2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80068c4:	7dfb      	ldrb	r3, [r7, #23]
 80068c6:	2b01      	cmp	r3, #1
 80068c8:	d9d6      	bls.n	8006878 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80068ca:	23ff      	movs	r3, #255	; 0xff
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	371c      	adds	r7, #28
 80068d0:	46bd      	mov	sp, r7
 80068d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d6:	4770      	bx	lr

080068d8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b082      	sub	sp, #8
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f001 fc81 	bl	80081e8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80068e6:	2101      	movs	r1, #1
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f001 fd9a 	bl	8008422 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80068ee:	2300      	movs	r3, #0
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	3708      	adds	r7, #8
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}

080068f8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b088      	sub	sp, #32
 80068fc:	af04      	add	r7, sp, #16
 80068fe:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006900:	2302      	movs	r3, #2
 8006902:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006904:	2300      	movs	r3, #0
 8006906:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800690e:	b2db      	uxtb	r3, r3
 8006910:	2b01      	cmp	r3, #1
 8006912:	d102      	bne.n	800691a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2203      	movs	r2, #3
 8006918:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	781b      	ldrb	r3, [r3, #0]
 800691e:	b2db      	uxtb	r3, r3
 8006920:	2b0b      	cmp	r3, #11
 8006922:	f200 81be 	bhi.w	8006ca2 <USBH_Process+0x3aa>
 8006926:	a201      	add	r2, pc, #4	; (adr r2, 800692c <USBH_Process+0x34>)
 8006928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800692c:	0800695d 	.word	0x0800695d
 8006930:	0800698f 	.word	0x0800698f
 8006934:	080069f7 	.word	0x080069f7
 8006938:	08006c3d 	.word	0x08006c3d
 800693c:	08006ca3 	.word	0x08006ca3
 8006940:	08006a9b 	.word	0x08006a9b
 8006944:	08006be3 	.word	0x08006be3
 8006948:	08006ad1 	.word	0x08006ad1
 800694c:	08006af1 	.word	0x08006af1
 8006950:	08006b11 	.word	0x08006b11
 8006954:	08006b55 	.word	0x08006b55
 8006958:	08006c25 	.word	0x08006c25
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006962:	b2db      	uxtb	r3, r3
 8006964:	2b00      	cmp	r3, #0
 8006966:	f000 819e 	beq.w	8006ca6 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2201      	movs	r2, #1
 800696e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006970:	20c8      	movs	r0, #200	; 0xc8
 8006972:	f001 fd9d 	bl	80084b0 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f001 fc93 	bl	80082a2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2200      	movs	r2, #0
 8006980:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2200      	movs	r2, #0
 8006988:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800698c:	e18b      	b.n	8006ca6 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006994:	2b01      	cmp	r3, #1
 8006996:	d107      	bne.n	80069a8 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2200      	movs	r2, #0
 800699c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2202      	movs	r2, #2
 80069a4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80069a6:	e18d      	b.n	8006cc4 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80069ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80069b2:	d914      	bls.n	80069de <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80069ba:	3301      	adds	r3, #1
 80069bc:	b2da      	uxtb	r2, r3
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80069ca:	2b03      	cmp	r3, #3
 80069cc:	d903      	bls.n	80069d6 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	220d      	movs	r2, #13
 80069d2:	701a      	strb	r2, [r3, #0]
      break;
 80069d4:	e176      	b.n	8006cc4 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2200      	movs	r2, #0
 80069da:	701a      	strb	r2, [r3, #0]
      break;
 80069dc:	e172      	b.n	8006cc4 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80069e4:	f103 020a 	add.w	r2, r3, #10
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80069ee:	200a      	movs	r0, #10
 80069f0:	f001 fd5e 	bl	80084b0 <USBH_Delay>
      break;
 80069f4:	e166      	b.n	8006cc4 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d005      	beq.n	8006a0c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006a06:	2104      	movs	r1, #4
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006a0c:	2064      	movs	r0, #100	; 0x64
 8006a0e:	f001 fd4f 	bl	80084b0 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f001 fc1e 	bl	8008254 <USBH_LL_GetSpeed>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2205      	movs	r2, #5
 8006a26:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006a28:	2100      	movs	r1, #0
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f001 fa29 	bl	8007e82 <USBH_AllocPipe>
 8006a30:	4603      	mov	r3, r0
 8006a32:	461a      	mov	r2, r3
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006a38:	2180      	movs	r1, #128	; 0x80
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f001 fa21 	bl	8007e82 <USBH_AllocPipe>
 8006a40:	4603      	mov	r3, r0
 8006a42:	461a      	mov	r2, r3
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	7919      	ldrb	r1, [r3, #4]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006a58:	687a      	ldr	r2, [r7, #4]
 8006a5a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006a5c:	b292      	uxth	r2, r2
 8006a5e:	9202      	str	r2, [sp, #8]
 8006a60:	2200      	movs	r2, #0
 8006a62:	9201      	str	r2, [sp, #4]
 8006a64:	9300      	str	r3, [sp, #0]
 8006a66:	4603      	mov	r3, r0
 8006a68:	2280      	movs	r2, #128	; 0x80
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f001 f9da 	bl	8007e24 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	7959      	ldrb	r1, [r3, #5]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006a80:	687a      	ldr	r2, [r7, #4]
 8006a82:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006a84:	b292      	uxth	r2, r2
 8006a86:	9202      	str	r2, [sp, #8]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	9201      	str	r2, [sp, #4]
 8006a8c:	9300      	str	r3, [sp, #0]
 8006a8e:	4603      	mov	r3, r0
 8006a90:	2200      	movs	r2, #0
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f001 f9c6 	bl	8007e24 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006a98:	e114      	b.n	8006cc4 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f000 f918 	bl	8006cd0 <USBH_HandleEnum>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006aa4:	7bbb      	ldrb	r3, [r7, #14]
 8006aa6:	b2db      	uxtb	r3, r3
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	f040 80fe 	bne.w	8006caa <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	d103      	bne.n	8006ac8 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2208      	movs	r2, #8
 8006ac4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006ac6:	e0f0      	b.n	8006caa <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2207      	movs	r2, #7
 8006acc:	701a      	strb	r2, [r3, #0]
      break;
 8006ace:	e0ec      	b.n	8006caa <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	f000 80e9 	beq.w	8006cae <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006ae2:	2101      	movs	r1, #1
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2208      	movs	r2, #8
 8006aec:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8006aee:	e0de      	b.n	8006cae <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	4619      	mov	r1, r3
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f000 fc2c 	bl	8007358 <USBH_SetCfg>
 8006b00:	4603      	mov	r3, r0
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	f040 80d5 	bne.w	8006cb2 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2209      	movs	r2, #9
 8006b0c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006b0e:	e0d0      	b.n	8006cb2 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8006b16:	f003 0320 	and.w	r3, r3, #32
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d016      	beq.n	8006b4c <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8006b1e:	2101      	movs	r1, #1
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f000 fc3c 	bl	800739e <USBH_SetFeature>
 8006b26:	4603      	mov	r3, r0
 8006b28:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006b2a:	7bbb      	ldrb	r3, [r7, #14]
 8006b2c:	b2db      	uxtb	r3, r3
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d103      	bne.n	8006b3a <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	220a      	movs	r2, #10
 8006b36:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006b38:	e0bd      	b.n	8006cb6 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8006b3a:	7bbb      	ldrb	r3, [r7, #14]
 8006b3c:	b2db      	uxtb	r3, r3
 8006b3e:	2b03      	cmp	r3, #3
 8006b40:	f040 80b9 	bne.w	8006cb6 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	220a      	movs	r2, #10
 8006b48:	701a      	strb	r2, [r3, #0]
      break;
 8006b4a:	e0b4      	b.n	8006cb6 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	220a      	movs	r2, #10
 8006b50:	701a      	strb	r2, [r3, #0]
      break;
 8006b52:	e0b0      	b.n	8006cb6 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	f000 80ad 	beq.w	8006cba <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2200      	movs	r2, #0
 8006b64:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006b68:	2300      	movs	r3, #0
 8006b6a:	73fb      	strb	r3, [r7, #15]
 8006b6c:	e016      	b.n	8006b9c <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006b6e:	7bfa      	ldrb	r2, [r7, #15]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	32de      	adds	r2, #222	; 0xde
 8006b74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b78:	791a      	ldrb	r2, [r3, #4]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006b80:	429a      	cmp	r2, r3
 8006b82:	d108      	bne.n	8006b96 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006b84:	7bfa      	ldrb	r2, [r7, #15]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	32de      	adds	r2, #222	; 0xde
 8006b8a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006b94:	e005      	b.n	8006ba2 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006b96:	7bfb      	ldrb	r3, [r7, #15]
 8006b98:	3301      	adds	r3, #1
 8006b9a:	73fb      	strb	r3, [r7, #15]
 8006b9c:	7bfb      	ldrb	r3, [r7, #15]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d0e5      	beq.n	8006b6e <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d016      	beq.n	8006bda <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	4798      	blx	r3
 8006bb8:	4603      	mov	r3, r0
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d109      	bne.n	8006bd2 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2206      	movs	r2, #6
 8006bc2:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006bca:	2103      	movs	r1, #3
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006bd0:	e073      	b.n	8006cba <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	220d      	movs	r2, #13
 8006bd6:	701a      	strb	r2, [r3, #0]
      break;
 8006bd8:	e06f      	b.n	8006cba <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	220d      	movs	r2, #13
 8006bde:	701a      	strb	r2, [r3, #0]
      break;
 8006be0:	e06b      	b.n	8006cba <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d017      	beq.n	8006c1c <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006bf2:	691b      	ldr	r3, [r3, #16]
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	4798      	blx	r3
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006bfc:	7bbb      	ldrb	r3, [r7, #14]
 8006bfe:	b2db      	uxtb	r3, r3
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d103      	bne.n	8006c0c <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	220b      	movs	r2, #11
 8006c08:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006c0a:	e058      	b.n	8006cbe <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8006c0c:	7bbb      	ldrb	r3, [r7, #14]
 8006c0e:	b2db      	uxtb	r3, r3
 8006c10:	2b02      	cmp	r3, #2
 8006c12:	d154      	bne.n	8006cbe <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	220d      	movs	r2, #13
 8006c18:	701a      	strb	r2, [r3, #0]
      break;
 8006c1a:	e050      	b.n	8006cbe <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	220d      	movs	r2, #13
 8006c20:	701a      	strb	r2, [r3, #0]
      break;
 8006c22:	e04c      	b.n	8006cbe <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d049      	beq.n	8006cc2 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c34:	695b      	ldr	r3, [r3, #20]
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	4798      	blx	r3
      }
      break;
 8006c3a:	e042      	b.n	8006cc2 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f7ff fd67 	bl	8006718 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d009      	beq.n	8006c68 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c5a:	68db      	ldr	r3, [r3, #12]
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2200      	movs	r2, #0
 8006c64:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d005      	beq.n	8006c7e <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006c78:	2105      	movs	r1, #5
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006c84:	b2db      	uxtb	r3, r3
 8006c86:	2b01      	cmp	r3, #1
 8006c88:	d107      	bne.n	8006c9a <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f7ff fe20 	bl	80068d8 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006c98:	e014      	b.n	8006cc4 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f001 faa4 	bl	80081e8 <USBH_LL_Start>
      break;
 8006ca0:	e010      	b.n	8006cc4 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8006ca2:	bf00      	nop
 8006ca4:	e00e      	b.n	8006cc4 <USBH_Process+0x3cc>
      break;
 8006ca6:	bf00      	nop
 8006ca8:	e00c      	b.n	8006cc4 <USBH_Process+0x3cc>
      break;
 8006caa:	bf00      	nop
 8006cac:	e00a      	b.n	8006cc4 <USBH_Process+0x3cc>
    break;
 8006cae:	bf00      	nop
 8006cb0:	e008      	b.n	8006cc4 <USBH_Process+0x3cc>
      break;
 8006cb2:	bf00      	nop
 8006cb4:	e006      	b.n	8006cc4 <USBH_Process+0x3cc>
      break;
 8006cb6:	bf00      	nop
 8006cb8:	e004      	b.n	8006cc4 <USBH_Process+0x3cc>
      break;
 8006cba:	bf00      	nop
 8006cbc:	e002      	b.n	8006cc4 <USBH_Process+0x3cc>
      break;
 8006cbe:	bf00      	nop
 8006cc0:	e000      	b.n	8006cc4 <USBH_Process+0x3cc>
      break;
 8006cc2:	bf00      	nop
  }
  return USBH_OK;
 8006cc4:	2300      	movs	r3, #0
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3710      	adds	r7, #16
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}
 8006cce:	bf00      	nop

08006cd0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b088      	sub	sp, #32
 8006cd4:	af04      	add	r7, sp, #16
 8006cd6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006cd8:	2301      	movs	r3, #1
 8006cda:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006cdc:	2301      	movs	r3, #1
 8006cde:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	785b      	ldrb	r3, [r3, #1]
 8006ce4:	2b07      	cmp	r3, #7
 8006ce6:	f200 81c1 	bhi.w	800706c <USBH_HandleEnum+0x39c>
 8006cea:	a201      	add	r2, pc, #4	; (adr r2, 8006cf0 <USBH_HandleEnum+0x20>)
 8006cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cf0:	08006d11 	.word	0x08006d11
 8006cf4:	08006dcf 	.word	0x08006dcf
 8006cf8:	08006e39 	.word	0x08006e39
 8006cfc:	08006ec7 	.word	0x08006ec7
 8006d00:	08006f31 	.word	0x08006f31
 8006d04:	08006fa1 	.word	0x08006fa1
 8006d08:	08006fe7 	.word	0x08006fe7
 8006d0c:	0800702d 	.word	0x0800702d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006d10:	2108      	movs	r1, #8
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f000 fa50 	bl	80071b8 <USBH_Get_DevDesc>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006d1c:	7bbb      	ldrb	r3, [r7, #14]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d130      	bne.n	8006d84 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2201      	movs	r2, #1
 8006d30:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	7919      	ldrb	r1, [r3, #4]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006d46:	b292      	uxth	r2, r2
 8006d48:	9202      	str	r2, [sp, #8]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	9201      	str	r2, [sp, #4]
 8006d4e:	9300      	str	r3, [sp, #0]
 8006d50:	4603      	mov	r3, r0
 8006d52:	2280      	movs	r2, #128	; 0x80
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f001 f865 	bl	8007e24 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	7959      	ldrb	r1, [r3, #5]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006d6a:	687a      	ldr	r2, [r7, #4]
 8006d6c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006d6e:	b292      	uxth	r2, r2
 8006d70:	9202      	str	r2, [sp, #8]
 8006d72:	2200      	movs	r2, #0
 8006d74:	9201      	str	r2, [sp, #4]
 8006d76:	9300      	str	r3, [sp, #0]
 8006d78:	4603      	mov	r3, r0
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f001 f851 	bl	8007e24 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006d82:	e175      	b.n	8007070 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006d84:	7bbb      	ldrb	r3, [r7, #14]
 8006d86:	2b03      	cmp	r3, #3
 8006d88:	f040 8172 	bne.w	8007070 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006d92:	3301      	adds	r3, #1
 8006d94:	b2da      	uxtb	r2, r3
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006da2:	2b03      	cmp	r3, #3
 8006da4:	d903      	bls.n	8006dae <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	220d      	movs	r2, #13
 8006daa:	701a      	strb	r2, [r3, #0]
      break;
 8006dac:	e160      	b.n	8007070 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	795b      	ldrb	r3, [r3, #5]
 8006db2:	4619      	mov	r1, r3
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f001 f885 	bl	8007ec4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	791b      	ldrb	r3, [r3, #4]
 8006dbe:	4619      	mov	r1, r3
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f001 f87f 	bl	8007ec4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	701a      	strb	r2, [r3, #0]
      break;
 8006dcc:	e150      	b.n	8007070 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8006dce:	2112      	movs	r1, #18
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f000 f9f1 	bl	80071b8 <USBH_Get_DevDesc>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006dda:	7bbb      	ldrb	r3, [r7, #14]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d103      	bne.n	8006de8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2202      	movs	r2, #2
 8006de4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006de6:	e145      	b.n	8007074 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006de8:	7bbb      	ldrb	r3, [r7, #14]
 8006dea:	2b03      	cmp	r3, #3
 8006dec:	f040 8142 	bne.w	8007074 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006df6:	3301      	adds	r3, #1
 8006df8:	b2da      	uxtb	r2, r3
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006e06:	2b03      	cmp	r3, #3
 8006e08:	d903      	bls.n	8006e12 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	220d      	movs	r2, #13
 8006e0e:	701a      	strb	r2, [r3, #0]
      break;
 8006e10:	e130      	b.n	8007074 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	795b      	ldrb	r3, [r3, #5]
 8006e16:	4619      	mov	r1, r3
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f001 f853 	bl	8007ec4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	791b      	ldrb	r3, [r3, #4]
 8006e22:	4619      	mov	r1, r3
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f001 f84d 	bl	8007ec4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2200      	movs	r2, #0
 8006e34:	701a      	strb	r2, [r3, #0]
      break;
 8006e36:	e11d      	b.n	8007074 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006e38:	2101      	movs	r1, #1
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f000 fa68 	bl	8007310 <USBH_SetAddress>
 8006e40:	4603      	mov	r3, r0
 8006e42:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006e44:	7bbb      	ldrb	r3, [r7, #14]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d132      	bne.n	8006eb0 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8006e4a:	2002      	movs	r0, #2
 8006e4c:	f001 fb30 	bl	80084b0 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2201      	movs	r2, #1
 8006e54:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2203      	movs	r2, #3
 8006e5c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	7919      	ldrb	r1, [r3, #4]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006e6e:	687a      	ldr	r2, [r7, #4]
 8006e70:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006e72:	b292      	uxth	r2, r2
 8006e74:	9202      	str	r2, [sp, #8]
 8006e76:	2200      	movs	r2, #0
 8006e78:	9201      	str	r2, [sp, #4]
 8006e7a:	9300      	str	r3, [sp, #0]
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	2280      	movs	r2, #128	; 0x80
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f000 ffcf 	bl	8007e24 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	7959      	ldrb	r1, [r3, #5]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006e96:	687a      	ldr	r2, [r7, #4]
 8006e98:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006e9a:	b292      	uxth	r2, r2
 8006e9c:	9202      	str	r2, [sp, #8]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	9201      	str	r2, [sp, #4]
 8006ea2:	9300      	str	r3, [sp, #0]
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f000 ffbb 	bl	8007e24 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006eae:	e0e3      	b.n	8007078 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006eb0:	7bbb      	ldrb	r3, [r7, #14]
 8006eb2:	2b03      	cmp	r3, #3
 8006eb4:	f040 80e0 	bne.w	8007078 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	220d      	movs	r2, #13
 8006ebc:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	705a      	strb	r2, [r3, #1]
      break;
 8006ec4:	e0d8      	b.n	8007078 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8006ec6:	2109      	movs	r1, #9
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f000 f99d 	bl	8007208 <USBH_Get_CfgDesc>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006ed2:	7bbb      	ldrb	r3, [r7, #14]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d103      	bne.n	8006ee0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2204      	movs	r2, #4
 8006edc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006ede:	e0cd      	b.n	800707c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006ee0:	7bbb      	ldrb	r3, [r7, #14]
 8006ee2:	2b03      	cmp	r3, #3
 8006ee4:	f040 80ca 	bne.w	800707c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006eee:	3301      	adds	r3, #1
 8006ef0:	b2da      	uxtb	r2, r3
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006efe:	2b03      	cmp	r3, #3
 8006f00:	d903      	bls.n	8006f0a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	220d      	movs	r2, #13
 8006f06:	701a      	strb	r2, [r3, #0]
      break;
 8006f08:	e0b8      	b.n	800707c <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	795b      	ldrb	r3, [r3, #5]
 8006f0e:	4619      	mov	r1, r3
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f000 ffd7 	bl	8007ec4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	791b      	ldrb	r3, [r3, #4]
 8006f1a:	4619      	mov	r1, r3
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f000 ffd1 	bl	8007ec4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2200      	movs	r2, #0
 8006f26:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	701a      	strb	r2, [r3, #0]
      break;
 8006f2e:	e0a5      	b.n	800707c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8006f36:	4619      	mov	r1, r3
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f000 f965 	bl	8007208 <USBH_Get_CfgDesc>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006f42:	7bbb      	ldrb	r3, [r7, #14]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d103      	bne.n	8006f50 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2205      	movs	r2, #5
 8006f4c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006f4e:	e097      	b.n	8007080 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006f50:	7bbb      	ldrb	r3, [r7, #14]
 8006f52:	2b03      	cmp	r3, #3
 8006f54:	f040 8094 	bne.w	8007080 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006f5e:	3301      	adds	r3, #1
 8006f60:	b2da      	uxtb	r2, r3
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006f6e:	2b03      	cmp	r3, #3
 8006f70:	d903      	bls.n	8006f7a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	220d      	movs	r2, #13
 8006f76:	701a      	strb	r2, [r3, #0]
      break;
 8006f78:	e082      	b.n	8007080 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	795b      	ldrb	r3, [r3, #5]
 8006f7e:	4619      	mov	r1, r3
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f000 ff9f 	bl	8007ec4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	791b      	ldrb	r3, [r3, #4]
 8006f8a:	4619      	mov	r1, r3
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f000 ff99 	bl	8007ec4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2200      	movs	r2, #0
 8006f96:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	701a      	strb	r2, [r3, #0]
      break;
 8006f9e:	e06f      	b.n	8007080 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d019      	beq.n	8006fde <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006fb6:	23ff      	movs	r3, #255	; 0xff
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f000 f949 	bl	8007250 <USBH_Get_StringDesc>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006fc2:	7bbb      	ldrb	r3, [r7, #14]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d103      	bne.n	8006fd0 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2206      	movs	r2, #6
 8006fcc:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006fce:	e059      	b.n	8007084 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006fd0:	7bbb      	ldrb	r3, [r7, #14]
 8006fd2:	2b03      	cmp	r3, #3
 8006fd4:	d156      	bne.n	8007084 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2206      	movs	r2, #6
 8006fda:	705a      	strb	r2, [r3, #1]
      break;
 8006fdc:	e052      	b.n	8007084 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2206      	movs	r2, #6
 8006fe2:	705a      	strb	r2, [r3, #1]
      break;
 8006fe4:	e04e      	b.n	8007084 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d019      	beq.n	8007024 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006ffc:	23ff      	movs	r3, #255	; 0xff
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f000 f926 	bl	8007250 <USBH_Get_StringDesc>
 8007004:	4603      	mov	r3, r0
 8007006:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007008:	7bbb      	ldrb	r3, [r7, #14]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d103      	bne.n	8007016 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2207      	movs	r2, #7
 8007012:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007014:	e038      	b.n	8007088 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007016:	7bbb      	ldrb	r3, [r7, #14]
 8007018:	2b03      	cmp	r3, #3
 800701a:	d135      	bne.n	8007088 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2207      	movs	r2, #7
 8007020:	705a      	strb	r2, [r3, #1]
      break;
 8007022:	e031      	b.n	8007088 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2207      	movs	r2, #7
 8007028:	705a      	strb	r2, [r3, #1]
      break;
 800702a:	e02d      	b.n	8007088 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007032:	2b00      	cmp	r3, #0
 8007034:	d017      	beq.n	8007066 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007042:	23ff      	movs	r3, #255	; 0xff
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f000 f903 	bl	8007250 <USBH_Get_StringDesc>
 800704a:	4603      	mov	r3, r0
 800704c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800704e:	7bbb      	ldrb	r3, [r7, #14]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d102      	bne.n	800705a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007054:	2300      	movs	r3, #0
 8007056:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007058:	e018      	b.n	800708c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800705a:	7bbb      	ldrb	r3, [r7, #14]
 800705c:	2b03      	cmp	r3, #3
 800705e:	d115      	bne.n	800708c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007060:	2300      	movs	r3, #0
 8007062:	73fb      	strb	r3, [r7, #15]
      break;
 8007064:	e012      	b.n	800708c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007066:	2300      	movs	r3, #0
 8007068:	73fb      	strb	r3, [r7, #15]
      break;
 800706a:	e00f      	b.n	800708c <USBH_HandleEnum+0x3bc>

    default:
      break;
 800706c:	bf00      	nop
 800706e:	e00e      	b.n	800708e <USBH_HandleEnum+0x3be>
      break;
 8007070:	bf00      	nop
 8007072:	e00c      	b.n	800708e <USBH_HandleEnum+0x3be>
      break;
 8007074:	bf00      	nop
 8007076:	e00a      	b.n	800708e <USBH_HandleEnum+0x3be>
      break;
 8007078:	bf00      	nop
 800707a:	e008      	b.n	800708e <USBH_HandleEnum+0x3be>
      break;
 800707c:	bf00      	nop
 800707e:	e006      	b.n	800708e <USBH_HandleEnum+0x3be>
      break;
 8007080:	bf00      	nop
 8007082:	e004      	b.n	800708e <USBH_HandleEnum+0x3be>
      break;
 8007084:	bf00      	nop
 8007086:	e002      	b.n	800708e <USBH_HandleEnum+0x3be>
      break;
 8007088:	bf00      	nop
 800708a:	e000      	b.n	800708e <USBH_HandleEnum+0x3be>
      break;
 800708c:	bf00      	nop
  }
  return Status;
 800708e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007090:	4618      	mov	r0, r3
 8007092:	3710      	adds	r7, #16
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}

08007098 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007098:	b480      	push	{r7}
 800709a:	b083      	sub	sp, #12
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
 80070a0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	683a      	ldr	r2, [r7, #0]
 80070a6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80070aa:	bf00      	nop
 80070ac:	370c      	adds	r7, #12
 80070ae:	46bd      	mov	sp, r7
 80070b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b4:	4770      	bx	lr

080070b6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80070b6:	b580      	push	{r7, lr}
 80070b8:	b082      	sub	sp, #8
 80070ba:	af00      	add	r7, sp, #0
 80070bc:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80070c4:	1c5a      	adds	r2, r3, #1
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f000 f804 	bl	80070da <USBH_HandleSof>
}
 80070d2:	bf00      	nop
 80070d4:	3708      	adds	r7, #8
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}

080070da <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80070da:	b580      	push	{r7, lr}
 80070dc:	b082      	sub	sp, #8
 80070de:	af00      	add	r7, sp, #0
 80070e0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	781b      	ldrb	r3, [r3, #0]
 80070e6:	b2db      	uxtb	r3, r3
 80070e8:	2b0b      	cmp	r3, #11
 80070ea:	d10a      	bne.n	8007102 <USBH_HandleSof+0x28>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d005      	beq.n	8007102 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80070fc:	699b      	ldr	r3, [r3, #24]
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	4798      	blx	r3
  }
}
 8007102:	bf00      	nop
 8007104:	3708      	adds	r7, #8
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}

0800710a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800710a:	b480      	push	{r7}
 800710c:	b083      	sub	sp, #12
 800710e:	af00      	add	r7, sp, #0
 8007110:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2201      	movs	r2, #1
 8007116:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800711a:	bf00      	nop
}
 800711c:	370c      	adds	r7, #12
 800711e:	46bd      	mov	sp, r7
 8007120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007124:	4770      	bx	lr

08007126 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007126:	b480      	push	{r7}
 8007128:	b083      	sub	sp, #12
 800712a:	af00      	add	r7, sp, #0
 800712c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2200      	movs	r2, #0
 8007132:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007136:	bf00      	nop
}
 8007138:	370c      	adds	r7, #12
 800713a:	46bd      	mov	sp, r7
 800713c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007140:	4770      	bx	lr

08007142 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007142:	b480      	push	{r7}
 8007144:	b083      	sub	sp, #12
 8007146:	af00      	add	r7, sp, #0
 8007148:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2201      	movs	r2, #1
 800714e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2200      	movs	r2, #0
 8007156:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2200      	movs	r2, #0
 800715e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007162:	2300      	movs	r3, #0
}
 8007164:	4618      	mov	r0, r3
 8007166:	370c      	adds	r7, #12
 8007168:	46bd      	mov	sp, r7
 800716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716e:	4770      	bx	lr

08007170 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b082      	sub	sp, #8
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2201      	movs	r2, #1
 800717c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2200      	movs	r2, #0
 8007184:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2200      	movs	r2, #0
 800718c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f001 f844 	bl	800821e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	791b      	ldrb	r3, [r3, #4]
 800719a:	4619      	mov	r1, r3
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f000 fe91 	bl	8007ec4 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	795b      	ldrb	r3, [r3, #5]
 80071a6:	4619      	mov	r1, r3
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f000 fe8b 	bl	8007ec4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80071ae:	2300      	movs	r3, #0
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	3708      	adds	r7, #8
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}

080071b8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b086      	sub	sp, #24
 80071bc:	af02      	add	r7, sp, #8
 80071be:	6078      	str	r0, [r7, #4]
 80071c0:	460b      	mov	r3, r1
 80071c2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80071ca:	78fb      	ldrb	r3, [r7, #3]
 80071cc:	b29b      	uxth	r3, r3
 80071ce:	9300      	str	r3, [sp, #0]
 80071d0:	4613      	mov	r3, r2
 80071d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80071d6:	2100      	movs	r1, #0
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f000 f864 	bl	80072a6 <USBH_GetDescriptor>
 80071de:	4603      	mov	r3, r0
 80071e0:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 80071e2:	7bfb      	ldrb	r3, [r7, #15]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d10a      	bne.n	80071fe <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f203 3026 	addw	r0, r3, #806	; 0x326
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80071f4:	78fa      	ldrb	r2, [r7, #3]
 80071f6:	b292      	uxth	r2, r2
 80071f8:	4619      	mov	r1, r3
 80071fa:	f000 f918 	bl	800742e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80071fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007200:	4618      	mov	r0, r3
 8007202:	3710      	adds	r7, #16
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}

08007208 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007208:	b580      	push	{r7, lr}
 800720a:	b086      	sub	sp, #24
 800720c:	af02      	add	r7, sp, #8
 800720e:	6078      	str	r0, [r7, #4]
 8007210:	460b      	mov	r3, r1
 8007212:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	331c      	adds	r3, #28
 8007218:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800721a:	887b      	ldrh	r3, [r7, #2]
 800721c:	9300      	str	r3, [sp, #0]
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007224:	2100      	movs	r1, #0
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f000 f83d 	bl	80072a6 <USBH_GetDescriptor>
 800722c:	4603      	mov	r3, r0
 800722e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007230:	7bfb      	ldrb	r3, [r7, #15]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d107      	bne.n	8007246 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007236:	887b      	ldrh	r3, [r7, #2]
 8007238:	461a      	mov	r2, r3
 800723a:	68b9      	ldr	r1, [r7, #8]
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f000 f987 	bl	8007550 <USBH_ParseCfgDesc>
 8007242:	4603      	mov	r3, r0
 8007244:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007246:	7bfb      	ldrb	r3, [r7, #15]
}
 8007248:	4618      	mov	r0, r3
 800724a:	3710      	adds	r7, #16
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}

08007250 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b088      	sub	sp, #32
 8007254:	af02      	add	r7, sp, #8
 8007256:	60f8      	str	r0, [r7, #12]
 8007258:	607a      	str	r2, [r7, #4]
 800725a:	461a      	mov	r2, r3
 800725c:	460b      	mov	r3, r1
 800725e:	72fb      	strb	r3, [r7, #11]
 8007260:	4613      	mov	r3, r2
 8007262:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8007264:	7afb      	ldrb	r3, [r7, #11]
 8007266:	b29b      	uxth	r3, r3
 8007268:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800726c:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007274:	893b      	ldrh	r3, [r7, #8]
 8007276:	9300      	str	r3, [sp, #0]
 8007278:	460b      	mov	r3, r1
 800727a:	2100      	movs	r1, #0
 800727c:	68f8      	ldr	r0, [r7, #12]
 800727e:	f000 f812 	bl	80072a6 <USBH_GetDescriptor>
 8007282:	4603      	mov	r3, r0
 8007284:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007286:	7dfb      	ldrb	r3, [r7, #23]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d107      	bne.n	800729c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007292:	893a      	ldrh	r2, [r7, #8]
 8007294:	6879      	ldr	r1, [r7, #4]
 8007296:	4618      	mov	r0, r3
 8007298:	f000 fb24 	bl	80078e4 <USBH_ParseStringDesc>
  }

  return status;
 800729c:	7dfb      	ldrb	r3, [r7, #23]
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3718      	adds	r7, #24
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}

080072a6 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80072a6:	b580      	push	{r7, lr}
 80072a8:	b084      	sub	sp, #16
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	60f8      	str	r0, [r7, #12]
 80072ae:	607b      	str	r3, [r7, #4]
 80072b0:	460b      	mov	r3, r1
 80072b2:	72fb      	strb	r3, [r7, #11]
 80072b4:	4613      	mov	r3, r2
 80072b6:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	789b      	ldrb	r3, [r3, #2]
 80072bc:	2b01      	cmp	r3, #1
 80072be:	d11c      	bne.n	80072fa <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80072c0:	7afb      	ldrb	r3, [r7, #11]
 80072c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80072c6:	b2da      	uxtb	r2, r3
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	2206      	movs	r2, #6
 80072d0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	893a      	ldrh	r2, [r7, #8]
 80072d6:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80072d8:	893b      	ldrh	r3, [r7, #8]
 80072da:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80072de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072e2:	d104      	bne.n	80072ee <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f240 4209 	movw	r2, #1033	; 0x409
 80072ea:	829a      	strh	r2, [r3, #20]
 80072ec:	e002      	b.n	80072f4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	2200      	movs	r2, #0
 80072f2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	8b3a      	ldrh	r2, [r7, #24]
 80072f8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80072fa:	8b3b      	ldrh	r3, [r7, #24]
 80072fc:	461a      	mov	r2, r3
 80072fe:	6879      	ldr	r1, [r7, #4]
 8007300:	68f8      	ldr	r0, [r7, #12]
 8007302:	f000 fb3d 	bl	8007980 <USBH_CtlReq>
 8007306:	4603      	mov	r3, r0
}
 8007308:	4618      	mov	r0, r3
 800730a:	3710      	adds	r7, #16
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b082      	sub	sp, #8
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	460b      	mov	r3, r1
 800731a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	789b      	ldrb	r3, [r3, #2]
 8007320:	2b01      	cmp	r3, #1
 8007322:	d10f      	bne.n	8007344 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2200      	movs	r2, #0
 8007328:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2205      	movs	r2, #5
 800732e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007330:	78fb      	ldrb	r3, [r7, #3]
 8007332:	b29a      	uxth	r2, r3
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2200      	movs	r2, #0
 800733c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2200      	movs	r2, #0
 8007342:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007344:	2200      	movs	r2, #0
 8007346:	2100      	movs	r1, #0
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f000 fb19 	bl	8007980 <USBH_CtlReq>
 800734e:	4603      	mov	r3, r0
}
 8007350:	4618      	mov	r0, r3
 8007352:	3708      	adds	r7, #8
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}

08007358 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b082      	sub	sp, #8
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	460b      	mov	r3, r1
 8007362:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	789b      	ldrb	r3, [r3, #2]
 8007368:	2b01      	cmp	r3, #1
 800736a:	d10e      	bne.n	800738a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2200      	movs	r2, #0
 8007370:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2209      	movs	r2, #9
 8007376:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	887a      	ldrh	r2, [r7, #2]
 800737c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2200      	movs	r2, #0
 8007382:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2200      	movs	r2, #0
 8007388:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800738a:	2200      	movs	r2, #0
 800738c:	2100      	movs	r1, #0
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f000 faf6 	bl	8007980 <USBH_CtlReq>
 8007394:	4603      	mov	r3, r0
}
 8007396:	4618      	mov	r0, r3
 8007398:	3708      	adds	r7, #8
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}

0800739e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800739e:	b580      	push	{r7, lr}
 80073a0:	b082      	sub	sp, #8
 80073a2:	af00      	add	r7, sp, #0
 80073a4:	6078      	str	r0, [r7, #4]
 80073a6:	460b      	mov	r3, r1
 80073a8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	789b      	ldrb	r3, [r3, #2]
 80073ae:	2b01      	cmp	r3, #1
 80073b0:	d10f      	bne.n	80073d2 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2200      	movs	r2, #0
 80073b6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2203      	movs	r2, #3
 80073bc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80073be:	78fb      	ldrb	r3, [r7, #3]
 80073c0:	b29a      	uxth	r2, r3
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2200      	movs	r2, #0
 80073ca:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2200      	movs	r2, #0
 80073d0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80073d2:	2200      	movs	r2, #0
 80073d4:	2100      	movs	r1, #0
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f000 fad2 	bl	8007980 <USBH_CtlReq>
 80073dc:	4603      	mov	r3, r0
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3708      	adds	r7, #8
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}

080073e6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80073e6:	b580      	push	{r7, lr}
 80073e8:	b082      	sub	sp, #8
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	6078      	str	r0, [r7, #4]
 80073ee:	460b      	mov	r3, r1
 80073f0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	789b      	ldrb	r3, [r3, #2]
 80073f6:	2b01      	cmp	r3, #1
 80073f8:	d10f      	bne.n	800741a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2202      	movs	r2, #2
 80073fe:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2201      	movs	r2, #1
 8007404:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2200      	movs	r2, #0
 800740a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800740c:	78fb      	ldrb	r3, [r7, #3]
 800740e:	b29a      	uxth	r2, r3
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2200      	movs	r2, #0
 8007418:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800741a:	2200      	movs	r2, #0
 800741c:	2100      	movs	r1, #0
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f000 faae 	bl	8007980 <USBH_CtlReq>
 8007424:	4603      	mov	r3, r0
}
 8007426:	4618      	mov	r0, r3
 8007428:	3708      	adds	r7, #8
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}

0800742e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800742e:	b480      	push	{r7}
 8007430:	b085      	sub	sp, #20
 8007432:	af00      	add	r7, sp, #0
 8007434:	60f8      	str	r0, [r7, #12]
 8007436:	60b9      	str	r1, [r7, #8]
 8007438:	4613      	mov	r3, r2
 800743a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	781a      	ldrb	r2, [r3, #0]
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	785a      	ldrb	r2, [r3, #1]
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	3302      	adds	r3, #2
 8007450:	781b      	ldrb	r3, [r3, #0]
 8007452:	b29a      	uxth	r2, r3
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	3303      	adds	r3, #3
 8007458:	781b      	ldrb	r3, [r3, #0]
 800745a:	b29b      	uxth	r3, r3
 800745c:	021b      	lsls	r3, r3, #8
 800745e:	b29b      	uxth	r3, r3
 8007460:	4313      	orrs	r3, r2
 8007462:	b29a      	uxth	r2, r3
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	791a      	ldrb	r2, [r3, #4]
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	795a      	ldrb	r2, [r3, #5]
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	799a      	ldrb	r2, [r3, #6]
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	79da      	ldrb	r2, [r3, #7]
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	79db      	ldrb	r3, [r3, #7]
 800748c:	2b20      	cmp	r3, #32
 800748e:	dc11      	bgt.n	80074b4 <USBH_ParseDevDesc+0x86>
 8007490:	2b08      	cmp	r3, #8
 8007492:	db16      	blt.n	80074c2 <USBH_ParseDevDesc+0x94>
 8007494:	3b08      	subs	r3, #8
 8007496:	2201      	movs	r2, #1
 8007498:	fa02 f303 	lsl.w	r3, r2, r3
 800749c:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 80074a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	bf14      	ite	ne
 80074a8:	2301      	movne	r3, #1
 80074aa:	2300      	moveq	r3, #0
 80074ac:	b2db      	uxtb	r3, r3
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d102      	bne.n	80074b8 <USBH_ParseDevDesc+0x8a>
 80074b2:	e006      	b.n	80074c2 <USBH_ParseDevDesc+0x94>
 80074b4:	2b40      	cmp	r3, #64	; 0x40
 80074b6:	d104      	bne.n	80074c2 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	79da      	ldrb	r2, [r3, #7]
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	71da      	strb	r2, [r3, #7]
      break;
 80074c0:	e003      	b.n	80074ca <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2240      	movs	r2, #64	; 0x40
 80074c6:	71da      	strb	r2, [r3, #7]
      break;
 80074c8:	bf00      	nop
  }

  if (length > 8U)
 80074ca:	88fb      	ldrh	r3, [r7, #6]
 80074cc:	2b08      	cmp	r3, #8
 80074ce:	d939      	bls.n	8007544 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	3308      	adds	r3, #8
 80074d4:	781b      	ldrb	r3, [r3, #0]
 80074d6:	b29a      	uxth	r2, r3
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	3309      	adds	r3, #9
 80074dc:	781b      	ldrb	r3, [r3, #0]
 80074de:	b29b      	uxth	r3, r3
 80074e0:	021b      	lsls	r3, r3, #8
 80074e2:	b29b      	uxth	r3, r3
 80074e4:	4313      	orrs	r3, r2
 80074e6:	b29a      	uxth	r2, r3
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	330a      	adds	r3, #10
 80074f0:	781b      	ldrb	r3, [r3, #0]
 80074f2:	b29a      	uxth	r2, r3
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	330b      	adds	r3, #11
 80074f8:	781b      	ldrb	r3, [r3, #0]
 80074fa:	b29b      	uxth	r3, r3
 80074fc:	021b      	lsls	r3, r3, #8
 80074fe:	b29b      	uxth	r3, r3
 8007500:	4313      	orrs	r3, r2
 8007502:	b29a      	uxth	r2, r3
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	330c      	adds	r3, #12
 800750c:	781b      	ldrb	r3, [r3, #0]
 800750e:	b29a      	uxth	r2, r3
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	330d      	adds	r3, #13
 8007514:	781b      	ldrb	r3, [r3, #0]
 8007516:	b29b      	uxth	r3, r3
 8007518:	021b      	lsls	r3, r3, #8
 800751a:	b29b      	uxth	r3, r3
 800751c:	4313      	orrs	r3, r2
 800751e:	b29a      	uxth	r2, r3
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	7b9a      	ldrb	r2, [r3, #14]
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	7bda      	ldrb	r2, [r3, #15]
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	7c1a      	ldrb	r2, [r3, #16]
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	7c5a      	ldrb	r2, [r3, #17]
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	745a      	strb	r2, [r3, #17]
  }
}
 8007544:	bf00      	nop
 8007546:	3714      	adds	r7, #20
 8007548:	46bd      	mov	sp, r7
 800754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754e:	4770      	bx	lr

08007550 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b08c      	sub	sp, #48	; 0x30
 8007554:	af00      	add	r7, sp, #0
 8007556:	60f8      	str	r0, [r7, #12]
 8007558:	60b9      	str	r1, [r7, #8]
 800755a:	4613      	mov	r3, r2
 800755c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007564:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8007566:	2300      	movs	r3, #0
 8007568:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007570:	2300      	movs	r3, #0
 8007572:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8007576:	2300      	movs	r3, #0
 8007578:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	781a      	ldrb	r2, [r3, #0]
 8007584:	6a3b      	ldr	r3, [r7, #32]
 8007586:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	785a      	ldrb	r2, [r3, #1]
 800758c:	6a3b      	ldr	r3, [r7, #32]
 800758e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	3302      	adds	r3, #2
 8007594:	781b      	ldrb	r3, [r3, #0]
 8007596:	b29a      	uxth	r2, r3
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	3303      	adds	r3, #3
 800759c:	781b      	ldrb	r3, [r3, #0]
 800759e:	b29b      	uxth	r3, r3
 80075a0:	021b      	lsls	r3, r3, #8
 80075a2:	b29b      	uxth	r3, r3
 80075a4:	4313      	orrs	r3, r2
 80075a6:	b29b      	uxth	r3, r3
 80075a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075ac:	bf28      	it	cs
 80075ae:	f44f 7380 	movcs.w	r3, #256	; 0x100
 80075b2:	b29a      	uxth	r2, r3
 80075b4:	6a3b      	ldr	r3, [r7, #32]
 80075b6:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	791a      	ldrb	r2, [r3, #4]
 80075bc:	6a3b      	ldr	r3, [r7, #32]
 80075be:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	795a      	ldrb	r2, [r3, #5]
 80075c4:	6a3b      	ldr	r3, [r7, #32]
 80075c6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	799a      	ldrb	r2, [r3, #6]
 80075cc:	6a3b      	ldr	r3, [r7, #32]
 80075ce:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	79da      	ldrb	r2, [r3, #7]
 80075d4:	6a3b      	ldr	r3, [r7, #32]
 80075d6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	7a1a      	ldrb	r2, [r3, #8]
 80075dc:	6a3b      	ldr	r3, [r7, #32]
 80075de:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 80075e0:	6a3b      	ldr	r3, [r7, #32]
 80075e2:	781b      	ldrb	r3, [r3, #0]
 80075e4:	2b09      	cmp	r3, #9
 80075e6:	d002      	beq.n	80075ee <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80075e8:	6a3b      	ldr	r3, [r7, #32]
 80075ea:	2209      	movs	r2, #9
 80075ec:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80075ee:	88fb      	ldrh	r3, [r7, #6]
 80075f0:	2b09      	cmp	r3, #9
 80075f2:	f240 809d 	bls.w	8007730 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 80075f6:	2309      	movs	r3, #9
 80075f8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80075fa:	2300      	movs	r3, #0
 80075fc:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80075fe:	e081      	b.n	8007704 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007600:	f107 0316 	add.w	r3, r7, #22
 8007604:	4619      	mov	r1, r3
 8007606:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007608:	f000 f99f 	bl	800794a <USBH_GetNextDesc>
 800760c:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800760e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007610:	785b      	ldrb	r3, [r3, #1]
 8007612:	2b04      	cmp	r3, #4
 8007614:	d176      	bne.n	8007704 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007618:	781b      	ldrb	r3, [r3, #0]
 800761a:	2b09      	cmp	r3, #9
 800761c:	d002      	beq.n	8007624 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800761e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007620:	2209      	movs	r2, #9
 8007622:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007624:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007628:	221a      	movs	r2, #26
 800762a:	fb02 f303 	mul.w	r3, r2, r3
 800762e:	3308      	adds	r3, #8
 8007630:	6a3a      	ldr	r2, [r7, #32]
 8007632:	4413      	add	r3, r2
 8007634:	3302      	adds	r3, #2
 8007636:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007638:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800763a:	69f8      	ldr	r0, [r7, #28]
 800763c:	f000 f87e 	bl	800773c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007640:	2300      	movs	r3, #0
 8007642:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8007646:	2300      	movs	r3, #0
 8007648:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800764a:	e043      	b.n	80076d4 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800764c:	f107 0316 	add.w	r3, r7, #22
 8007650:	4619      	mov	r1, r3
 8007652:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007654:	f000 f979 	bl	800794a <USBH_GetNextDesc>
 8007658:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800765a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800765c:	785b      	ldrb	r3, [r3, #1]
 800765e:	2b05      	cmp	r3, #5
 8007660:	d138      	bne.n	80076d4 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8007662:	69fb      	ldr	r3, [r7, #28]
 8007664:	795b      	ldrb	r3, [r3, #5]
 8007666:	2b01      	cmp	r3, #1
 8007668:	d10f      	bne.n	800768a <USBH_ParseCfgDesc+0x13a>
 800766a:	69fb      	ldr	r3, [r7, #28]
 800766c:	799b      	ldrb	r3, [r3, #6]
 800766e:	2b02      	cmp	r3, #2
 8007670:	d10b      	bne.n	800768a <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007672:	69fb      	ldr	r3, [r7, #28]
 8007674:	79db      	ldrb	r3, [r3, #7]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d10f      	bne.n	800769a <USBH_ParseCfgDesc+0x14a>
 800767a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800767c:	781b      	ldrb	r3, [r3, #0]
 800767e:	2b09      	cmp	r3, #9
 8007680:	d00b      	beq.n	800769a <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8007682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007684:	2209      	movs	r2, #9
 8007686:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007688:	e007      	b.n	800769a <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800768a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800768c:	781b      	ldrb	r3, [r3, #0]
 800768e:	2b07      	cmp	r3, #7
 8007690:	d004      	beq.n	800769c <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007694:	2207      	movs	r2, #7
 8007696:	701a      	strb	r2, [r3, #0]
 8007698:	e000      	b.n	800769c <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800769a:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800769c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80076a0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80076a4:	3201      	adds	r2, #1
 80076a6:	00d2      	lsls	r2, r2, #3
 80076a8:	211a      	movs	r1, #26
 80076aa:	fb01 f303 	mul.w	r3, r1, r3
 80076ae:	4413      	add	r3, r2
 80076b0:	3308      	adds	r3, #8
 80076b2:	6a3a      	ldr	r2, [r7, #32]
 80076b4:	4413      	add	r3, r2
 80076b6:	3304      	adds	r3, #4
 80076b8:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80076ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80076bc:	69b9      	ldr	r1, [r7, #24]
 80076be:	68f8      	ldr	r0, [r7, #12]
 80076c0:	f000 f86b 	bl	800779a <USBH_ParseEPDesc>
 80076c4:	4603      	mov	r3, r0
 80076c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 80076ca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80076ce:	3301      	adds	r3, #1
 80076d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80076d4:	69fb      	ldr	r3, [r7, #28]
 80076d6:	791b      	ldrb	r3, [r3, #4]
 80076d8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80076dc:	429a      	cmp	r2, r3
 80076de:	d204      	bcs.n	80076ea <USBH_ParseCfgDesc+0x19a>
 80076e0:	6a3b      	ldr	r3, [r7, #32]
 80076e2:	885a      	ldrh	r2, [r3, #2]
 80076e4:	8afb      	ldrh	r3, [r7, #22]
 80076e6:	429a      	cmp	r2, r3
 80076e8:	d8b0      	bhi.n	800764c <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80076ea:	69fb      	ldr	r3, [r7, #28]
 80076ec:	791b      	ldrb	r3, [r3, #4]
 80076ee:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80076f2:	429a      	cmp	r2, r3
 80076f4:	d201      	bcs.n	80076fa <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 80076f6:	2303      	movs	r3, #3
 80076f8:	e01c      	b.n	8007734 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 80076fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80076fe:	3301      	adds	r3, #1
 8007700:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007704:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007708:	2b01      	cmp	r3, #1
 800770a:	d805      	bhi.n	8007718 <USBH_ParseCfgDesc+0x1c8>
 800770c:	6a3b      	ldr	r3, [r7, #32]
 800770e:	885a      	ldrh	r2, [r3, #2]
 8007710:	8afb      	ldrh	r3, [r7, #22]
 8007712:	429a      	cmp	r2, r3
 8007714:	f63f af74 	bhi.w	8007600 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007718:	6a3b      	ldr	r3, [r7, #32]
 800771a:	791b      	ldrb	r3, [r3, #4]
 800771c:	2b02      	cmp	r3, #2
 800771e:	bf28      	it	cs
 8007720:	2302      	movcs	r3, #2
 8007722:	b2db      	uxtb	r3, r3
 8007724:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007728:	429a      	cmp	r2, r3
 800772a:	d201      	bcs.n	8007730 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800772c:	2303      	movs	r3, #3
 800772e:	e001      	b.n	8007734 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8007730:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007734:	4618      	mov	r0, r3
 8007736:	3730      	adds	r7, #48	; 0x30
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}

0800773c <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800773c:	b480      	push	{r7}
 800773e:	b083      	sub	sp, #12
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
 8007744:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	781a      	ldrb	r2, [r3, #0]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	785a      	ldrb	r2, [r3, #1]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	789a      	ldrb	r2, [r3, #2]
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	78da      	ldrb	r2, [r3, #3]
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	791a      	ldrb	r2, [r3, #4]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	795a      	ldrb	r2, [r3, #5]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	799a      	ldrb	r2, [r3, #6]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	79da      	ldrb	r2, [r3, #7]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	7a1a      	ldrb	r2, [r3, #8]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	721a      	strb	r2, [r3, #8]
}
 800778e:	bf00      	nop
 8007790:	370c      	adds	r7, #12
 8007792:	46bd      	mov	sp, r7
 8007794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007798:	4770      	bx	lr

0800779a <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800779a:	b480      	push	{r7}
 800779c:	b087      	sub	sp, #28
 800779e:	af00      	add	r7, sp, #0
 80077a0:	60f8      	str	r0, [r7, #12]
 80077a2:	60b9      	str	r1, [r7, #8]
 80077a4:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80077a6:	2300      	movs	r3, #0
 80077a8:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	781a      	ldrb	r2, [r3, #0]
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	785a      	ldrb	r2, [r3, #1]
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	789a      	ldrb	r2, [r3, #2]
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	78da      	ldrb	r2, [r3, #3]
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	3304      	adds	r3, #4
 80077ce:	781b      	ldrb	r3, [r3, #0]
 80077d0:	b29a      	uxth	r2, r3
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	3305      	adds	r3, #5
 80077d6:	781b      	ldrb	r3, [r3, #0]
 80077d8:	b29b      	uxth	r3, r3
 80077da:	021b      	lsls	r3, r3, #8
 80077dc:	b29b      	uxth	r3, r3
 80077de:	4313      	orrs	r3, r2
 80077e0:	b29a      	uxth	r2, r3
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	799a      	ldrb	r2, [r3, #6]
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	889b      	ldrh	r3, [r3, #4]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d102      	bne.n	80077fc <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 80077f6:	2303      	movs	r3, #3
 80077f8:	75fb      	strb	r3, [r7, #23]
 80077fa:	e033      	b.n	8007864 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	889b      	ldrh	r3, [r3, #4]
 8007800:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007804:	f023 0307 	bic.w	r3, r3, #7
 8007808:	b29a      	uxth	r2, r3
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	889b      	ldrh	r3, [r3, #4]
 8007812:	b21a      	sxth	r2, r3
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	3304      	adds	r3, #4
 8007818:	781b      	ldrb	r3, [r3, #0]
 800781a:	b299      	uxth	r1, r3
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	3305      	adds	r3, #5
 8007820:	781b      	ldrb	r3, [r3, #0]
 8007822:	b29b      	uxth	r3, r3
 8007824:	021b      	lsls	r3, r3, #8
 8007826:	b29b      	uxth	r3, r3
 8007828:	430b      	orrs	r3, r1
 800782a:	b29b      	uxth	r3, r3
 800782c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007830:	2b00      	cmp	r3, #0
 8007832:	d110      	bne.n	8007856 <USBH_ParseEPDesc+0xbc>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	3304      	adds	r3, #4
 8007838:	781b      	ldrb	r3, [r3, #0]
 800783a:	b299      	uxth	r1, r3
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	3305      	adds	r3, #5
 8007840:	781b      	ldrb	r3, [r3, #0]
 8007842:	b29b      	uxth	r3, r3
 8007844:	021b      	lsls	r3, r3, #8
 8007846:	b29b      	uxth	r3, r3
 8007848:	430b      	orrs	r3, r1
 800784a:	b29b      	uxth	r3, r3
 800784c:	b21b      	sxth	r3, r3
 800784e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007852:	b21b      	sxth	r3, r3
 8007854:	e001      	b.n	800785a <USBH_ParseEPDesc+0xc0>
 8007856:	f44f 7300 	mov.w	r3, #512	; 0x200
 800785a:	4313      	orrs	r3, r2
 800785c:	b21b      	sxth	r3, r3
 800785e:	b29a      	uxth	r2, r3
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800786a:	2b00      	cmp	r3, #0
 800786c:	d116      	bne.n	800789c <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	78db      	ldrb	r3, [r3, #3]
 8007872:	f003 0303 	and.w	r3, r3, #3
 8007876:	2b01      	cmp	r3, #1
 8007878:	d005      	beq.n	8007886 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	78db      	ldrb	r3, [r3, #3]
 800787e:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007882:	2b03      	cmp	r3, #3
 8007884:	d127      	bne.n	80078d6 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	799b      	ldrb	r3, [r3, #6]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d003      	beq.n	8007896 <USBH_ParseEPDesc+0xfc>
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	799b      	ldrb	r3, [r3, #6]
 8007892:	2b10      	cmp	r3, #16
 8007894:	d91f      	bls.n	80078d6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007896:	2303      	movs	r3, #3
 8007898:	75fb      	strb	r3, [r7, #23]
 800789a:	e01c      	b.n	80078d6 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	78db      	ldrb	r3, [r3, #3]
 80078a0:	f003 0303 	and.w	r3, r3, #3
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	d10a      	bne.n	80078be <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	799b      	ldrb	r3, [r3, #6]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d003      	beq.n	80078b8 <USBH_ParseEPDesc+0x11e>
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	799b      	ldrb	r3, [r3, #6]
 80078b4:	2b10      	cmp	r3, #16
 80078b6:	d90e      	bls.n	80078d6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80078b8:	2303      	movs	r3, #3
 80078ba:	75fb      	strb	r3, [r7, #23]
 80078bc:	e00b      	b.n	80078d6 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	78db      	ldrb	r3, [r3, #3]
 80078c2:	f003 0303 	and.w	r3, r3, #3
 80078c6:	2b03      	cmp	r3, #3
 80078c8:	d105      	bne.n	80078d6 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	799b      	ldrb	r3, [r3, #6]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d101      	bne.n	80078d6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80078d2:	2303      	movs	r3, #3
 80078d4:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 80078d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80078d8:	4618      	mov	r0, r3
 80078da:	371c      	adds	r7, #28
 80078dc:	46bd      	mov	sp, r7
 80078de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e2:	4770      	bx	lr

080078e4 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80078e4:	b480      	push	{r7}
 80078e6:	b087      	sub	sp, #28
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	60f8      	str	r0, [r7, #12]
 80078ec:	60b9      	str	r1, [r7, #8]
 80078ee:	4613      	mov	r3, r2
 80078f0:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	3301      	adds	r3, #1
 80078f6:	781b      	ldrb	r3, [r3, #0]
 80078f8:	2b03      	cmp	r3, #3
 80078fa:	d120      	bne.n	800793e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	781b      	ldrb	r3, [r3, #0]
 8007900:	1e9a      	subs	r2, r3, #2
 8007902:	88fb      	ldrh	r3, [r7, #6]
 8007904:	4293      	cmp	r3, r2
 8007906:	bf28      	it	cs
 8007908:	4613      	movcs	r3, r2
 800790a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	3302      	adds	r3, #2
 8007910:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007912:	2300      	movs	r3, #0
 8007914:	82fb      	strh	r3, [r7, #22]
 8007916:	e00b      	b.n	8007930 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007918:	8afb      	ldrh	r3, [r7, #22]
 800791a:	68fa      	ldr	r2, [r7, #12]
 800791c:	4413      	add	r3, r2
 800791e:	781a      	ldrb	r2, [r3, #0]
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	3301      	adds	r3, #1
 8007928:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800792a:	8afb      	ldrh	r3, [r7, #22]
 800792c:	3302      	adds	r3, #2
 800792e:	82fb      	strh	r3, [r7, #22]
 8007930:	8afa      	ldrh	r2, [r7, #22]
 8007932:	8abb      	ldrh	r3, [r7, #20]
 8007934:	429a      	cmp	r2, r3
 8007936:	d3ef      	bcc.n	8007918 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	2200      	movs	r2, #0
 800793c:	701a      	strb	r2, [r3, #0]
  }
}
 800793e:	bf00      	nop
 8007940:	371c      	adds	r7, #28
 8007942:	46bd      	mov	sp, r7
 8007944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007948:	4770      	bx	lr

0800794a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800794a:	b480      	push	{r7}
 800794c:	b085      	sub	sp, #20
 800794e:	af00      	add	r7, sp, #0
 8007950:	6078      	str	r0, [r7, #4]
 8007952:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	881a      	ldrh	r2, [r3, #0]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	781b      	ldrb	r3, [r3, #0]
 800795c:	b29b      	uxth	r3, r3
 800795e:	4413      	add	r3, r2
 8007960:	b29a      	uxth	r2, r3
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	781b      	ldrb	r3, [r3, #0]
 800796a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	4413      	add	r3, r2
 8007970:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007972:	68fb      	ldr	r3, [r7, #12]
}
 8007974:	4618      	mov	r0, r3
 8007976:	3714      	adds	r7, #20
 8007978:	46bd      	mov	sp, r7
 800797a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797e:	4770      	bx	lr

08007980 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b086      	sub	sp, #24
 8007984:	af00      	add	r7, sp, #0
 8007986:	60f8      	str	r0, [r7, #12]
 8007988:	60b9      	str	r1, [r7, #8]
 800798a:	4613      	mov	r3, r2
 800798c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800798e:	2301      	movs	r3, #1
 8007990:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	789b      	ldrb	r3, [r3, #2]
 8007996:	2b01      	cmp	r3, #1
 8007998:	d002      	beq.n	80079a0 <USBH_CtlReq+0x20>
 800799a:	2b02      	cmp	r3, #2
 800799c:	d00f      	beq.n	80079be <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800799e:	e027      	b.n	80079f0 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	68ba      	ldr	r2, [r7, #8]
 80079a4:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	88fa      	ldrh	r2, [r7, #6]
 80079aa:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2201      	movs	r2, #1
 80079b0:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	2202      	movs	r2, #2
 80079b6:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80079b8:	2301      	movs	r3, #1
 80079ba:	75fb      	strb	r3, [r7, #23]
      break;
 80079bc:	e018      	b.n	80079f0 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80079be:	68f8      	ldr	r0, [r7, #12]
 80079c0:	f000 f81c 	bl	80079fc <USBH_HandleControl>
 80079c4:	4603      	mov	r3, r0
 80079c6:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80079c8:	7dfb      	ldrb	r3, [r7, #23]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d002      	beq.n	80079d4 <USBH_CtlReq+0x54>
 80079ce:	7dfb      	ldrb	r3, [r7, #23]
 80079d0:	2b03      	cmp	r3, #3
 80079d2:	d106      	bne.n	80079e2 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	2201      	movs	r2, #1
 80079d8:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	2200      	movs	r2, #0
 80079de:	761a      	strb	r2, [r3, #24]
      break;
 80079e0:	e005      	b.n	80079ee <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80079e2:	7dfb      	ldrb	r3, [r7, #23]
 80079e4:	2b02      	cmp	r3, #2
 80079e6:	d102      	bne.n	80079ee <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2201      	movs	r2, #1
 80079ec:	709a      	strb	r2, [r3, #2]
      break;
 80079ee:	bf00      	nop
  }
  return status;
 80079f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	3718      	adds	r7, #24
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd80      	pop	{r7, pc}
	...

080079fc <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b086      	sub	sp, #24
 8007a00:	af02      	add	r7, sp, #8
 8007a02:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007a04:	2301      	movs	r3, #1
 8007a06:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	7e1b      	ldrb	r3, [r3, #24]
 8007a10:	3b01      	subs	r3, #1
 8007a12:	2b0a      	cmp	r3, #10
 8007a14:	f200 8156 	bhi.w	8007cc4 <USBH_HandleControl+0x2c8>
 8007a18:	a201      	add	r2, pc, #4	; (adr r2, 8007a20 <USBH_HandleControl+0x24>)
 8007a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a1e:	bf00      	nop
 8007a20:	08007a4d 	.word	0x08007a4d
 8007a24:	08007a67 	.word	0x08007a67
 8007a28:	08007ad1 	.word	0x08007ad1
 8007a2c:	08007af7 	.word	0x08007af7
 8007a30:	08007b2f 	.word	0x08007b2f
 8007a34:	08007b59 	.word	0x08007b59
 8007a38:	08007bab 	.word	0x08007bab
 8007a3c:	08007bcd 	.word	0x08007bcd
 8007a40:	08007c09 	.word	0x08007c09
 8007a44:	08007c2f 	.word	0x08007c2f
 8007a48:	08007c6d 	.word	0x08007c6d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f103 0110 	add.w	r1, r3, #16
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	795b      	ldrb	r3, [r3, #5]
 8007a56:	461a      	mov	r2, r3
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f000 f943 	bl	8007ce4 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2202      	movs	r2, #2
 8007a62:	761a      	strb	r2, [r3, #24]
      break;
 8007a64:	e139      	b.n	8007cda <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	795b      	ldrb	r3, [r3, #5]
 8007a6a:	4619      	mov	r1, r3
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f000 fcc5 	bl	80083fc <USBH_LL_GetURBState>
 8007a72:	4603      	mov	r3, r0
 8007a74:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007a76:	7bbb      	ldrb	r3, [r7, #14]
 8007a78:	2b01      	cmp	r3, #1
 8007a7a:	d11e      	bne.n	8007aba <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	7c1b      	ldrb	r3, [r3, #16]
 8007a80:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007a84:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	8adb      	ldrh	r3, [r3, #22]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d00a      	beq.n	8007aa4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007a8e:	7b7b      	ldrb	r3, [r7, #13]
 8007a90:	2b80      	cmp	r3, #128	; 0x80
 8007a92:	d103      	bne.n	8007a9c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2203      	movs	r2, #3
 8007a98:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007a9a:	e115      	b.n	8007cc8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2205      	movs	r2, #5
 8007aa0:	761a      	strb	r2, [r3, #24]
      break;
 8007aa2:	e111      	b.n	8007cc8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007aa4:	7b7b      	ldrb	r3, [r7, #13]
 8007aa6:	2b80      	cmp	r3, #128	; 0x80
 8007aa8:	d103      	bne.n	8007ab2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2209      	movs	r2, #9
 8007aae:	761a      	strb	r2, [r3, #24]
      break;
 8007ab0:	e10a      	b.n	8007cc8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2207      	movs	r2, #7
 8007ab6:	761a      	strb	r2, [r3, #24]
      break;
 8007ab8:	e106      	b.n	8007cc8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007aba:	7bbb      	ldrb	r3, [r7, #14]
 8007abc:	2b04      	cmp	r3, #4
 8007abe:	d003      	beq.n	8007ac8 <USBH_HandleControl+0xcc>
 8007ac0:	7bbb      	ldrb	r3, [r7, #14]
 8007ac2:	2b02      	cmp	r3, #2
 8007ac4:	f040 8100 	bne.w	8007cc8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	220b      	movs	r2, #11
 8007acc:	761a      	strb	r2, [r3, #24]
      break;
 8007ace:	e0fb      	b.n	8007cc8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007ad6:	b29a      	uxth	r2, r3
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6899      	ldr	r1, [r3, #8]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	899a      	ldrh	r2, [r3, #12]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	791b      	ldrb	r3, [r3, #4]
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f000 f93a 	bl	8007d62 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2204      	movs	r2, #4
 8007af2:	761a      	strb	r2, [r3, #24]
      break;
 8007af4:	e0f1      	b.n	8007cda <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	791b      	ldrb	r3, [r3, #4]
 8007afa:	4619      	mov	r1, r3
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f000 fc7d 	bl	80083fc <USBH_LL_GetURBState>
 8007b02:	4603      	mov	r3, r0
 8007b04:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007b06:	7bbb      	ldrb	r3, [r7, #14]
 8007b08:	2b01      	cmp	r3, #1
 8007b0a:	d102      	bne.n	8007b12 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2209      	movs	r2, #9
 8007b10:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007b12:	7bbb      	ldrb	r3, [r7, #14]
 8007b14:	2b05      	cmp	r3, #5
 8007b16:	d102      	bne.n	8007b1e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007b18:	2303      	movs	r3, #3
 8007b1a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007b1c:	e0d6      	b.n	8007ccc <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8007b1e:	7bbb      	ldrb	r3, [r7, #14]
 8007b20:	2b04      	cmp	r3, #4
 8007b22:	f040 80d3 	bne.w	8007ccc <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	220b      	movs	r2, #11
 8007b2a:	761a      	strb	r2, [r3, #24]
      break;
 8007b2c:	e0ce      	b.n	8007ccc <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6899      	ldr	r1, [r3, #8]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	899a      	ldrh	r2, [r3, #12]
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	795b      	ldrb	r3, [r3, #5]
 8007b3a:	2001      	movs	r0, #1
 8007b3c:	9000      	str	r0, [sp, #0]
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f000 f8ea 	bl	8007d18 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007b4a:	b29a      	uxth	r2, r3
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2206      	movs	r2, #6
 8007b54:	761a      	strb	r2, [r3, #24]
      break;
 8007b56:	e0c0      	b.n	8007cda <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	795b      	ldrb	r3, [r3, #5]
 8007b5c:	4619      	mov	r1, r3
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f000 fc4c 	bl	80083fc <USBH_LL_GetURBState>
 8007b64:	4603      	mov	r3, r0
 8007b66:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007b68:	7bbb      	ldrb	r3, [r7, #14]
 8007b6a:	2b01      	cmp	r3, #1
 8007b6c:	d103      	bne.n	8007b76 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2207      	movs	r2, #7
 8007b72:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007b74:	e0ac      	b.n	8007cd0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007b76:	7bbb      	ldrb	r3, [r7, #14]
 8007b78:	2b05      	cmp	r3, #5
 8007b7a:	d105      	bne.n	8007b88 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	220c      	movs	r2, #12
 8007b80:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007b82:	2303      	movs	r3, #3
 8007b84:	73fb      	strb	r3, [r7, #15]
      break;
 8007b86:	e0a3      	b.n	8007cd0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007b88:	7bbb      	ldrb	r3, [r7, #14]
 8007b8a:	2b02      	cmp	r3, #2
 8007b8c:	d103      	bne.n	8007b96 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2205      	movs	r2, #5
 8007b92:	761a      	strb	r2, [r3, #24]
      break;
 8007b94:	e09c      	b.n	8007cd0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007b96:	7bbb      	ldrb	r3, [r7, #14]
 8007b98:	2b04      	cmp	r3, #4
 8007b9a:	f040 8099 	bne.w	8007cd0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	220b      	movs	r2, #11
 8007ba2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007ba4:	2302      	movs	r3, #2
 8007ba6:	73fb      	strb	r3, [r7, #15]
      break;
 8007ba8:	e092      	b.n	8007cd0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	791b      	ldrb	r3, [r3, #4]
 8007bae:	2200      	movs	r2, #0
 8007bb0:	2100      	movs	r1, #0
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f000 f8d5 	bl	8007d62 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007bbe:	b29a      	uxth	r2, r3
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2208      	movs	r2, #8
 8007bc8:	761a      	strb	r2, [r3, #24]

      break;
 8007bca:	e086      	b.n	8007cda <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	791b      	ldrb	r3, [r3, #4]
 8007bd0:	4619      	mov	r1, r3
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f000 fc12 	bl	80083fc <USBH_LL_GetURBState>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007bdc:	7bbb      	ldrb	r3, [r7, #14]
 8007bde:	2b01      	cmp	r3, #1
 8007be0:	d105      	bne.n	8007bee <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	220d      	movs	r2, #13
 8007be6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007be8:	2300      	movs	r3, #0
 8007bea:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007bec:	e072      	b.n	8007cd4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007bee:	7bbb      	ldrb	r3, [r7, #14]
 8007bf0:	2b04      	cmp	r3, #4
 8007bf2:	d103      	bne.n	8007bfc <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	220b      	movs	r2, #11
 8007bf8:	761a      	strb	r2, [r3, #24]
      break;
 8007bfa:	e06b      	b.n	8007cd4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007bfc:	7bbb      	ldrb	r3, [r7, #14]
 8007bfe:	2b05      	cmp	r3, #5
 8007c00:	d168      	bne.n	8007cd4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007c02:	2303      	movs	r3, #3
 8007c04:	73fb      	strb	r3, [r7, #15]
      break;
 8007c06:	e065      	b.n	8007cd4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	795b      	ldrb	r3, [r3, #5]
 8007c0c:	2201      	movs	r2, #1
 8007c0e:	9200      	str	r2, [sp, #0]
 8007c10:	2200      	movs	r2, #0
 8007c12:	2100      	movs	r1, #0
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	f000 f87f 	bl	8007d18 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007c20:	b29a      	uxth	r2, r3
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	220a      	movs	r2, #10
 8007c2a:	761a      	strb	r2, [r3, #24]
      break;
 8007c2c:	e055      	b.n	8007cda <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	795b      	ldrb	r3, [r3, #5]
 8007c32:	4619      	mov	r1, r3
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f000 fbe1 	bl	80083fc <USBH_LL_GetURBState>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007c3e:	7bbb      	ldrb	r3, [r7, #14]
 8007c40:	2b01      	cmp	r3, #1
 8007c42:	d105      	bne.n	8007c50 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007c44:	2300      	movs	r3, #0
 8007c46:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	220d      	movs	r2, #13
 8007c4c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007c4e:	e043      	b.n	8007cd8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007c50:	7bbb      	ldrb	r3, [r7, #14]
 8007c52:	2b02      	cmp	r3, #2
 8007c54:	d103      	bne.n	8007c5e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2209      	movs	r2, #9
 8007c5a:	761a      	strb	r2, [r3, #24]
      break;
 8007c5c:	e03c      	b.n	8007cd8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8007c5e:	7bbb      	ldrb	r3, [r7, #14]
 8007c60:	2b04      	cmp	r3, #4
 8007c62:	d139      	bne.n	8007cd8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	220b      	movs	r2, #11
 8007c68:	761a      	strb	r2, [r3, #24]
      break;
 8007c6a:	e035      	b.n	8007cd8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	7e5b      	ldrb	r3, [r3, #25]
 8007c70:	3301      	adds	r3, #1
 8007c72:	b2da      	uxtb	r2, r3
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	765a      	strb	r2, [r3, #25]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	7e5b      	ldrb	r3, [r3, #25]
 8007c7c:	2b02      	cmp	r3, #2
 8007c7e:	d806      	bhi.n	8007c8e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2201      	movs	r2, #1
 8007c84:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2201      	movs	r2, #1
 8007c8a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007c8c:	e025      	b.n	8007cda <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007c94:	2106      	movs	r1, #6
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	795b      	ldrb	r3, [r3, #5]
 8007ca4:	4619      	mov	r1, r3
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f000 f90c 	bl	8007ec4 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	791b      	ldrb	r3, [r3, #4]
 8007cb0:	4619      	mov	r1, r3
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f000 f906 	bl	8007ec4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007cbe:	2302      	movs	r3, #2
 8007cc0:	73fb      	strb	r3, [r7, #15]
      break;
 8007cc2:	e00a      	b.n	8007cda <USBH_HandleControl+0x2de>

    default:
      break;
 8007cc4:	bf00      	nop
 8007cc6:	e008      	b.n	8007cda <USBH_HandleControl+0x2de>
      break;
 8007cc8:	bf00      	nop
 8007cca:	e006      	b.n	8007cda <USBH_HandleControl+0x2de>
      break;
 8007ccc:	bf00      	nop
 8007cce:	e004      	b.n	8007cda <USBH_HandleControl+0x2de>
      break;
 8007cd0:	bf00      	nop
 8007cd2:	e002      	b.n	8007cda <USBH_HandleControl+0x2de>
      break;
 8007cd4:	bf00      	nop
 8007cd6:	e000      	b.n	8007cda <USBH_HandleControl+0x2de>
      break;
 8007cd8:	bf00      	nop
  }

  return status;
 8007cda:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3710      	adds	r7, #16
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}

08007ce4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b088      	sub	sp, #32
 8007ce8:	af04      	add	r7, sp, #16
 8007cea:	60f8      	str	r0, [r7, #12]
 8007cec:	60b9      	str	r1, [r7, #8]
 8007cee:	4613      	mov	r3, r2
 8007cf0:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007cf2:	79f9      	ldrb	r1, [r7, #7]
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	9303      	str	r3, [sp, #12]
 8007cf8:	2308      	movs	r3, #8
 8007cfa:	9302      	str	r3, [sp, #8]
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	9301      	str	r3, [sp, #4]
 8007d00:	2300      	movs	r3, #0
 8007d02:	9300      	str	r3, [sp, #0]
 8007d04:	2300      	movs	r3, #0
 8007d06:	2200      	movs	r2, #0
 8007d08:	68f8      	ldr	r0, [r7, #12]
 8007d0a:	f000 fb46 	bl	800839a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8007d0e:	2300      	movs	r3, #0
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	3710      	adds	r7, #16
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}

08007d18 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b088      	sub	sp, #32
 8007d1c:	af04      	add	r7, sp, #16
 8007d1e:	60f8      	str	r0, [r7, #12]
 8007d20:	60b9      	str	r1, [r7, #8]
 8007d22:	4611      	mov	r1, r2
 8007d24:	461a      	mov	r2, r3
 8007d26:	460b      	mov	r3, r1
 8007d28:	80fb      	strh	r3, [r7, #6]
 8007d2a:	4613      	mov	r3, r2
 8007d2c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d001      	beq.n	8007d3c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007d38:	2300      	movs	r3, #0
 8007d3a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007d3c:	7979      	ldrb	r1, [r7, #5]
 8007d3e:	7e3b      	ldrb	r3, [r7, #24]
 8007d40:	9303      	str	r3, [sp, #12]
 8007d42:	88fb      	ldrh	r3, [r7, #6]
 8007d44:	9302      	str	r3, [sp, #8]
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	9301      	str	r3, [sp, #4]
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	9300      	str	r3, [sp, #0]
 8007d4e:	2300      	movs	r3, #0
 8007d50:	2200      	movs	r2, #0
 8007d52:	68f8      	ldr	r0, [r7, #12]
 8007d54:	f000 fb21 	bl	800839a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007d58:	2300      	movs	r3, #0
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3710      	adds	r7, #16
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}

08007d62 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007d62:	b580      	push	{r7, lr}
 8007d64:	b088      	sub	sp, #32
 8007d66:	af04      	add	r7, sp, #16
 8007d68:	60f8      	str	r0, [r7, #12]
 8007d6a:	60b9      	str	r1, [r7, #8]
 8007d6c:	4611      	mov	r1, r2
 8007d6e:	461a      	mov	r2, r3
 8007d70:	460b      	mov	r3, r1
 8007d72:	80fb      	strh	r3, [r7, #6]
 8007d74:	4613      	mov	r3, r2
 8007d76:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007d78:	7979      	ldrb	r1, [r7, #5]
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	9303      	str	r3, [sp, #12]
 8007d7e:	88fb      	ldrh	r3, [r7, #6]
 8007d80:	9302      	str	r3, [sp, #8]
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	9301      	str	r3, [sp, #4]
 8007d86:	2301      	movs	r3, #1
 8007d88:	9300      	str	r3, [sp, #0]
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	68f8      	ldr	r0, [r7, #12]
 8007d90:	f000 fb03 	bl	800839a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007d94:	2300      	movs	r3, #0

}
 8007d96:	4618      	mov	r0, r3
 8007d98:	3710      	adds	r7, #16
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}

08007d9e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007d9e:	b580      	push	{r7, lr}
 8007da0:	b088      	sub	sp, #32
 8007da2:	af04      	add	r7, sp, #16
 8007da4:	60f8      	str	r0, [r7, #12]
 8007da6:	60b9      	str	r1, [r7, #8]
 8007da8:	4611      	mov	r1, r2
 8007daa:	461a      	mov	r2, r3
 8007dac:	460b      	mov	r3, r1
 8007dae:	80fb      	strh	r3, [r7, #6]
 8007db0:	4613      	mov	r3, r2
 8007db2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d001      	beq.n	8007dc2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007dc2:	7979      	ldrb	r1, [r7, #5]
 8007dc4:	7e3b      	ldrb	r3, [r7, #24]
 8007dc6:	9303      	str	r3, [sp, #12]
 8007dc8:	88fb      	ldrh	r3, [r7, #6]
 8007dca:	9302      	str	r3, [sp, #8]
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	9301      	str	r3, [sp, #4]
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	9300      	str	r3, [sp, #0]
 8007dd4:	2302      	movs	r3, #2
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	68f8      	ldr	r0, [r7, #12]
 8007dda:	f000 fade 	bl	800839a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007dde:	2300      	movs	r3, #0
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	3710      	adds	r7, #16
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}

08007de8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b088      	sub	sp, #32
 8007dec:	af04      	add	r7, sp, #16
 8007dee:	60f8      	str	r0, [r7, #12]
 8007df0:	60b9      	str	r1, [r7, #8]
 8007df2:	4611      	mov	r1, r2
 8007df4:	461a      	mov	r2, r3
 8007df6:	460b      	mov	r3, r1
 8007df8:	80fb      	strh	r3, [r7, #6]
 8007dfa:	4613      	mov	r3, r2
 8007dfc:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007dfe:	7979      	ldrb	r1, [r7, #5]
 8007e00:	2300      	movs	r3, #0
 8007e02:	9303      	str	r3, [sp, #12]
 8007e04:	88fb      	ldrh	r3, [r7, #6]
 8007e06:	9302      	str	r3, [sp, #8]
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	9301      	str	r3, [sp, #4]
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	9300      	str	r3, [sp, #0]
 8007e10:	2302      	movs	r3, #2
 8007e12:	2201      	movs	r2, #1
 8007e14:	68f8      	ldr	r0, [r7, #12]
 8007e16:	f000 fac0 	bl	800839a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007e1a:	2300      	movs	r3, #0
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	3710      	adds	r7, #16
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}

08007e24 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b086      	sub	sp, #24
 8007e28:	af04      	add	r7, sp, #16
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	4608      	mov	r0, r1
 8007e2e:	4611      	mov	r1, r2
 8007e30:	461a      	mov	r2, r3
 8007e32:	4603      	mov	r3, r0
 8007e34:	70fb      	strb	r3, [r7, #3]
 8007e36:	460b      	mov	r3, r1
 8007e38:	70bb      	strb	r3, [r7, #2]
 8007e3a:	4613      	mov	r3, r2
 8007e3c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007e3e:	7878      	ldrb	r0, [r7, #1]
 8007e40:	78ba      	ldrb	r2, [r7, #2]
 8007e42:	78f9      	ldrb	r1, [r7, #3]
 8007e44:	8b3b      	ldrh	r3, [r7, #24]
 8007e46:	9302      	str	r3, [sp, #8]
 8007e48:	7d3b      	ldrb	r3, [r7, #20]
 8007e4a:	9301      	str	r3, [sp, #4]
 8007e4c:	7c3b      	ldrb	r3, [r7, #16]
 8007e4e:	9300      	str	r3, [sp, #0]
 8007e50:	4603      	mov	r3, r0
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f000 fa53 	bl	80082fe <USBH_LL_OpenPipe>

  return USBH_OK;
 8007e58:	2300      	movs	r3, #0
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3708      	adds	r7, #8
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}

08007e62 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007e62:	b580      	push	{r7, lr}
 8007e64:	b082      	sub	sp, #8
 8007e66:	af00      	add	r7, sp, #0
 8007e68:	6078      	str	r0, [r7, #4]
 8007e6a:	460b      	mov	r3, r1
 8007e6c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8007e6e:	78fb      	ldrb	r3, [r7, #3]
 8007e70:	4619      	mov	r1, r3
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f000 fa72 	bl	800835c <USBH_LL_ClosePipe>

  return USBH_OK;
 8007e78:	2300      	movs	r3, #0
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	3708      	adds	r7, #8
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}

08007e82 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007e82:	b580      	push	{r7, lr}
 8007e84:	b084      	sub	sp, #16
 8007e86:	af00      	add	r7, sp, #0
 8007e88:	6078      	str	r0, [r7, #4]
 8007e8a:	460b      	mov	r3, r1
 8007e8c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f000 f836 	bl	8007f00 <USBH_GetFreePipe>
 8007e94:	4603      	mov	r3, r0
 8007e96:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007e98:	89fb      	ldrh	r3, [r7, #14]
 8007e9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d00a      	beq.n	8007eb8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8007ea2:	78fa      	ldrb	r2, [r7, #3]
 8007ea4:	89fb      	ldrh	r3, [r7, #14]
 8007ea6:	f003 030f 	and.w	r3, r3, #15
 8007eaa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007eae:	6879      	ldr	r1, [r7, #4]
 8007eb0:	33e0      	adds	r3, #224	; 0xe0
 8007eb2:	009b      	lsls	r3, r3, #2
 8007eb4:	440b      	add	r3, r1
 8007eb6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007eb8:	89fb      	ldrh	r3, [r7, #14]
 8007eba:	b2db      	uxtb	r3, r3
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3710      	adds	r7, #16
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}

08007ec4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b083      	sub	sp, #12
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
 8007ecc:	460b      	mov	r3, r1
 8007ece:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8007ed0:	78fb      	ldrb	r3, [r7, #3]
 8007ed2:	2b0f      	cmp	r3, #15
 8007ed4:	d80d      	bhi.n	8007ef2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007ed6:	78fb      	ldrb	r3, [r7, #3]
 8007ed8:	687a      	ldr	r2, [r7, #4]
 8007eda:	33e0      	adds	r3, #224	; 0xe0
 8007edc:	009b      	lsls	r3, r3, #2
 8007ede:	4413      	add	r3, r2
 8007ee0:	685a      	ldr	r2, [r3, #4]
 8007ee2:	78fb      	ldrb	r3, [r7, #3]
 8007ee4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007ee8:	6879      	ldr	r1, [r7, #4]
 8007eea:	33e0      	adds	r3, #224	; 0xe0
 8007eec:	009b      	lsls	r3, r3, #2
 8007eee:	440b      	add	r3, r1
 8007ef0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007ef2:	2300      	movs	r3, #0
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	370c      	adds	r7, #12
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efe:	4770      	bx	lr

08007f00 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007f00:	b480      	push	{r7}
 8007f02:	b085      	sub	sp, #20
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007f08:	2300      	movs	r3, #0
 8007f0a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	73fb      	strb	r3, [r7, #15]
 8007f10:	e00f      	b.n	8007f32 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007f12:	7bfb      	ldrb	r3, [r7, #15]
 8007f14:	687a      	ldr	r2, [r7, #4]
 8007f16:	33e0      	adds	r3, #224	; 0xe0
 8007f18:	009b      	lsls	r3, r3, #2
 8007f1a:	4413      	add	r3, r2
 8007f1c:	685b      	ldr	r3, [r3, #4]
 8007f1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d102      	bne.n	8007f2c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007f26:	7bfb      	ldrb	r3, [r7, #15]
 8007f28:	b29b      	uxth	r3, r3
 8007f2a:	e007      	b.n	8007f3c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007f2c:	7bfb      	ldrb	r3, [r7, #15]
 8007f2e:	3301      	adds	r3, #1
 8007f30:	73fb      	strb	r3, [r7, #15]
 8007f32:	7bfb      	ldrb	r3, [r7, #15]
 8007f34:	2b0f      	cmp	r3, #15
 8007f36:	d9ec      	bls.n	8007f12 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007f38:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3714      	adds	r7, #20
 8007f40:	46bd      	mov	sp, r7
 8007f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f46:	4770      	bx	lr

08007f48 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007f4c:	2201      	movs	r2, #1
 8007f4e:	490e      	ldr	r1, [pc, #56]	; (8007f88 <MX_USB_HOST_Init+0x40>)
 8007f50:	480e      	ldr	r0, [pc, #56]	; (8007f8c <MX_USB_HOST_Init+0x44>)
 8007f52:	f7fe fba7 	bl	80066a4 <USBH_Init>
 8007f56:	4603      	mov	r3, r0
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d001      	beq.n	8007f60 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007f5c:	f7f8 fdca 	bl	8000af4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007f60:	490b      	ldr	r1, [pc, #44]	; (8007f90 <MX_USB_HOST_Init+0x48>)
 8007f62:	480a      	ldr	r0, [pc, #40]	; (8007f8c <MX_USB_HOST_Init+0x44>)
 8007f64:	f7fe fc2c 	bl	80067c0 <USBH_RegisterClass>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d001      	beq.n	8007f72 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007f6e:	f7f8 fdc1 	bl	8000af4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007f72:	4806      	ldr	r0, [pc, #24]	; (8007f8c <MX_USB_HOST_Init+0x44>)
 8007f74:	f7fe fcb0 	bl	80068d8 <USBH_Start>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d001      	beq.n	8007f82 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007f7e:	f7f8 fdb9 	bl	8000af4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007f82:	bf00      	nop
 8007f84:	bd80      	pop	{r7, pc}
 8007f86:	bf00      	nop
 8007f88:	08007fa9 	.word	0x08007fa9
 8007f8c:	200005b8 	.word	0x200005b8
 8007f90:	20000014 	.word	0x20000014

08007f94 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8007f98:	4802      	ldr	r0, [pc, #8]	; (8007fa4 <MX_USB_HOST_Process+0x10>)
 8007f9a:	f7fe fcad 	bl	80068f8 <USBH_Process>
}
 8007f9e:	bf00      	nop
 8007fa0:	bd80      	pop	{r7, pc}
 8007fa2:	bf00      	nop
 8007fa4:	200005b8 	.word	0x200005b8

08007fa8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007fa8:	b480      	push	{r7}
 8007faa:	b083      	sub	sp, #12
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
 8007fb0:	460b      	mov	r3, r1
 8007fb2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007fb4:	78fb      	ldrb	r3, [r7, #3]
 8007fb6:	3b01      	subs	r3, #1
 8007fb8:	2b04      	cmp	r3, #4
 8007fba:	d819      	bhi.n	8007ff0 <USBH_UserProcess+0x48>
 8007fbc:	a201      	add	r2, pc, #4	; (adr r2, 8007fc4 <USBH_UserProcess+0x1c>)
 8007fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fc2:	bf00      	nop
 8007fc4:	08007ff1 	.word	0x08007ff1
 8007fc8:	08007fe1 	.word	0x08007fe1
 8007fcc:	08007ff1 	.word	0x08007ff1
 8007fd0:	08007fe9 	.word	0x08007fe9
 8007fd4:	08007fd9 	.word	0x08007fd9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007fd8:	4b09      	ldr	r3, [pc, #36]	; (8008000 <USBH_UserProcess+0x58>)
 8007fda:	2203      	movs	r2, #3
 8007fdc:	701a      	strb	r2, [r3, #0]
  break;
 8007fde:	e008      	b.n	8007ff2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007fe0:	4b07      	ldr	r3, [pc, #28]	; (8008000 <USBH_UserProcess+0x58>)
 8007fe2:	2202      	movs	r2, #2
 8007fe4:	701a      	strb	r2, [r3, #0]
  break;
 8007fe6:	e004      	b.n	8007ff2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007fe8:	4b05      	ldr	r3, [pc, #20]	; (8008000 <USBH_UserProcess+0x58>)
 8007fea:	2201      	movs	r2, #1
 8007fec:	701a      	strb	r2, [r3, #0]
  break;
 8007fee:	e000      	b.n	8007ff2 <USBH_UserProcess+0x4a>

  default:
  break;
 8007ff0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007ff2:	bf00      	nop
 8007ff4:	370c      	adds	r7, #12
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffc:	4770      	bx	lr
 8007ffe:	bf00      	nop
 8008000:	20000990 	.word	0x20000990

08008004 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b08a      	sub	sp, #40	; 0x28
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800800c:	f107 0314 	add.w	r3, r7, #20
 8008010:	2200      	movs	r2, #0
 8008012:	601a      	str	r2, [r3, #0]
 8008014:	605a      	str	r2, [r3, #4]
 8008016:	609a      	str	r2, [r3, #8]
 8008018:	60da      	str	r2, [r3, #12]
 800801a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008024:	d147      	bne.n	80080b6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008026:	2300      	movs	r3, #0
 8008028:	613b      	str	r3, [r7, #16]
 800802a:	4b25      	ldr	r3, [pc, #148]	; (80080c0 <HAL_HCD_MspInit+0xbc>)
 800802c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800802e:	4a24      	ldr	r2, [pc, #144]	; (80080c0 <HAL_HCD_MspInit+0xbc>)
 8008030:	f043 0301 	orr.w	r3, r3, #1
 8008034:	6313      	str	r3, [r2, #48]	; 0x30
 8008036:	4b22      	ldr	r3, [pc, #136]	; (80080c0 <HAL_HCD_MspInit+0xbc>)
 8008038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800803a:	f003 0301 	and.w	r3, r3, #1
 800803e:	613b      	str	r3, [r7, #16]
 8008040:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008042:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008046:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008048:	2300      	movs	r3, #0
 800804a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800804c:	2300      	movs	r3, #0
 800804e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008050:	f107 0314 	add.w	r3, r7, #20
 8008054:	4619      	mov	r1, r3
 8008056:	481b      	ldr	r0, [pc, #108]	; (80080c4 <HAL_HCD_MspInit+0xc0>)
 8008058:	f7f9 fa82 	bl	8001560 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800805c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008060:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008062:	2302      	movs	r3, #2
 8008064:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008066:	2300      	movs	r3, #0
 8008068:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800806a:	2300      	movs	r3, #0
 800806c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800806e:	230a      	movs	r3, #10
 8008070:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008072:	f107 0314 	add.w	r3, r7, #20
 8008076:	4619      	mov	r1, r3
 8008078:	4812      	ldr	r0, [pc, #72]	; (80080c4 <HAL_HCD_MspInit+0xc0>)
 800807a:	f7f9 fa71 	bl	8001560 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800807e:	4b10      	ldr	r3, [pc, #64]	; (80080c0 <HAL_HCD_MspInit+0xbc>)
 8008080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008082:	4a0f      	ldr	r2, [pc, #60]	; (80080c0 <HAL_HCD_MspInit+0xbc>)
 8008084:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008088:	6353      	str	r3, [r2, #52]	; 0x34
 800808a:	2300      	movs	r3, #0
 800808c:	60fb      	str	r3, [r7, #12]
 800808e:	4b0c      	ldr	r3, [pc, #48]	; (80080c0 <HAL_HCD_MspInit+0xbc>)
 8008090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008092:	4a0b      	ldr	r2, [pc, #44]	; (80080c0 <HAL_HCD_MspInit+0xbc>)
 8008094:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008098:	6453      	str	r3, [r2, #68]	; 0x44
 800809a:	4b09      	ldr	r3, [pc, #36]	; (80080c0 <HAL_HCD_MspInit+0xbc>)
 800809c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800809e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80080a2:	60fb      	str	r3, [r7, #12]
 80080a4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80080a6:	2200      	movs	r2, #0
 80080a8:	2100      	movs	r1, #0
 80080aa:	2043      	movs	r0, #67	; 0x43
 80080ac:	f7f9 fa21 	bl	80014f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80080b0:	2043      	movs	r0, #67	; 0x43
 80080b2:	f7f9 fa3a 	bl	800152a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80080b6:	bf00      	nop
 80080b8:	3728      	adds	r7, #40	; 0x28
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}
 80080be:	bf00      	nop
 80080c0:	40023800 	.word	0x40023800
 80080c4:	40020000 	.word	0x40020000

080080c8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b082      	sub	sp, #8
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80080d6:	4618      	mov	r0, r3
 80080d8:	f7fe ffed 	bl	80070b6 <USBH_LL_IncTimer>
}
 80080dc:	bf00      	nop
 80080de:	3708      	adds	r7, #8
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}

080080e4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b082      	sub	sp, #8
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80080f2:	4618      	mov	r0, r3
 80080f4:	f7ff f825 	bl	8007142 <USBH_LL_Connect>
}
 80080f8:	bf00      	nop
 80080fa:	3708      	adds	r7, #8
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}

08008100 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b082      	sub	sp, #8
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800810e:	4618      	mov	r0, r3
 8008110:	f7ff f82e 	bl	8007170 <USBH_LL_Disconnect>
}
 8008114:	bf00      	nop
 8008116:	3708      	adds	r7, #8
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}

0800811c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800811c:	b480      	push	{r7}
 800811e:	b083      	sub	sp, #12
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	460b      	mov	r3, r1
 8008126:	70fb      	strb	r3, [r7, #3]
 8008128:	4613      	mov	r3, r2
 800812a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800812c:	bf00      	nop
 800812e:	370c      	adds	r7, #12
 8008130:	46bd      	mov	sp, r7
 8008132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008136:	4770      	bx	lr

08008138 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b082      	sub	sp, #8
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008146:	4618      	mov	r0, r3
 8008148:	f7fe ffdf 	bl	800710a <USBH_LL_PortEnabled>
}
 800814c:	bf00      	nop
 800814e:	3708      	adds	r7, #8
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}

08008154 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b082      	sub	sp, #8
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008162:	4618      	mov	r0, r3
 8008164:	f7fe ffdf 	bl	8007126 <USBH_LL_PortDisabled>
}
 8008168:	bf00      	nop
 800816a:	3708      	adds	r7, #8
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}

08008170 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b082      	sub	sp, #8
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800817e:	2b01      	cmp	r3, #1
 8008180:	d12a      	bne.n	80081d8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008182:	4a18      	ldr	r2, [pc, #96]	; (80081e4 <USBH_LL_Init+0x74>)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	4a15      	ldr	r2, [pc, #84]	; (80081e4 <USBH_LL_Init+0x74>)
 800818e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008192:	4b14      	ldr	r3, [pc, #80]	; (80081e4 <USBH_LL_Init+0x74>)
 8008194:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008198:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800819a:	4b12      	ldr	r3, [pc, #72]	; (80081e4 <USBH_LL_Init+0x74>)
 800819c:	2208      	movs	r2, #8
 800819e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80081a0:	4b10      	ldr	r3, [pc, #64]	; (80081e4 <USBH_LL_Init+0x74>)
 80081a2:	2201      	movs	r2, #1
 80081a4:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80081a6:	4b0f      	ldr	r3, [pc, #60]	; (80081e4 <USBH_LL_Init+0x74>)
 80081a8:	2200      	movs	r2, #0
 80081aa:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80081ac:	4b0d      	ldr	r3, [pc, #52]	; (80081e4 <USBH_LL_Init+0x74>)
 80081ae:	2202      	movs	r2, #2
 80081b0:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80081b2:	4b0c      	ldr	r3, [pc, #48]	; (80081e4 <USBH_LL_Init+0x74>)
 80081b4:	2200      	movs	r2, #0
 80081b6:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80081b8:	480a      	ldr	r0, [pc, #40]	; (80081e4 <USBH_LL_Init+0x74>)
 80081ba:	f7f9 fb9e 	bl	80018fa <HAL_HCD_Init>
 80081be:	4603      	mov	r3, r0
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d001      	beq.n	80081c8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80081c4:	f7f8 fc96 	bl	8000af4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80081c8:	4806      	ldr	r0, [pc, #24]	; (80081e4 <USBH_LL_Init+0x74>)
 80081ca:	f7f9 ff82 	bl	80020d2 <HAL_HCD_GetCurrentFrame>
 80081ce:	4603      	mov	r3, r0
 80081d0:	4619      	mov	r1, r3
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f7fe ff60 	bl	8007098 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80081d8:	2300      	movs	r3, #0
}
 80081da:	4618      	mov	r0, r3
 80081dc:	3708      	adds	r7, #8
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}
 80081e2:	bf00      	nop
 80081e4:	20000994 	.word	0x20000994

080081e8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b084      	sub	sp, #16
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081f0:	2300      	movs	r3, #0
 80081f2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80081f4:	2300      	movs	r3, #0
 80081f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80081fe:	4618      	mov	r0, r3
 8008200:	f7f9 fef1 	bl	8001fe6 <HAL_HCD_Start>
 8008204:	4603      	mov	r3, r0
 8008206:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008208:	7bfb      	ldrb	r3, [r7, #15]
 800820a:	4618      	mov	r0, r3
 800820c:	f000 f95c 	bl	80084c8 <USBH_Get_USB_Status>
 8008210:	4603      	mov	r3, r0
 8008212:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008214:	7bbb      	ldrb	r3, [r7, #14]
}
 8008216:	4618      	mov	r0, r3
 8008218:	3710      	adds	r7, #16
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}

0800821e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800821e:	b580      	push	{r7, lr}
 8008220:	b084      	sub	sp, #16
 8008222:	af00      	add	r7, sp, #0
 8008224:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008226:	2300      	movs	r3, #0
 8008228:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800822a:	2300      	movs	r3, #0
 800822c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008234:	4618      	mov	r0, r3
 8008236:	f7f9 fef9 	bl	800202c <HAL_HCD_Stop>
 800823a:	4603      	mov	r3, r0
 800823c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800823e:	7bfb      	ldrb	r3, [r7, #15]
 8008240:	4618      	mov	r0, r3
 8008242:	f000 f941 	bl	80084c8 <USBH_Get_USB_Status>
 8008246:	4603      	mov	r3, r0
 8008248:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800824a:	7bbb      	ldrb	r3, [r7, #14]
}
 800824c:	4618      	mov	r0, r3
 800824e:	3710      	adds	r7, #16
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}

08008254 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b084      	sub	sp, #16
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800825c:	2301      	movs	r3, #1
 800825e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008266:	4618      	mov	r0, r3
 8008268:	f7f9 ff41 	bl	80020ee <HAL_HCD_GetCurrentSpeed>
 800826c:	4603      	mov	r3, r0
 800826e:	2b02      	cmp	r3, #2
 8008270:	d00c      	beq.n	800828c <USBH_LL_GetSpeed+0x38>
 8008272:	2b02      	cmp	r3, #2
 8008274:	d80d      	bhi.n	8008292 <USBH_LL_GetSpeed+0x3e>
 8008276:	2b00      	cmp	r3, #0
 8008278:	d002      	beq.n	8008280 <USBH_LL_GetSpeed+0x2c>
 800827a:	2b01      	cmp	r3, #1
 800827c:	d003      	beq.n	8008286 <USBH_LL_GetSpeed+0x32>
 800827e:	e008      	b.n	8008292 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008280:	2300      	movs	r3, #0
 8008282:	73fb      	strb	r3, [r7, #15]
    break;
 8008284:	e008      	b.n	8008298 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008286:	2301      	movs	r3, #1
 8008288:	73fb      	strb	r3, [r7, #15]
    break;
 800828a:	e005      	b.n	8008298 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800828c:	2302      	movs	r3, #2
 800828e:	73fb      	strb	r3, [r7, #15]
    break;
 8008290:	e002      	b.n	8008298 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008292:	2301      	movs	r3, #1
 8008294:	73fb      	strb	r3, [r7, #15]
    break;
 8008296:	bf00      	nop
  }
  return  speed;
 8008298:	7bfb      	ldrb	r3, [r7, #15]
}
 800829a:	4618      	mov	r0, r3
 800829c:	3710      	adds	r7, #16
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}

080082a2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80082a2:	b580      	push	{r7, lr}
 80082a4:	b084      	sub	sp, #16
 80082a6:	af00      	add	r7, sp, #0
 80082a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082aa:	2300      	movs	r3, #0
 80082ac:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80082ae:	2300      	movs	r3, #0
 80082b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80082b8:	4618      	mov	r0, r3
 80082ba:	f7f9 fed4 	bl	8002066 <HAL_HCD_ResetPort>
 80082be:	4603      	mov	r3, r0
 80082c0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80082c2:	7bfb      	ldrb	r3, [r7, #15]
 80082c4:	4618      	mov	r0, r3
 80082c6:	f000 f8ff 	bl	80084c8 <USBH_Get_USB_Status>
 80082ca:	4603      	mov	r3, r0
 80082cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80082ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	3710      	adds	r7, #16
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}

080082d8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b082      	sub	sp, #8
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
 80082e0:	460b      	mov	r3, r1
 80082e2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80082ea:	78fa      	ldrb	r2, [r7, #3]
 80082ec:	4611      	mov	r1, r2
 80082ee:	4618      	mov	r0, r3
 80082f0:	f7f9 fedb 	bl	80020aa <HAL_HCD_HC_GetXferCount>
 80082f4:	4603      	mov	r3, r0
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	3708      	adds	r7, #8
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}

080082fe <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80082fe:	b590      	push	{r4, r7, lr}
 8008300:	b089      	sub	sp, #36	; 0x24
 8008302:	af04      	add	r7, sp, #16
 8008304:	6078      	str	r0, [r7, #4]
 8008306:	4608      	mov	r0, r1
 8008308:	4611      	mov	r1, r2
 800830a:	461a      	mov	r2, r3
 800830c:	4603      	mov	r3, r0
 800830e:	70fb      	strb	r3, [r7, #3]
 8008310:	460b      	mov	r3, r1
 8008312:	70bb      	strb	r3, [r7, #2]
 8008314:	4613      	mov	r3, r2
 8008316:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008318:	2300      	movs	r3, #0
 800831a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800831c:	2300      	movs	r3, #0
 800831e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008326:	787c      	ldrb	r4, [r7, #1]
 8008328:	78ba      	ldrb	r2, [r7, #2]
 800832a:	78f9      	ldrb	r1, [r7, #3]
 800832c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800832e:	9302      	str	r3, [sp, #8]
 8008330:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008334:	9301      	str	r3, [sp, #4]
 8008336:	f897 3020 	ldrb.w	r3, [r7, #32]
 800833a:	9300      	str	r3, [sp, #0]
 800833c:	4623      	mov	r3, r4
 800833e:	f7f9 fb3e 	bl	80019be <HAL_HCD_HC_Init>
 8008342:	4603      	mov	r3, r0
 8008344:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008346:	7bfb      	ldrb	r3, [r7, #15]
 8008348:	4618      	mov	r0, r3
 800834a:	f000 f8bd 	bl	80084c8 <USBH_Get_USB_Status>
 800834e:	4603      	mov	r3, r0
 8008350:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008352:	7bbb      	ldrb	r3, [r7, #14]
}
 8008354:	4618      	mov	r0, r3
 8008356:	3714      	adds	r7, #20
 8008358:	46bd      	mov	sp, r7
 800835a:	bd90      	pop	{r4, r7, pc}

0800835c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b084      	sub	sp, #16
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
 8008364:	460b      	mov	r3, r1
 8008366:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008368:	2300      	movs	r3, #0
 800836a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800836c:	2300      	movs	r3, #0
 800836e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008376:	78fa      	ldrb	r2, [r7, #3]
 8008378:	4611      	mov	r1, r2
 800837a:	4618      	mov	r0, r3
 800837c:	f7f9 fbae 	bl	8001adc <HAL_HCD_HC_Halt>
 8008380:	4603      	mov	r3, r0
 8008382:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008384:	7bfb      	ldrb	r3, [r7, #15]
 8008386:	4618      	mov	r0, r3
 8008388:	f000 f89e 	bl	80084c8 <USBH_Get_USB_Status>
 800838c:	4603      	mov	r3, r0
 800838e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008390:	7bbb      	ldrb	r3, [r7, #14]
}
 8008392:	4618      	mov	r0, r3
 8008394:	3710      	adds	r7, #16
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}

0800839a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800839a:	b590      	push	{r4, r7, lr}
 800839c:	b089      	sub	sp, #36	; 0x24
 800839e:	af04      	add	r7, sp, #16
 80083a0:	6078      	str	r0, [r7, #4]
 80083a2:	4608      	mov	r0, r1
 80083a4:	4611      	mov	r1, r2
 80083a6:	461a      	mov	r2, r3
 80083a8:	4603      	mov	r3, r0
 80083aa:	70fb      	strb	r3, [r7, #3]
 80083ac:	460b      	mov	r3, r1
 80083ae:	70bb      	strb	r3, [r7, #2]
 80083b0:	4613      	mov	r3, r2
 80083b2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083b4:	2300      	movs	r3, #0
 80083b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80083b8:	2300      	movs	r3, #0
 80083ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80083c2:	787c      	ldrb	r4, [r7, #1]
 80083c4:	78ba      	ldrb	r2, [r7, #2]
 80083c6:	78f9      	ldrb	r1, [r7, #3]
 80083c8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80083cc:	9303      	str	r3, [sp, #12]
 80083ce:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80083d0:	9302      	str	r3, [sp, #8]
 80083d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d4:	9301      	str	r3, [sp, #4]
 80083d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80083da:	9300      	str	r3, [sp, #0]
 80083dc:	4623      	mov	r3, r4
 80083de:	f7f9 fba1 	bl	8001b24 <HAL_HCD_HC_SubmitRequest>
 80083e2:	4603      	mov	r3, r0
 80083e4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80083e6:	7bfb      	ldrb	r3, [r7, #15]
 80083e8:	4618      	mov	r0, r3
 80083ea:	f000 f86d 	bl	80084c8 <USBH_Get_USB_Status>
 80083ee:	4603      	mov	r3, r0
 80083f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80083f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80083f4:	4618      	mov	r0, r3
 80083f6:	3714      	adds	r7, #20
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd90      	pop	{r4, r7, pc}

080083fc <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b082      	sub	sp, #8
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
 8008404:	460b      	mov	r3, r1
 8008406:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800840e:	78fa      	ldrb	r2, [r7, #3]
 8008410:	4611      	mov	r1, r2
 8008412:	4618      	mov	r0, r3
 8008414:	f7f9 fe35 	bl	8002082 <HAL_HCD_HC_GetURBState>
 8008418:	4603      	mov	r3, r0
}
 800841a:	4618      	mov	r0, r3
 800841c:	3708      	adds	r7, #8
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}

08008422 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008422:	b580      	push	{r7, lr}
 8008424:	b082      	sub	sp, #8
 8008426:	af00      	add	r7, sp, #0
 8008428:	6078      	str	r0, [r7, #4]
 800842a:	460b      	mov	r3, r1
 800842c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008434:	2b01      	cmp	r3, #1
 8008436:	d103      	bne.n	8008440 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008438:	78fb      	ldrb	r3, [r7, #3]
 800843a:	4618      	mov	r0, r3
 800843c:	f000 f870 	bl	8008520 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008440:	20c8      	movs	r0, #200	; 0xc8
 8008442:	f7f8 ff57 	bl	80012f4 <HAL_Delay>
  return USBH_OK;
 8008446:	2300      	movs	r3, #0
}
 8008448:	4618      	mov	r0, r3
 800844a:	3708      	adds	r7, #8
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}

08008450 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008450:	b480      	push	{r7}
 8008452:	b085      	sub	sp, #20
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
 8008458:	460b      	mov	r3, r1
 800845a:	70fb      	strb	r3, [r7, #3]
 800845c:	4613      	mov	r3, r2
 800845e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008466:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008468:	78fb      	ldrb	r3, [r7, #3]
 800846a:	68fa      	ldr	r2, [r7, #12]
 800846c:	212c      	movs	r1, #44	; 0x2c
 800846e:	fb01 f303 	mul.w	r3, r1, r3
 8008472:	4413      	add	r3, r2
 8008474:	333b      	adds	r3, #59	; 0x3b
 8008476:	781b      	ldrb	r3, [r3, #0]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d009      	beq.n	8008490 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800847c:	78fb      	ldrb	r3, [r7, #3]
 800847e:	68fa      	ldr	r2, [r7, #12]
 8008480:	212c      	movs	r1, #44	; 0x2c
 8008482:	fb01 f303 	mul.w	r3, r1, r3
 8008486:	4413      	add	r3, r2
 8008488:	3354      	adds	r3, #84	; 0x54
 800848a:	78ba      	ldrb	r2, [r7, #2]
 800848c:	701a      	strb	r2, [r3, #0]
 800848e:	e008      	b.n	80084a2 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008490:	78fb      	ldrb	r3, [r7, #3]
 8008492:	68fa      	ldr	r2, [r7, #12]
 8008494:	212c      	movs	r1, #44	; 0x2c
 8008496:	fb01 f303 	mul.w	r3, r1, r3
 800849a:	4413      	add	r3, r2
 800849c:	3355      	adds	r3, #85	; 0x55
 800849e:	78ba      	ldrb	r2, [r7, #2]
 80084a0:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80084a2:	2300      	movs	r3, #0
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	3714      	adds	r7, #20
 80084a8:	46bd      	mov	sp, r7
 80084aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ae:	4770      	bx	lr

080084b0 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b082      	sub	sp, #8
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f7f8 ff1b 	bl	80012f4 <HAL_Delay>
}
 80084be:	bf00      	nop
 80084c0:	3708      	adds	r7, #8
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}
	...

080084c8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80084c8:	b480      	push	{r7}
 80084ca:	b085      	sub	sp, #20
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	4603      	mov	r3, r0
 80084d0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80084d2:	2300      	movs	r3, #0
 80084d4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80084d6:	79fb      	ldrb	r3, [r7, #7]
 80084d8:	2b03      	cmp	r3, #3
 80084da:	d817      	bhi.n	800850c <USBH_Get_USB_Status+0x44>
 80084dc:	a201      	add	r2, pc, #4	; (adr r2, 80084e4 <USBH_Get_USB_Status+0x1c>)
 80084de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084e2:	bf00      	nop
 80084e4:	080084f5 	.word	0x080084f5
 80084e8:	080084fb 	.word	0x080084fb
 80084ec:	08008501 	.word	0x08008501
 80084f0:	08008507 	.word	0x08008507
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80084f4:	2300      	movs	r3, #0
 80084f6:	73fb      	strb	r3, [r7, #15]
    break;
 80084f8:	e00b      	b.n	8008512 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80084fa:	2302      	movs	r3, #2
 80084fc:	73fb      	strb	r3, [r7, #15]
    break;
 80084fe:	e008      	b.n	8008512 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008500:	2301      	movs	r3, #1
 8008502:	73fb      	strb	r3, [r7, #15]
    break;
 8008504:	e005      	b.n	8008512 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008506:	2302      	movs	r3, #2
 8008508:	73fb      	strb	r3, [r7, #15]
    break;
 800850a:	e002      	b.n	8008512 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800850c:	2302      	movs	r3, #2
 800850e:	73fb      	strb	r3, [r7, #15]
    break;
 8008510:	bf00      	nop
  }
  return usb_status;
 8008512:	7bfb      	ldrb	r3, [r7, #15]
}
 8008514:	4618      	mov	r0, r3
 8008516:	3714      	adds	r7, #20
 8008518:	46bd      	mov	sp, r7
 800851a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851e:	4770      	bx	lr

08008520 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b084      	sub	sp, #16
 8008524:	af00      	add	r7, sp, #0
 8008526:	4603      	mov	r3, r0
 8008528:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800852a:	79fb      	ldrb	r3, [r7, #7]
 800852c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800852e:	79fb      	ldrb	r3, [r7, #7]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d102      	bne.n	800853a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008534:	2300      	movs	r3, #0
 8008536:	73fb      	strb	r3, [r7, #15]
 8008538:	e001      	b.n	800853e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800853a:	2301      	movs	r3, #1
 800853c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800853e:	7bfb      	ldrb	r3, [r7, #15]
 8008540:	461a      	mov	r2, r3
 8008542:	2101      	movs	r1, #1
 8008544:	4803      	ldr	r0, [pc, #12]	; (8008554 <MX_DriverVbusFS+0x34>)
 8008546:	f7f9 f9bf 	bl	80018c8 <HAL_GPIO_WritePin>
}
 800854a:	bf00      	nop
 800854c:	3710      	adds	r7, #16
 800854e:	46bd      	mov	sp, r7
 8008550:	bd80      	pop	{r7, pc}
 8008552:	bf00      	nop
 8008554:	40020800 	.word	0x40020800

08008558 <__errno>:
 8008558:	4b01      	ldr	r3, [pc, #4]	; (8008560 <__errno+0x8>)
 800855a:	6818      	ldr	r0, [r3, #0]
 800855c:	4770      	bx	lr
 800855e:	bf00      	nop
 8008560:	20000034 	.word	0x20000034

08008564 <__libc_init_array>:
 8008564:	b570      	push	{r4, r5, r6, lr}
 8008566:	4d0d      	ldr	r5, [pc, #52]	; (800859c <__libc_init_array+0x38>)
 8008568:	4c0d      	ldr	r4, [pc, #52]	; (80085a0 <__libc_init_array+0x3c>)
 800856a:	1b64      	subs	r4, r4, r5
 800856c:	10a4      	asrs	r4, r4, #2
 800856e:	2600      	movs	r6, #0
 8008570:	42a6      	cmp	r6, r4
 8008572:	d109      	bne.n	8008588 <__libc_init_array+0x24>
 8008574:	4d0b      	ldr	r5, [pc, #44]	; (80085a4 <__libc_init_array+0x40>)
 8008576:	4c0c      	ldr	r4, [pc, #48]	; (80085a8 <__libc_init_array+0x44>)
 8008578:	f000 f92e 	bl	80087d8 <_init>
 800857c:	1b64      	subs	r4, r4, r5
 800857e:	10a4      	asrs	r4, r4, #2
 8008580:	2600      	movs	r6, #0
 8008582:	42a6      	cmp	r6, r4
 8008584:	d105      	bne.n	8008592 <__libc_init_array+0x2e>
 8008586:	bd70      	pop	{r4, r5, r6, pc}
 8008588:	f855 3b04 	ldr.w	r3, [r5], #4
 800858c:	4798      	blx	r3
 800858e:	3601      	adds	r6, #1
 8008590:	e7ee      	b.n	8008570 <__libc_init_array+0xc>
 8008592:	f855 3b04 	ldr.w	r3, [r5], #4
 8008596:	4798      	blx	r3
 8008598:	3601      	adds	r6, #1
 800859a:	e7f2      	b.n	8008582 <__libc_init_array+0x1e>
 800859c:	08008fb0 	.word	0x08008fb0
 80085a0:	08008fb0 	.word	0x08008fb0
 80085a4:	08008fb0 	.word	0x08008fb0
 80085a8:	08008fb4 	.word	0x08008fb4

080085ac <malloc>:
 80085ac:	4b02      	ldr	r3, [pc, #8]	; (80085b8 <malloc+0xc>)
 80085ae:	4601      	mov	r1, r0
 80085b0:	6818      	ldr	r0, [r3, #0]
 80085b2:	f000 b87f 	b.w	80086b4 <_malloc_r>
 80085b6:	bf00      	nop
 80085b8:	20000034 	.word	0x20000034

080085bc <free>:
 80085bc:	4b02      	ldr	r3, [pc, #8]	; (80085c8 <free+0xc>)
 80085be:	4601      	mov	r1, r0
 80085c0:	6818      	ldr	r0, [r3, #0]
 80085c2:	f000 b80b 	b.w	80085dc <_free_r>
 80085c6:	bf00      	nop
 80085c8:	20000034 	.word	0x20000034

080085cc <memset>:
 80085cc:	4402      	add	r2, r0
 80085ce:	4603      	mov	r3, r0
 80085d0:	4293      	cmp	r3, r2
 80085d2:	d100      	bne.n	80085d6 <memset+0xa>
 80085d4:	4770      	bx	lr
 80085d6:	f803 1b01 	strb.w	r1, [r3], #1
 80085da:	e7f9      	b.n	80085d0 <memset+0x4>

080085dc <_free_r>:
 80085dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80085de:	2900      	cmp	r1, #0
 80085e0:	d044      	beq.n	800866c <_free_r+0x90>
 80085e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085e6:	9001      	str	r0, [sp, #4]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	f1a1 0404 	sub.w	r4, r1, #4
 80085ee:	bfb8      	it	lt
 80085f0:	18e4      	addlt	r4, r4, r3
 80085f2:	f000 f8e3 	bl	80087bc <__malloc_lock>
 80085f6:	4a1e      	ldr	r2, [pc, #120]	; (8008670 <_free_r+0x94>)
 80085f8:	9801      	ldr	r0, [sp, #4]
 80085fa:	6813      	ldr	r3, [r2, #0]
 80085fc:	b933      	cbnz	r3, 800860c <_free_r+0x30>
 80085fe:	6063      	str	r3, [r4, #4]
 8008600:	6014      	str	r4, [r2, #0]
 8008602:	b003      	add	sp, #12
 8008604:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008608:	f000 b8de 	b.w	80087c8 <__malloc_unlock>
 800860c:	42a3      	cmp	r3, r4
 800860e:	d908      	bls.n	8008622 <_free_r+0x46>
 8008610:	6825      	ldr	r5, [r4, #0]
 8008612:	1961      	adds	r1, r4, r5
 8008614:	428b      	cmp	r3, r1
 8008616:	bf01      	itttt	eq
 8008618:	6819      	ldreq	r1, [r3, #0]
 800861a:	685b      	ldreq	r3, [r3, #4]
 800861c:	1949      	addeq	r1, r1, r5
 800861e:	6021      	streq	r1, [r4, #0]
 8008620:	e7ed      	b.n	80085fe <_free_r+0x22>
 8008622:	461a      	mov	r2, r3
 8008624:	685b      	ldr	r3, [r3, #4]
 8008626:	b10b      	cbz	r3, 800862c <_free_r+0x50>
 8008628:	42a3      	cmp	r3, r4
 800862a:	d9fa      	bls.n	8008622 <_free_r+0x46>
 800862c:	6811      	ldr	r1, [r2, #0]
 800862e:	1855      	adds	r5, r2, r1
 8008630:	42a5      	cmp	r5, r4
 8008632:	d10b      	bne.n	800864c <_free_r+0x70>
 8008634:	6824      	ldr	r4, [r4, #0]
 8008636:	4421      	add	r1, r4
 8008638:	1854      	adds	r4, r2, r1
 800863a:	42a3      	cmp	r3, r4
 800863c:	6011      	str	r1, [r2, #0]
 800863e:	d1e0      	bne.n	8008602 <_free_r+0x26>
 8008640:	681c      	ldr	r4, [r3, #0]
 8008642:	685b      	ldr	r3, [r3, #4]
 8008644:	6053      	str	r3, [r2, #4]
 8008646:	4421      	add	r1, r4
 8008648:	6011      	str	r1, [r2, #0]
 800864a:	e7da      	b.n	8008602 <_free_r+0x26>
 800864c:	d902      	bls.n	8008654 <_free_r+0x78>
 800864e:	230c      	movs	r3, #12
 8008650:	6003      	str	r3, [r0, #0]
 8008652:	e7d6      	b.n	8008602 <_free_r+0x26>
 8008654:	6825      	ldr	r5, [r4, #0]
 8008656:	1961      	adds	r1, r4, r5
 8008658:	428b      	cmp	r3, r1
 800865a:	bf04      	itt	eq
 800865c:	6819      	ldreq	r1, [r3, #0]
 800865e:	685b      	ldreq	r3, [r3, #4]
 8008660:	6063      	str	r3, [r4, #4]
 8008662:	bf04      	itt	eq
 8008664:	1949      	addeq	r1, r1, r5
 8008666:	6021      	streq	r1, [r4, #0]
 8008668:	6054      	str	r4, [r2, #4]
 800866a:	e7ca      	b.n	8008602 <_free_r+0x26>
 800866c:	b003      	add	sp, #12
 800866e:	bd30      	pop	{r4, r5, pc}
 8008670:	20000c98 	.word	0x20000c98

08008674 <sbrk_aligned>:
 8008674:	b570      	push	{r4, r5, r6, lr}
 8008676:	4e0e      	ldr	r6, [pc, #56]	; (80086b0 <sbrk_aligned+0x3c>)
 8008678:	460c      	mov	r4, r1
 800867a:	6831      	ldr	r1, [r6, #0]
 800867c:	4605      	mov	r5, r0
 800867e:	b911      	cbnz	r1, 8008686 <sbrk_aligned+0x12>
 8008680:	f000 f88c 	bl	800879c <_sbrk_r>
 8008684:	6030      	str	r0, [r6, #0]
 8008686:	4621      	mov	r1, r4
 8008688:	4628      	mov	r0, r5
 800868a:	f000 f887 	bl	800879c <_sbrk_r>
 800868e:	1c43      	adds	r3, r0, #1
 8008690:	d00a      	beq.n	80086a8 <sbrk_aligned+0x34>
 8008692:	1cc4      	adds	r4, r0, #3
 8008694:	f024 0403 	bic.w	r4, r4, #3
 8008698:	42a0      	cmp	r0, r4
 800869a:	d007      	beq.n	80086ac <sbrk_aligned+0x38>
 800869c:	1a21      	subs	r1, r4, r0
 800869e:	4628      	mov	r0, r5
 80086a0:	f000 f87c 	bl	800879c <_sbrk_r>
 80086a4:	3001      	adds	r0, #1
 80086a6:	d101      	bne.n	80086ac <sbrk_aligned+0x38>
 80086a8:	f04f 34ff 	mov.w	r4, #4294967295
 80086ac:	4620      	mov	r0, r4
 80086ae:	bd70      	pop	{r4, r5, r6, pc}
 80086b0:	20000c9c 	.word	0x20000c9c

080086b4 <_malloc_r>:
 80086b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086b8:	1ccd      	adds	r5, r1, #3
 80086ba:	f025 0503 	bic.w	r5, r5, #3
 80086be:	3508      	adds	r5, #8
 80086c0:	2d0c      	cmp	r5, #12
 80086c2:	bf38      	it	cc
 80086c4:	250c      	movcc	r5, #12
 80086c6:	2d00      	cmp	r5, #0
 80086c8:	4607      	mov	r7, r0
 80086ca:	db01      	blt.n	80086d0 <_malloc_r+0x1c>
 80086cc:	42a9      	cmp	r1, r5
 80086ce:	d905      	bls.n	80086dc <_malloc_r+0x28>
 80086d0:	230c      	movs	r3, #12
 80086d2:	603b      	str	r3, [r7, #0]
 80086d4:	2600      	movs	r6, #0
 80086d6:	4630      	mov	r0, r6
 80086d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086dc:	4e2e      	ldr	r6, [pc, #184]	; (8008798 <_malloc_r+0xe4>)
 80086de:	f000 f86d 	bl	80087bc <__malloc_lock>
 80086e2:	6833      	ldr	r3, [r6, #0]
 80086e4:	461c      	mov	r4, r3
 80086e6:	bb34      	cbnz	r4, 8008736 <_malloc_r+0x82>
 80086e8:	4629      	mov	r1, r5
 80086ea:	4638      	mov	r0, r7
 80086ec:	f7ff ffc2 	bl	8008674 <sbrk_aligned>
 80086f0:	1c43      	adds	r3, r0, #1
 80086f2:	4604      	mov	r4, r0
 80086f4:	d14d      	bne.n	8008792 <_malloc_r+0xde>
 80086f6:	6834      	ldr	r4, [r6, #0]
 80086f8:	4626      	mov	r6, r4
 80086fa:	2e00      	cmp	r6, #0
 80086fc:	d140      	bne.n	8008780 <_malloc_r+0xcc>
 80086fe:	6823      	ldr	r3, [r4, #0]
 8008700:	4631      	mov	r1, r6
 8008702:	4638      	mov	r0, r7
 8008704:	eb04 0803 	add.w	r8, r4, r3
 8008708:	f000 f848 	bl	800879c <_sbrk_r>
 800870c:	4580      	cmp	r8, r0
 800870e:	d13a      	bne.n	8008786 <_malloc_r+0xd2>
 8008710:	6821      	ldr	r1, [r4, #0]
 8008712:	3503      	adds	r5, #3
 8008714:	1a6d      	subs	r5, r5, r1
 8008716:	f025 0503 	bic.w	r5, r5, #3
 800871a:	3508      	adds	r5, #8
 800871c:	2d0c      	cmp	r5, #12
 800871e:	bf38      	it	cc
 8008720:	250c      	movcc	r5, #12
 8008722:	4629      	mov	r1, r5
 8008724:	4638      	mov	r0, r7
 8008726:	f7ff ffa5 	bl	8008674 <sbrk_aligned>
 800872a:	3001      	adds	r0, #1
 800872c:	d02b      	beq.n	8008786 <_malloc_r+0xd2>
 800872e:	6823      	ldr	r3, [r4, #0]
 8008730:	442b      	add	r3, r5
 8008732:	6023      	str	r3, [r4, #0]
 8008734:	e00e      	b.n	8008754 <_malloc_r+0xa0>
 8008736:	6822      	ldr	r2, [r4, #0]
 8008738:	1b52      	subs	r2, r2, r5
 800873a:	d41e      	bmi.n	800877a <_malloc_r+0xc6>
 800873c:	2a0b      	cmp	r2, #11
 800873e:	d916      	bls.n	800876e <_malloc_r+0xba>
 8008740:	1961      	adds	r1, r4, r5
 8008742:	42a3      	cmp	r3, r4
 8008744:	6025      	str	r5, [r4, #0]
 8008746:	bf18      	it	ne
 8008748:	6059      	strne	r1, [r3, #4]
 800874a:	6863      	ldr	r3, [r4, #4]
 800874c:	bf08      	it	eq
 800874e:	6031      	streq	r1, [r6, #0]
 8008750:	5162      	str	r2, [r4, r5]
 8008752:	604b      	str	r3, [r1, #4]
 8008754:	4638      	mov	r0, r7
 8008756:	f104 060b 	add.w	r6, r4, #11
 800875a:	f000 f835 	bl	80087c8 <__malloc_unlock>
 800875e:	f026 0607 	bic.w	r6, r6, #7
 8008762:	1d23      	adds	r3, r4, #4
 8008764:	1af2      	subs	r2, r6, r3
 8008766:	d0b6      	beq.n	80086d6 <_malloc_r+0x22>
 8008768:	1b9b      	subs	r3, r3, r6
 800876a:	50a3      	str	r3, [r4, r2]
 800876c:	e7b3      	b.n	80086d6 <_malloc_r+0x22>
 800876e:	6862      	ldr	r2, [r4, #4]
 8008770:	42a3      	cmp	r3, r4
 8008772:	bf0c      	ite	eq
 8008774:	6032      	streq	r2, [r6, #0]
 8008776:	605a      	strne	r2, [r3, #4]
 8008778:	e7ec      	b.n	8008754 <_malloc_r+0xa0>
 800877a:	4623      	mov	r3, r4
 800877c:	6864      	ldr	r4, [r4, #4]
 800877e:	e7b2      	b.n	80086e6 <_malloc_r+0x32>
 8008780:	4634      	mov	r4, r6
 8008782:	6876      	ldr	r6, [r6, #4]
 8008784:	e7b9      	b.n	80086fa <_malloc_r+0x46>
 8008786:	230c      	movs	r3, #12
 8008788:	603b      	str	r3, [r7, #0]
 800878a:	4638      	mov	r0, r7
 800878c:	f000 f81c 	bl	80087c8 <__malloc_unlock>
 8008790:	e7a1      	b.n	80086d6 <_malloc_r+0x22>
 8008792:	6025      	str	r5, [r4, #0]
 8008794:	e7de      	b.n	8008754 <_malloc_r+0xa0>
 8008796:	bf00      	nop
 8008798:	20000c98 	.word	0x20000c98

0800879c <_sbrk_r>:
 800879c:	b538      	push	{r3, r4, r5, lr}
 800879e:	4d06      	ldr	r5, [pc, #24]	; (80087b8 <_sbrk_r+0x1c>)
 80087a0:	2300      	movs	r3, #0
 80087a2:	4604      	mov	r4, r0
 80087a4:	4608      	mov	r0, r1
 80087a6:	602b      	str	r3, [r5, #0]
 80087a8:	f7f8 fcc0 	bl	800112c <_sbrk>
 80087ac:	1c43      	adds	r3, r0, #1
 80087ae:	d102      	bne.n	80087b6 <_sbrk_r+0x1a>
 80087b0:	682b      	ldr	r3, [r5, #0]
 80087b2:	b103      	cbz	r3, 80087b6 <_sbrk_r+0x1a>
 80087b4:	6023      	str	r3, [r4, #0]
 80087b6:	bd38      	pop	{r3, r4, r5, pc}
 80087b8:	20000ca0 	.word	0x20000ca0

080087bc <__malloc_lock>:
 80087bc:	4801      	ldr	r0, [pc, #4]	; (80087c4 <__malloc_lock+0x8>)
 80087be:	f000 b809 	b.w	80087d4 <__retarget_lock_acquire_recursive>
 80087c2:	bf00      	nop
 80087c4:	20000ca4 	.word	0x20000ca4

080087c8 <__malloc_unlock>:
 80087c8:	4801      	ldr	r0, [pc, #4]	; (80087d0 <__malloc_unlock+0x8>)
 80087ca:	f000 b804 	b.w	80087d6 <__retarget_lock_release_recursive>
 80087ce:	bf00      	nop
 80087d0:	20000ca4 	.word	0x20000ca4

080087d4 <__retarget_lock_acquire_recursive>:
 80087d4:	4770      	bx	lr

080087d6 <__retarget_lock_release_recursive>:
 80087d6:	4770      	bx	lr

080087d8 <_init>:
 80087d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087da:	bf00      	nop
 80087dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087de:	bc08      	pop	{r3}
 80087e0:	469e      	mov	lr, r3
 80087e2:	4770      	bx	lr

080087e4 <_fini>:
 80087e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087e6:	bf00      	nop
 80087e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087ea:	bc08      	pop	{r3}
 80087ec:	469e      	mov	lr, r3
 80087ee:	4770      	bx	lr
